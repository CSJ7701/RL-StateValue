(undo-tree-save-format-version . 1)
"a3698abb4ebc28d306575380e161d4f39e018db4"
[nil nil nil nil (26368 21984 361460 231000) 0 nil]
([nil nil ((1 . 6) (t 26368 21951 909517 511000)) nil (26368 21984 361459 88000) 0 nil])
([nil nil ((6 . 12)) nil (26368 21984 361458 587000) 0 nil])
([nil nil ((6 . 19) (#("rl_s" 0 4 (fontified nil)) . -6) (6 . 10) (#("rl_statevalue" 0 13 (fontified nil)) . -6) (6 . 19) (#("rl_sta" 0 6 (fontified t)) . -6) (undo-tree-id110 . -6) (undo-tree-id111 . -6) (undo-tree-id112 . -6) (undo-tree-id113 . -6) 12) nil (26368 21984 361457 606000) 0 nil])
([nil nil ((19 . 32)) nil (26368 21984 361455 892000) 0 nil])
([nil nil ((27 . 32) (#("Age" 0 3 (fontified nil)) . -27) (27 . 30) (#("Agent" 0 5 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -27) (undo-tree-id106 . -5) (undo-tree-id107 . -5) (undo-tree-id108 . -5) (undo-tree-id109 . -5) 32) nil (26368 21984 361454 941000) 0 nil])
([nil nil ((32 . 33)) nil (26368 21984 361453 117000) 0 nil])
([nil nil ((33 . 42)) nil (26368 21984 361452 396000) 0 nil])
([nil nil ((33 . 34)) nil (26368 21984 361451 664000) 0 nil])
([nil nil ((43 . 45)) nil (26368 21984 361451 103000) 0 nil])
([nil nil ((#("," 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -44) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) 45) nil (26368 21984 361450 71000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . 43) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) 44) nil (26368 21984 361311 19000) 0 nil])
([nil nil ((43 . 49)) nil (26368 21984 361300 970000) 0 nil])
([nil nil ((45 . 49) (#("Gri" 0 3 (fontified nil)) . -45) (45 . 48) (#("Grid" 0 4 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -45) (undo-tree-id0 . -4) (undo-tree-id1 . -4) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -2) (undo-tree-id16 . -2) (undo-tree-id17 . -2) (undo-tree-id18 . -2) (undo-tree-id19 . -2) (undo-tree-id20 . -2) (undo-tree-id21 . -2) (undo-tree-id22 . -3) (undo-tree-id23 . -3) (undo-tree-id24 . -3) (undo-tree-id25 . -3) (undo-tree-id26 . -3) (undo-tree-id27 . -3) (undo-tree-id28 . -3) (undo-tree-id29 . -4) (undo-tree-id30 . -4) (undo-tree-id31 . -4) (undo-tree-id32 . -4) (undo-tree-id33 . -4) (undo-tree-id34 . -4) (undo-tree-id35 . -4) (undo-tree-id36 . -4) (undo-tree-id37 . -4) (undo-tree-id38 . -4) (undo-tree-id39 . -4) (undo-tree-id40 . -4) (undo-tree-id41 . -4) (undo-tree-id42 . -4) (undo-tree-id43 . -4) (undo-tree-id44 . -4) (undo-tree-id45 . -4) (undo-tree-id46 . -4) (undo-tree-id47 . -4) (undo-tree-id48 . -4) (undo-tree-id49 . -4) (undo-tree-id50 . -4) (undo-tree-id51 . -4) (undo-tree-id52 . -4) (undo-tree-id53 . -4) (undo-tree-id54 . -4) (undo-tree-id55 . -4) (undo-tree-id56 . -4) (undo-tree-id57 . -4) (undo-tree-id58 . -4) (undo-tree-id59 . -4) (undo-tree-id60 . -4) (undo-tree-id61 . -4) (undo-tree-id62 . -4) 49) nil (26368 21984 361299 147000) 0 nil])
([nil nil ((49 . 50)) nil (26368 21984 361252 148000) 0 nil])
([nil nil ((#("G" 0 1 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -45) (undo-tree-id325 . -1) (#("r" 0 1 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -46) (undo-tree-id326 . -1) (#("i" 0 1 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -47) (undo-tree-id327 . -1) (#("d" 0 1 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -48) (undo-tree-id328 . -1) 49 (t 26368 21984 362781 448000)) nil (26368 22007 186511 933000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . 44) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) 45) nil (26368 22007 186510 420000) 0 nil])
([nil nil ((#("D" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -34) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (#("i" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -35) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (#("r" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -36) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (#("e" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -37) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (#("c" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -38) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (#("t" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -39) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (#("i" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -40) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (#("o" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -41) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (#("n" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -42) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (#("," 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -43) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) 44) nil (26368 22007 186507 525000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . 33) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) 34) nil (26368 22007 186487 908000) 0 nil])
([nil nil ((#("A" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -27) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (#("g" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -28) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (#("e" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -29) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (#("n" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -30) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (#("t" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -31) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (#("," 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -32) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) 33) nil (26368 22007 186484 842000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . 26) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) 27) nil (26368 22007 186357 542000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -20) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (#("m" 0 1 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -21) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (#("p" 0 1 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -22) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (#("o" 0 1 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -23) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (#("r" 0 1 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -24) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (#("t" 0 1 (face py-import-from-face fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -25) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) 26) nil (26368 22007 186354 647000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . 19) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) 20) nil (26368 22007 186344 167000) 0 nil])
([nil nil ((19 . 20)) nil (26368 22007 186342 704000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -19) (undo-tree-id194 . -1) 20) nil (26368 22007 186342 424000) 0 nil])
([nil nil ((19 . 40)) nil (26368 22007 186341 602000) 0 nil])
([nil nil ((40 . 49)) nil (26368 22007 186341 362000) 0 nil])
([nil nil ((40 . 49) (#("Dir" 0 3 (fontified nil)) . -40) (40 . 43) (#("Direction" 0 9 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -40) (undo-tree-id190 . -9) (undo-tree-id191 . -9) (undo-tree-id192 . -9) (undo-tree-id193 . -9) 49) nil (26368 22007 186340 510000) 0 nil])
([nil nil ((49 . 50)) nil (26368 22007 186337 985000) 0 nil])
([nil nil ((50 . 58)) nil (26368 22007 186337 83000) 0 nil])
([nil nil ((55 . 68) (#("rl_" 0 3 (fontified nil)) . -55) (55 . 58) (#("rl_statevalue" 0 13 (fontified nil)) . -55) (55 . 68) (#("rl_" 0 3 (fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -55) (undo-tree-id186 . -3) (undo-tree-id187 . -3) (undo-tree-id188 . -3) (undo-tree-id189 . -3) 58) nil (26368 22007 186335 961000) 0 nil])
([nil nil ((68 . 85)) nil (26368 22007 186333 557000) 0 nil])
([nil nil ((81 . 85) (#("Gri" 0 3 (fontified nil)) . -81) (81 . 84) (#("Grid" 0 4 (fontified t match-data (0 3 0 1 1 2 2 3))) . -81) (undo-tree-id114 . -4) (undo-tree-id115 . -4) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -2) (undo-tree-id130 . -2) (undo-tree-id131 . -2) (undo-tree-id132 . -2) (undo-tree-id133 . -2) (undo-tree-id134 . -2) (undo-tree-id135 . -2) (undo-tree-id136 . -3) (undo-tree-id137 . -3) (undo-tree-id138 . -3) (undo-tree-id139 . -3) (undo-tree-id140 . -3) (undo-tree-id141 . -3) (undo-tree-id142 . -3) (undo-tree-id143 . -3) (undo-tree-id144 . -3) (undo-tree-id145 . -3) (undo-tree-id146 . -3) (undo-tree-id147 . -3) (undo-tree-id148 . -3) (undo-tree-id149 . -3) (undo-tree-id150 . -4) (undo-tree-id151 . -4) (undo-tree-id152 . -4) (undo-tree-id153 . -4) (undo-tree-id154 . -4) (undo-tree-id155 . -4) (undo-tree-id156 . -4) (undo-tree-id157 . -4) (undo-tree-id158 . -4) (undo-tree-id159 . -4) (undo-tree-id160 . -4) (undo-tree-id161 . -4) (undo-tree-id162 . -4) (undo-tree-id163 . -4) (undo-tree-id164 . -4) (undo-tree-id165 . -4) (undo-tree-id166 . -4) (undo-tree-id167 . -4) (undo-tree-id168 . -4) (undo-tree-id169 . -4) (undo-tree-id170 . -4) (undo-tree-id171 . -4) (undo-tree-id172 . -4) (undo-tree-id173 . -4) (undo-tree-id174 . -4) (undo-tree-id175 . -4) (undo-tree-id176 . -4) (undo-tree-id177 . -4) (undo-tree-id178 . -4) (undo-tree-id179 . -4) (undo-tree-id180 . -4) (undo-tree-id181 . -4) (undo-tree-id182 . -4) (undo-tree-id183 . -4) (undo-tree-id184 . -4) (undo-tree-id185 . -4) 85) nil (26368 22007 186329 529000) 0 nil])
([nil nil ((85 . 87) (t 26368 22007 186969 203000)) nil (26368 22090 233612 675000) 0 nil])
([nil nil ((87 . 96)) nil (26368 22090 233612 94000) 0 nil])
([nil nil ((96 . 100)) nil (26368 22090 233611 342000) 0 nil])
([nil nil ((100 . 101)) nil (26368 22090 233610 611000) 0 nil])
([nil nil ((101 . 106)) nil (26368 22090 233609 819000) 0 nil])
([nil nil ((106 . 108)) nil (26368 22090 233608 948000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -107) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) 108) nil (26368 22090 233607 996000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -106) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) 107) nil (26368 22090 233604 860000) 0 nil])
([nil nil ((106 . 121)) nil (26368 22090 233602 446000) 0 nil])
([nil nil ((121 . 122)) nil (26368 22090 233602 105000) 0 nil])
([nil nil ((122 . 131)) nil (26368 22090 233601 574000) 0 nil])
([nil nil ((119 . 123)) nil (26368 22090 233601 233000) 0 nil])
([nil nil ((135 . 138)) nil (26368 22090 233600 943000) 0 nil])
([nil nil ((140 . 148) (#("        " 0 8 (fontified nil match-data (0 4 0 1 1 2 2 3 3 4))) . 139) (undo-tree-id341 . -8) (undo-tree-id342 . -8) (undo-tree-id343 . -8) (undo-tree-id344 . -8) (undo-tree-id345 . -8) (undo-tree-id346 . -8) (138 . 148)) nil (26368 22090 233600 402000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . 144) (undo-tree-id329 . -4) (undo-tree-id330 . -4) (undo-tree-id331 . -4) (undo-tree-id332 . -4) (undo-tree-id333 . -4) (undo-tree-id334 . -4) (undo-tree-id335 . -4) (undo-tree-id336 . -4) (undo-tree-id337 . -4) (undo-tree-id338 . -4) (undo-tree-id339 . -4) (undo-tree-id340 . -4) 148) nil (26368 22090 233594 841000) 0 nil])
([nil nil ((123 . 130) (t 26368 22090 235665 969000)) nil (26368 25583 649477 633000) 0 nil])
([nil nil ((130 . 131)) nil (26368 25583 649476 932000) 0 nil])
([nil nil ((131 . 137)) nil (26368 25583 649476 290000) 0 nil])
([nil nil ((137 . 143)) nil (26368 25583 649475 719000) 0 nil])
([nil nil ((143 . 144)) nil (26368 25583 649475 349000) 0 nil])
([nil nil ((144 . 149)) nil (26368 25583 649475 48000) 0 nil])
([nil nil ((145 . 149) (#("Gri" 0 3 (fontified nil)) . -145) (145 . 148) (#("Grid" 0 4 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -145) (undo-tree-id368 . -4) (undo-tree-id369 . -4) (undo-tree-id370 . -4) (undo-tree-id371 . -4) 149) nil (26368 25583 649474 587000) 0 nil])
([nil nil ((#("." 0 1 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -161) (undo-tree-id365 . -1) (#("." 0 1 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -162) (undo-tree-id366 . -1) (#("." 0 1 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -163) (undo-tree-id367 . -1) 164) nil (26368 25583 649471 421000) 0 nil])
([nil nil ((161 . 179)) nil (26368 25583 649468 997000) 0 nil])
([nil nil ((174 . 179) (#("Age" 0 3 (fontified nil)) . -174) (174 . 177) (#("Agent" 0 5 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -174) (undo-tree-id361 . -5) (undo-tree-id362 . -5) (undo-tree-id363 . -5) (undo-tree-id364 . -5) 179) nil (26368 25583 649468 125000) 0 nil])
([nil nil ((179 . 188)) nil (26368 25583 649464 458000) 0 nil])
([nil nil ((188 . 194)) nil (26368 25583 649463 647000) 0 nil])
([nil nil ((#("f" 0 1 (face py-object-reference-face fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -191) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (#("g" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -192) (undo-tree-id359 . -1) (#("." 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -193) (undo-tree-id360 . -1) 194) nil (26368 25583 649462 244000) 0 nil])
([nil nil ((191 . 204)) nil (26368 25583 649446 725000) 0 nil])
([nil nil ((149 . 165) (t 26368 25583 651361 506000)) nil (26368 25849 319076 690000) 0 nil])
([nil nil ((165 . 166)) nil (26368 25849 319076 480000) 0 nil])
([nil nil ((166 . 176)) nil (26368 25849 319076 229000) 0 nil])
([nil nil ((176 . 178)) nil (26368 25849 319075 989000) 0 nil])
([nil nil ((233 . 242)) nil (26368 25849 319075 448000) 0 nil])
([nil nil ((242 . 252)) nil (26368 25849 319075 227000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -251) (undo-tree-id470 . -1) 252) nil (26368 25849 319074 836000) 0 nil])
([nil nil ((251 . 255)) nil (26368 25849 319074 295000) 0 nil])
([nil nil ((255 . 257)) nil (26368 25849 319074 45000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -255) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (#("i" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -256) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) 257) nil (26368 25849 319073 304000) 0 nil])
([nil nil ((157 . 158)) nil (26368 25849 319070 238000) 0 nil])
([nil nil ((256 . 259)) nil (26368 25849 319069 326000) 0 nil])
([nil nil ((256 . 271) (#("dis" 0 3 (fontified nil)) . -256) (256 . 259) (#("discount_factor" 0 15 (fontified nil)) . -256) (256 . 271) (#("dis" 0 3 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -256) (undo-tree-id372 . -3) (undo-tree-id373 . -3) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -2) (undo-tree-id396 . -2) (undo-tree-id397 . -2) (undo-tree-id398 . -2) (undo-tree-id399 . -2) (undo-tree-id400 . -2) (undo-tree-id401 . -2) (undo-tree-id402 . -2) (undo-tree-id403 . -2) (undo-tree-id404 . -2) (undo-tree-id405 . -2) (undo-tree-id406 . -2) (undo-tree-id407 . -2) (undo-tree-id408 . -2) (undo-tree-id409 . -2) (undo-tree-id410 . -2) (undo-tree-id411 . -2) (undo-tree-id412 . -2) (undo-tree-id413 . -2) (undo-tree-id414 . -3) (undo-tree-id415 . -3) (undo-tree-id416 . -3) (undo-tree-id417 . -3) (undo-tree-id418 . -3) (undo-tree-id419 . -3) (undo-tree-id420 . -3) (undo-tree-id421 . -3) (undo-tree-id422 . -3) (undo-tree-id423 . -3) (undo-tree-id424 . -3) (undo-tree-id425 . -3) (undo-tree-id426 . -3) (undo-tree-id427 . -3) (undo-tree-id428 . -3) (undo-tree-id429 . -3) (undo-tree-id430 . -3) (undo-tree-id431 . -3) (undo-tree-id432 . -3) (undo-tree-id433 . -3) (undo-tree-id434 . -3) (undo-tree-id435 . -3) (undo-tree-id436 . -3) (undo-tree-id437 . -3) (undo-tree-id438 . -3) (undo-tree-id439 . -3) (undo-tree-id440 . -3) (undo-tree-id441 . -3) (undo-tree-id442 . -3) (undo-tree-id443 . -3) (undo-tree-id444 . -3) (undo-tree-id445 . -3) (undo-tree-id446 . -3) (undo-tree-id447 . -3) (undo-tree-id448 . -3) (undo-tree-id449 . -3) (undo-tree-id450 . -3) (undo-tree-id451 . -3) (undo-tree-id452 . -3) (undo-tree-id453 . -3) (undo-tree-id454 . -3) (undo-tree-id455 . -3) (undo-tree-id456 . -3) (undo-tree-id457 . -3) (undo-tree-id458 . -3) (undo-tree-id459 . -3) (undo-tree-id460 . -3) (undo-tree-id461 . -3) 259) nil (26368 25849 319064 417000) 0 nil])
([nil nil ((274 . 282) (#("        " 0 8 (fontified nil match-data (0 3 0 1 1 2 2 3))) . 273) (undo-tree-id478 . -8) (273 . 282) (#("        " 0 8 (fontified nil match-data (0 3 0 1 1 2 2 3))) . 272) (undo-tree-id479 . -8) (271 . 281) (t 26368 25849 319811 362000)) nil (26368 25923 1580 32000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t match-data (0 3 0 1 1 2 2 3))) . 278) (undo-tree-id477 . -4) 282) nil (26368 25923 1578 569000) 0 nil])
([nil nil ((278 . 299)) nil (26368 25923 1577 938000) 0 nil])
([nil nil ((299 . 305)) nil (26368 25923 1577 698000) 0 nil])
([nil nil ((305 . 306)) nil (26368 25923 1577 457000) 0 nil])
([nil nil ((306 . 315)) nil (26368 25923 1576 896000) 0 nil])
([nil nil ((315 . 318)) nil (26368 25923 1576 215000) 0 nil])
([nil nil ((320 . 328) (#("        " 0 8 (fontified nil match-data (0 3 0 1 1 2 2 3))) . 319) (undo-tree-id476 . -8) (318 . 328)) nil (26368 25923 1575 514000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t match-data (0 3 0 1 1 2 2 3))) . 324) (undo-tree-id475 . -4) 328) nil (26368 25923 1574 51000) 0 nil])
([nil nil ((324 . 329)) nil (26368 25923 1572 528000) 0 nil])
([nil nil ((#("f" 0 1 (face py-def-face fontified t match-data (0 3 0 1 1 2 2 3))) . -328) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) 329) nil (26368 25923 1571 476000) 0 nil])
([nil nil ((328 . 346)) nil (26368 25923 1560 195000) 0 nil])
([nil nil ((346 . 347)) nil (26368 25923 1559 423000) 0 nil])
([nil nil ((347 . 356)) nil (26368 25923 1558 732000) 0 nil])
([nil nil ((356 . 359)) nil (26368 25923 1553 913000) 0 nil])
([nil nil ((361 . 369) (#("        " 0 8 (fontified nil match-data (0 3 0 1 1 2 2 3))) . 360) (undo-tree-id528 . -8) (359 . 369) (t 26368 25923 3726 633000)) nil (26368 26088 546023 956000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t match-data (0 3 0 1 1 2 2 3))) . 365) (undo-tree-id527 . -4) 369) nil (26368 26088 546022 944000) 0 nil])
([nil nil ((365 . 384)) nil (26368 26088 546022 13000) 0 nil])
([nil nil ((#("r" 0 1 (face py-def-face fontified t match-data (0 3 0 1 1 2 2 3))) . -380) (undo-tree-id523 . -1) (#("i" 0 1 (face py-def-face fontified t match-data (0 3 0 1 1 2 2 3))) . -381) (undo-tree-id524 . -1) (#("o" 0 1 (face py-def-face fontified t match-data (0 3 0 1 1 2 2 3))) . -382) (undo-tree-id525 . -1) (#("n" 0 1 (face py-def-face fontified t match-data (0 3 0 1 1 2 2 3))) . -383) (undo-tree-id526 . -1) 384) nil (26368 26088 546021 1000) 0 nil])
([nil nil ((380 . 390)) nil (26368 26088 546019 408000) 0 nil])
([nil nil ((390 . 391)) nil (26368 26088 546019 177000) 0 nil])
([nil nil ((391 . 400)) nil (26368 26088 546018 867000) 0 nil])
([nil nil ((400 . 403)) nil (26368 26088 546018 596000) 0 nil])
([nil nil ((#("    def getValidActions(self):
        ..." 0 4 (fontified t match-data (0 3 0 1 1 2 2 3)) 4 7 (face py-def-class-face fontified t match-data (0 3 0 1 1 2 2 3)) 7 8 (fontified t match-data (0 3 0 1 1 2 2 3)) 8 23 (face py-def-face fontified t match-data (0 3 0 1 1 2 2 3)) 23 24 (face (rainbow-delimiters-depth-1-face) fontified t match-data (0 3 0 1 1 2 2 3)) 24 28 (face py-object-reference-face fontified t match-data (0 3 0 1 1 2 2 3)) 28 29 (face (rainbow-delimiters-depth-1-face) fontified t match-data (0 3 0 1 1 2 2 3)) 29 31 (fontified t match-data (0 3 0 1 1 2 2 3)) 31 42 (fontified t match-data (0 3 0 1 1 2 2 3))) . 361) (undo-tree-id517 . -8) (undo-tree-id518 . -11) (undo-tree-id519 . -11) (undo-tree-id520 . -42) (undo-tree-id521 . -42) (undo-tree-id522 . -11)) nil (26368 26088 546017 875000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -360) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) 361) nil (26368 26088 546014 819000) 0 nil])
([nil nil ((307 . 308)) nil (26368 26088 546012 374000) 0 nil])
([nil nil ((307 . 315)) nil (26368 26088 546012 94000) 0 nil])
([nil nil ((315 . 319)) nil (26368 26088 546011 803000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . 318) (undo-tree-id509 . -1) 319) nil (26368 26088 546011 443000) 0 nil])
([nil nil ((318 . 337)) nil (26368 26088 546010 841000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . 336) (undo-tree-id508 . -1) 337) nil (26368 26088 546010 330000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -335) (undo-tree-id507 . -1) 336) nil (26368 26088 546009 509000) 0 nil])
([nil nil ((335 . 337)) nil (26368 26088 546008 447000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -335) (undo-tree-id505 . -1) (#("s" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -336) (undo-tree-id506 . -1) 337) nil (26368 26088 546007 846000) 0 nil])
([nil nil ((#("v" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -331) (undo-tree-id501 . -1) (#("e" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -332) (undo-tree-id502 . -1) (#("l" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -333) (undo-tree-id503 . -1) (#("u" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -334) (undo-tree-id504 . -1) 335) nil (26368 26088 546006 173000) 0 nil])
([nil nil ((331 . 332)) nil (26368 26088 546003 87000) 0 nil])
([nil nil ((332 . 353)) nil (26368 26088 546002 846000) 0 nil])
([nil nil ((353 . 366)) nil (26368 26088 546002 396000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -362) (undo-tree-id497 . -1) (#("'" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -363) (undo-tree-id498 . -1) (#("\"" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -364) (undo-tree-id499 . -1) (#("\"" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -365) (undo-tree-id500 . -1) 366) nil (26368 26088 546001 915000) 0 nil])
([nil nil ((362 . 365)) nil (26368 26088 546000 31000) 0 nil])
([nil nil ((#("." 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -374) (undo-tree-id494 . -1) (#("." 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -375) (undo-tree-id495 . -1) (#("." 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -376) (undo-tree-id496 . -1) 377) nil (26368 26088 545999 500000) 0 nil])
([nil nil ((374 . 395)) nil (26368 26088 545998 47000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -393) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (#("." 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -394) (undo-tree-id492 . -1) (undo-tree-id493 . -1) 395) nil (26368 26088 545997 486000) 0 nil])
([nil nil ((393 . 395)) nil (26368 26088 545995 563000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -394) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) 395) nil (26368 26088 545994 911000) 0 nil])
([nil nil ((394 . 400)) nil (26368 26088 545993 18000) 0 nil])
([nil nil ((400 . 409)) nil (26368 26088 545992 727000) 0 nil])
([nil nil ((409 . 410)) nil (26368 26088 545992 477000) 0 nil])
([nil nil ((410 . 423)) nil (26368 26088 545992 206000) 0 nil])
([nil nil ((#("G" 0 1 (face py-variable-name-face fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -223) (undo-tree-id484 . -1) (undo-tree-id485 . -1) 224) nil (26368 26088 545991 846000) 0 nil])
([nil nil ((223 . 224)) nil (26368 26088 545990 192000) 0 nil])
([nil nil ((223 . 227) (#("g" 0 1 (fontified nil)) . -223) (223 . 224) (#("grid" 0 4 (fontified nil)) . -223) (223 . 227) (#("g" 0 1 (face py-variable-name-face fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -223) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) 224) nil (26368 26088 545989 331000) 0 nil])
([nil nil ((#("d" 0 1 (face py-variable-name-face fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . 227) (#("i" 0 1 (face py-variable-name-face fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . 227) (#("r" 0 1 (face py-variable-name-face fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . 227)) nil (26368 26088 545974 12000) 0 nil])
([nil nil ((#("A" 0 1 (face py-variable-name-face fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -196) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) 197 (t 26368 26088 547736 126000)) nil (26368 26091 810323 24000) 0 nil])
([nil nil ((196 . 197)) nil (26368 26091 810301 874000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . 142) (t 26368 26091 811775 186000)) nil (26368 26129 375764 675000) 0 nil])
([nil nil ((142 . 143)) nil (26368 26129 375764 364000) 0 nil])
([nil nil ((#("g" 0 1 (face py-variable-name-face fontified t match-data (0 1 0 1))) . -223) (undo-tree-id591 . -1) (undo-tree-id592 . -1) 224) nil (26368 26129 375763 963000) 0 nil])
([nil nil ((223 . 224)) nil (26368 26129 375763 112000) 0 nil])
([nil nil ((223 . 227) (#("G" 0 1 (fontified nil)) . -223) (223 . 224) (#("Grid" 0 4 (fontified nil)) . -223) (223 . 227) (#("G" 0 1 (face py-variable-name-face fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -223) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) 224) nil (26368 26129 375762 330000) 0 nil])
([nil nil ((#("r" 0 1 (face py-variable-name-face fontified t match-data (0 1 0 1))) . -224) (undo-tree-id584 . -1) (#("i" 0 1 (face py-variable-name-face fontified t match-data (0 1 0 1))) . -225) (undo-tree-id585 . -1) (#("d" 0 1 (face py-variable-name-face fontified t match-data (0 1 0 1))) . -226) (undo-tree-id586 . -1) 227) nil (26368 26129 375759 856000) 0 nil])
([nil nil ((#("a" 0 1 (face py-variable-name-face fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -196) (undo-tree-id583 . -1) 197) nil (26368 26129 375757 722000) 0 nil])
([nil nil ((196 . 197)) nil (26368 26129 375757 20000) 0 nil])
([nil nil ((#("g" 0 1 (face py-variable-name-face fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . 248)) nil (26368 26129 375756 640000) 0 nil])
([nil nil ((248 . 249)) nil (26368 26129 375756 349000) 0 nil])
([nil nil ((232 . 233)) nil (26368 26129 375756 89000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -232) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) 233) nil (26368 26129 375755 688000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -231) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) 232) nil (26368 26129 375753 794000) 0 nil])
([nil nil ((#("G" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -230) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) 231) nil (26368 26129 375752 31000) 0 nil])
([nil nil ((230 . 232)) nil (26368 26129 375750 488000) 0 nil])
([nil nil ((230 . 234) (#("gr" 0 2 (fontified nil)) . -230) (230 . 232) (#("Grid" 0 4 (fontified nil)) . -230) (230 . 234) (#("gr" 0 2 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -230) (undo-tree-id567 . -2) (undo-tree-id568 . -2) (undo-tree-id569 . -2) (undo-tree-id570 . -2) 232) nil (26368 26129 375749 807000) 0 nil])
([nil nil ((#("G" 0 1 (fontified t match-data (0 2 0 1 1 2))) . -230) (undo-tree-id563 . -1) (#("r" 0 1 (fontified t match-data (0 2 0 1 1 2))) . -231) (undo-tree-id564 . -1) (#("i" 0 1 (fontified t match-data (0 2 0 1 1 2))) . -232) (undo-tree-id565 . -1) (#("d" 0 1 (fontified t match-data (0 2 0 1 1 2))) . -233) (undo-tree-id566 . -1) 234) nil (26368 26129 375747 402000) 0 nil])
([nil nil ((230 . 232)) nil (26368 26129 375745 709000) 0 nil])
([nil nil ((234 . 235)) nil (26368 26129 375745 458000) 0 nil])
([nil nil ((#("A" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -204) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) 205) nil (26368 26129 375744 787000) 0 nil])
([nil nil ((204 . 205)) nil (26368 26129 375427 909000) 0 nil])
([nil nil ((209 . 210)) nil (26368 26129 375424 152000) 0 nil])
([nil nil ((412 . 425) (t 26368 26129 378223 429000)) nil (26368 26146 291714 549000) 0 nil])
([nil nil ((425 . 446)) nil (26368 26146 291713 788000) 0 nil])
([nil nil ((446 . 455)) nil (26368 26146 291713 337000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -451) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (#("m" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -452) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (#("e" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -453) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (#("n" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -454) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) 455) nil (26368 26146 291710 802000) 0 nil])
([nil nil ((451 . 460)) nil (26368 26146 291645 228000) 0 nil])
([nil nil ((460 . 461)) nil (26368 26146 291644 838000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -460) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) 461) nil (26368 26146 291643 996000) 0 nil])
([nil nil ((460 . 461)) nil (26368 26146 291590 786000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -460) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) 461) nil (26368 26146 291589 944000) 0 nil])
([nil nil ((460 . 461)) nil (26368 26146 291568 694000) 0 nil])
([nil nil ((461 . 478) (t 26368 26146 294424 483000)) nil (26368 26149 902656 387000) 0 nil])
([nil nil ((478 . 481)) nil (26368 26149 902651 929000) 0 nil])
([nil nil ((#("." 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -478) (undo-tree-id825 . -1) (#("." 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -479) (undo-tree-id826 . -1) (#("." 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -480) (undo-tree-id827 . -1) 481 (t 26368 26149 904467 324000)) nil (26368 26201 495894 352000) 0 nil])
([nil nil ((478 . 499)) nil (26368 26201 495892 739000) 0 nil])
([nil nil ((499 . 501)) nil (26368 26201 495892 489000) 0 nil])
([nil nil ((492 . 501) (#("Dir" 0 3 (fontified nil)) . -492) (492 . 495) (#("Direction" 0 9 (fontified t match-data (0 3 0 1 1 2 2 3))) . -492) (undo-tree-id821 . -9) (undo-tree-id822 . -9) (undo-tree-id823 . -9) (undo-tree-id824 . -9) 501) nil (26368 26201 495891 346000) 0 nil])
([nil nil ((501 . 502)) nil (26368 26201 495880 877000) 0 nil])
([nil nil ((502 . 523)) nil (26368 26201 495876 749000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -584) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) 585 (t 26368 26201 498077 445000)) nil (26368 26370 626436 966000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -580) (undo-tree-id844 . -4) (undo-tree-id845 . -4) (undo-tree-id846 . -4) (undo-tree-id847 . -4) (undo-tree-id848 . -4) (undo-tree-id849 . -4) (undo-tree-id850 . -4) 584) nil (26368 26370 626431 35000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -579) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) 580) nil (26368 26370 626427 38000) 0 nil])
([nil nil ((579 . 587)) nil (26368 26370 626422 690000) 0 nil])
([nil nil ((580 . 588) (#("        " 0 8 (fontified nil match-data (0 4 0 1 1 2 2 3 3 4))) . 579) (undo-tree-id836 . -8) (587 . 588)) nil (26368 26370 626421 668000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . 584) (undo-tree-id835 . -4) 588) nil (26368 26370 626420 35000) 0 nil])
([nil nil ((584 . 597)) nil (26368 26370 626418 492000) 0 nil])
([nil nil ((#("z" 0 1 (face py-def-face fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -595) (undo-tree-id833 . -1) (#("x" 0 1 (face py-def-face fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -596) (undo-tree-id834 . -1) 597) nil (26368 26370 626417 319000) 0 nil])
([nil nil ((595 . 597)) nil (26368 26370 626414 694000) 0 nil])
([nil nil ((597 . 603)) nil (26368 26370 626413 983000) 0 nil])
([nil nil ((603 . 604)) nil (26368 26370 626413 192000) 0 nil])
([nil nil ((604 . 613)) nil (26368 26370 626412 270000) 0 nil])
([nil nil ((613 . 624)) nil (26368 26370 626411 468000) 0 nil])
([nil nil ((603 . 612)) nil (26368 26370 626410 807000) 0 nil])
([nil nil ((607 . 612) (#("flo" 0 3 (fontified nil)) . -607) (607 . 610) (#("float" 0 5 (face py-builtins-face fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -607) (undo-tree-id829 . -5) (undo-tree-id830 . -5) (undo-tree-id831 . -5) (undo-tree-id832 . -5) 612) nil (26368 26370 626409 715000) 0 nil])
([nil nil ((635 . 639) (#("    " 0 4 (fontified nil match-data (0 4 0 1 1 2 2 3 3 4))) . 634) (undo-tree-id828 . -4) (633 . 639)) nil (26368 26370 626405 978000) 0 nil])
([nil nil ((639 . 660)) nil (26368 26370 626397 772000) 0 nil])
([nil nil ((660 . 661)) nil (26368 26370 626397 91000) 0 nil])
([nil nil ((661 . 669)) nil (26368 26370 626396 149000) 0 nil])
([nil nil ((669 . 670)) nil (26368 26370 626395 428000) 0 nil])
([nil nil ((670 . 679)) nil (26368 26370 626394 617000) 0 nil])
([nil nil ((679 . 682)) nil (26368 26370 626393 775000) 0 nil])
([nil nil ((682 . 683)) nil (26368 26370 626389 397000) 0 nil])
([nil nil ((274 . 282) (t 26368 26370 628052 95000)) nil (26368 26414 533440 683000) 0 nil])
([nil nil ((478 . 479)) nil (26368 26414 533439 841000) 0 nil])
([nil nil ((479 . 491) (#("        " 0 8 (fontified t match-data (0 3 0 1 1 2 2 3))) . 479) (undo-tree-id865 . -8) 487) nil (26368 26414 533438 799000) 0 nil])
([nil nil ((479 . 487) (#("            " 0 12 (fontified t match-data (0 3 0 1 1 2 2 3))) . 479) (undo-tree-id864 . -12) 491) nil (26368 26414 533437 547000) 0 nil])
([nil nil ((479 . 483) (#("        " 0 8 (fontified t match-data (0 3 0 1 1 2 2 3))) . 479) (undo-tree-id863 . -8) 487) nil (26368 26414 533436 164000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t match-data (0 3 0 1 1 2 2 3))) . 479) (undo-tree-id862 . -4) 483) nil (26368 26414 533434 611000) 0 nil])
([nil nil ((479 . 495)) nil (26368 26414 533433 379000) 0 nil])
([nil nil ((478 . 479)) nil (26368 26414 533432 617000) 0 nil])
([nil nil ((470 . 482) (#("        " 0 8 (fontified t match-data (0 3 0 1 1 2 2 3))) . 470) (undo-tree-id861 . -8) 478) nil (26368 26414 533431 796000) 0 nil])
([nil nil ((470 . 478) (#("            " 0 12 (fontified t match-data (0 3 0 1 1 2 2 3))) . 470) (undo-tree-id860 . -12) 482) nil (26368 26414 533429 912000) 0 nil])
([nil nil ((470 . 474) (#("        " 0 8 (fontified t match-data (0 3 0 1 1 2 2 3))) . 470) (undo-tree-id859 . -8) 478) nil (26368 26414 533428 99000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t match-data (0 3 0 1 1 2 2 3))) . 470) (undo-tree-id858 . -4) 474) nil (26368 26414 533426 155000) 0 nil])
([nil nil ((470 . 486)) nil (26368 26414 533417 759000) 0 nil])
([nil nil ((486 . 507)) nil (26368 26414 533416 537000) 0 nil])
([nil nil ((507 . 510)) nil (26368 26414 533411 908000) 0 nil])
([nil nil ((613 . 623) (t 26368 26414 535559 393000)) nil (26368 26523 486688 20000) 0 nil])
([nil nil ((623 . 624)) nil (26368 26523 486687 799000) 0 nil])
([nil nil ((624 . 645)) nil (26368 26523 486687 569000) 0 nil])
([nil nil ((645 . 647)) nil (26368 26523 486687 248000) 0 nil])
([nil nil ((647 . 648)) nil (26368 26523 486687 28000) 0 nil])
([nil nil ((648 . 658)) nil (26368 26523 486686 777000) 0 nil])
([nil nil ((649 . 658) (#("Dir" 0 3 (fontified nil)) . -649) (649 . 652) (#("Direction" 0 9 (fontified t match-data (0 3 0 1 1 2 2 3))) . -649) (undo-tree-id1197 . -9) (undo-tree-id1198 . -9) (undo-tree-id1199 . -9) (undo-tree-id1200 . -9) 658) nil (26368 26523 486686 136000) 0 nil])
([nil nil ((573 . 594)) nil (26368 26523 486684 373000) 0 nil])
([nil nil ((594 . 597)) nil (26368 26523 486684 42000) 0 nil])
([nil nil ((592 . 601) (#("ge" 0 2 (fontified nil)) . -592) (592 . 594) (#("getPolicy" 0 9 (fontified nil)) . -592) (592 . 601) (#("getPo" 0 5 (fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -592) (undo-tree-id1193 . -5) (undo-tree-id1194 . -5) (undo-tree-id1195 . -5) (undo-tree-id1196 . -5) 597) nil (26368 26523 486683 481000) 0 nil])
([nil nil ((601 . 603)) nil (26368 26523 486681 137000) 0 nil])
([nil nil ((603 . 624)) nil (26368 26523 486680 325000) 0 nil])
([nil nil ((573 . 578)) nil (26368 26523 486679 353000) 0 nil])
([nil nil ((#("p" 0 1 (face py-variable-name-face fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . 578)) nil (26368 26523 486678 512000) 0 nil])
([nil nil ((578 . 579)) nil (26368 26523 486677 770000) 0 nil])
([nil nil ((629 . 630)) nil (26368 26523 486677 229000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -629) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) 630) nil (26368 26523 486676 598000) 0 nil])
([nil nil ((629 . 631)) nil (26368 26523 486674 33000) 0 nil])
([nil nil ((#("                    ne" 0 22 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . 609) (undo-tree-id1185 . -20) (undo-tree-id1186 . -22) (undo-tree-id1187 . -22) (undo-tree-id1188 . -22)) nil (26368 26523 486673 121000) 0 nil])
([nil nil ((553 . 554)) nil (26368 26523 486671 17000) 0 nil])
([nil nil ((553 . 573)) nil (26368 26523 486670 236000) 0 nil])
([nil nil ((573 . 580)) nil (26368 26523 486669 865000) 0 nil])
([nil nil ((#("S" 0 1 (fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -577) (undo-tree-id1182 . -1) (#("t" 0 1 (fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -578) (undo-tree-id1183 . -1) (#("a" 0 1 (fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -579) (undo-tree-id1184 . -1) 580) nil (26368 26523 486668 733000) 0 nil])
([nil nil ((577 . 597)) nil (26368 26523 486666 439000) 0 nil])
([nil nil ((591 . 603) (#("ge" 0 2 (fontified nil)) . -591) (591 . 593) (#("getNextState" 0 12 (fontified nil)) . -591) (591 . 603) (#("getNex" 0 6 (fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -591) (undo-tree-id1178 . -6) (undo-tree-id1179 . -6) (undo-tree-id1180 . -6) (undo-tree-id1181 . -6) 597) nil (26368 26523 486665 207000) 0 nil])
([nil nil ((603 . 611)) nil (26368 26523 486663 193000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -607) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (#("r" 0 1 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -608) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (#("n" 0 1 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -609) (undo-tree-id1176 . -1) (#("t" 0 1 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -610) (undo-tree-id1177 . -1) 611) nil (26368 26523 486662 211000) 0 nil])
([nil nil ((607 . 608)) nil (26368 26523 486656 280000) 0 nil])
([nil nil ((608 . 610)) nil (26368 26523 486655 809000) 0 nil])
([nil nil ((604 . 620) (#("cur" 0 3 (fontified nil)) . -604) (604 . 607) (#("current_position" 0 16 (fontified nil)) . -604) (604 . 620) (#("curren" 0 6 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -604) (undo-tree-id1164 . -6) (undo-tree-id1165 . -6) (undo-tree-id1166 . -6) (undo-tree-id1167 . -6) 610) nil (26368 26523 486654 847000) 0 nil])
([nil nil ((620 . 630)) nil (26368 26523 486652 613000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -629) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) 630) nil (26368 26523 486651 771000) 0 nil])
([nil nil ((#("s" 0 1 (face py-variable-name-face fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -650) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (#("t" 0 1 (face py-variable-name-face fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -651) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (#("a" 0 1 (face py-variable-name-face fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -652) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (#("t" 0 1 (face py-variable-name-face fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -653) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (#("e" 0 1 (face py-variable-name-face fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -654) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (#("P" 0 1 (face py-variable-name-face fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -655) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (#("r" 0 1 (face py-variable-name-face fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -656) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (#("o" 0 1 (face py-variable-name-face fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -657) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (#("b" 0 1 (face py-variable-name-face fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -658) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (#("a" 0 1 (face py-variable-name-face fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -659) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (#("b" 0 1 (face py-variable-name-face fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -660) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (#("i" 0 1 (face py-variable-name-face fontified nil match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -661) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (#("l" 0 1 (face py-variable-name-face fontified nil match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -662) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (#("i" 0 1 (face py-variable-name-face fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -663) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (#("t" 0 1 (face py-variable-name-face fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -664) (undo-tree-id1158 . -1) (#("y" 0 1 (face py-variable-name-face fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -665) (undo-tree-id1159 . -1) 666) nil (26368 26523 486644 247000) 0 nil])
([nil nil ((650 . 651)) nil (26368 26524 760551 873000) 0 nil])
([nil nil ((#("next_state" 0 10 (face py-variable-name-face fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . 573)) nil (26368 26571 570913 207000) 0 nil] [nil nil ((651 . 652)) ((#("
" 0 1 (fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . 651) (undo-tree-id1201 . 1)) (26368 26523 486208 364000) 0 nil])
([nil nil ((573 . 576)) nil (26368 26571 570912 305000) 0 nil])
nil
([nil nil ((#("e" 0 1 (face py-variable-name-face fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -574) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (#("x" 0 1 (face py-variable-name-face fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -575) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) 576) nil (26368 26571 570910 973000) 0 nil])
([nil nil ((662 . 682)) nil (26368 26571 570903 458000) 0 nil])
([nil nil ((573 . 574)) nil (26368 26571 570902 296000) 0 nil])
([nil nil ((574 . 578) 594) nil (26368 26571 570901 455000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . 574) 598) nil (26368 26571 570900 52000) 0 nil])
([nil nil ((574 . 594)) nil (26368 26571 570898 930000) 0 nil])
([nil nil ((573 . 574)) nil (26368 26571 570898 239000) 0 nil])
([nil nil ((574 . 575)) nil (26368 26571 570897 517000) 0 nil])
([nil nil ((575 . 576)) nil (26368 26571 570896 736000) 0 nil])
([nil nil ((#("  " 0 2 (face font-lock-comment-face fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . 574) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -2) 576) nil (26368 26571 570895 604000) 0 nil])
([nil nil ((574 . 595)) nil (26368 26571 570882 369000) 0 nil])
([nil nil ((595 . 596)) nil (26368 26571 570881 657000) 0 nil])
([nil nil ((596 . 613)) nil (26368 26571 570876 337000) 0 nil])
([nil nil ((511 . 527) (t 26368 26571 573359 740000)) nil (26368 26693 738851 714000) 0 nil])
([nil nil ((527 . 528)) nil (26368 26693 738851 313000) 0 nil])
([nil nil ((527 . 548)) nil (26368 26693 738851 33000) 0 nil])
([nil nil ((781 . 790)) nil (26368 26693 738850 752000) 0 nil])
([nil nil ((#("v" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -789) (undo-tree-id1238 . -1) 790) nil (26368 26693 738850 382000) 0 nil])
([nil nil ((789 . 804)) nil (26368 26693 738849 831000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -803) (undo-tree-id1237 . -1) 804) nil (26368 26693 738849 189000) 0 nil])
([nil nil ((803 . 804)) nil (26368 26693 738848 157000) 0 nil])
([nil nil ((804 . 806)) nil (26368 26693 738847 396000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -805) (undo-tree-id1236 . -1) 806) nil (26368 26693 738846 444000) 0 nil])
([nil nil ((673 . 675)) nil (26368 26693 738845 82000) 0 nil])
([nil nil ((894 . 919)) nil (26368 26693 738844 340000) 0 nil])
([nil nil ((895 . 915) (#("                        " 0 24 (fontified t match-data (0 3 0 1 1 2 2 3))) . 895) (undo-tree-id1235 . -24) 919) nil (26368 26693 738843 308000) 0 nil])
([nil nil ((895 . 911) (#("                    " 0 20 (fontified t match-data (0 3 0 1 1 2 2 3))) . 895) (undo-tree-id1234 . -20) 915) nil (26368 26693 738841 876000) 0 nil])
([nil nil ((895 . 907) (#("                " 0 16 (fontified t match-data (0 3 0 1 1 2 2 3))) . 895) (undo-tree-id1233 . -16) 911) nil (26368 26693 738840 313000) 0 nil])
([nil nil ((895 . 903) (#("            " 0 12 (fontified t match-data (0 3 0 1 1 2 2 3))) . 895) (undo-tree-id1232 . -12) 907) nil (26368 26693 738838 920000) 0 nil])
([nil nil ((903 . 907)) nil (26368 26693 738837 16000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . 906) (undo-tree-id1231 . -1) 907) nil (26368 26693 738835 794000) 0 nil])
([nil nil ((906 . 911)) nil (26368 26693 738832 518000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -910) (undo-tree-id1230 . -1) 911) nil (26368 26693 738831 576000) 0 nil])
([nil nil ((910 . 921)) nil (26368 26693 738830 203000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -918) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (#("n" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -919) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (#("x" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -920) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) 921) nil (26368 26693 738828 971000) 0 nil])
([nil nil ((918 . 920)) nil (26368 26693 738821 527000) 0 nil])
([nil nil ((920 . 929)) nil (26368 26693 738820 655000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . 928) (undo-tree-id1217 . -1) 929) nil (26368 26693 738819 593000) 0 nil])
([nil nil ((928 . 949)) nil (26368 26693 738808 513000) 0 nil])
([nil nil ((949 . 962)) nil (26368 26693 738801 279000) 0 nil])
([nil nil ((807 . 809) (t 26368 26693 740747 851000)) nil (26368 29461 585545 613000) 0 nil])
([nil nil ((809 . 830)) nil (26368 29461 585540 423000) 0 nil])
([nil nil ((1102 . 1111) (t 26368 29461 589212 369000)) nil (26368 32239 285051 741000) 0 nil])
([nil nil ((1111 . 1114)) nil (26368 32239 285051 510000) 0 nil])
([nil nil ((#("        ..." 0 11 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . 1103) (undo-tree-id1244 . -9) (undo-tree-id1245 . -9) (undo-tree-id1246 . -9) (undo-tree-id1247 . -9)) nil (26368 32239 285051 210000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1103)) nil (26368 32239 285049 386000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . 1091)) nil (26368 32239 285049 116000) 0 nil])
([nil nil ((#("       ..." 0 10 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . 1091) (undo-tree-id1243 . -10)) nil (26368 32239 285048 825000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . 1091) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1)) nil (26368 32239 285047 493000) 0 nil])
([nil nil ((1091 . 1099)) nil (26368 32239 285036 772000) 0 nil])
([nil nil ((1099 . 1102)) nil (26368 32239 285035 751000) 0 nil])
([nil nil ((1102 . 1103)) nil (26368 32239 285031 853000) 0 nil])
([nil nil ((1102 . 1103) (t 26368 32239 286774 401000)) nil (26368 34577 409566 374000) 0 nil])
([nil nil ((#("?" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -807) (undo-tree-id1249 . -1) 808 (t 26368 34577 739905 517000)) nil (26369 3090 572041 271000) 0 nil])
([nil nil ((807 . 815)) nil (26369 3090 572040 18000) 0 nil])
([nil nil ((815 . 820)) nil (26369 3090 572039 768000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -818) (undo-tree-id1248 . -1) 819) nil (26369 3090 572039 237000) 0 nil])
([nil nil ((818 . 819)) nil (26369 3090 572030 560000) 0 nil])
([nil nil ((809 . 810)) nil (26369 3090 572026 242000) 0 nil])
([nil nil ((#("R" 0 1 (face py-variable-name-face fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -674) (undo-tree-id1252 . -1) 675 (t 26369 3090 574796 689000)) nil (26369 3107 688632 949000) 0 nil])
([nil nil ((674 . 675)) nil (26369 3107 688631 726000) 0 nil])
([nil nil ((#("R" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -807) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) 808) nil (26369 3107 688630 945000) 0 nil])
([nil nil ((807 . 808)) nil (26369 3107 688617 850000) 0 nil])
([nil nil ((822 . 823) (t 26369 3107 691115 22000)) nil (26369 3302 615008 177000) 0 nil])
([nil nil ((675 . 677)) nil (26369 3302 615007 676000) 0 nil])
([nil nil ((#("a" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -969) (undo-tree-id1271 . -1) (#("n" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -970) (undo-tree-id1272 . -1) (#("d" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -971) (undo-tree-id1273 . -1) (#(" " 0 1 (fontified nil)) . 972) (972 . 973) (#(" " 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . 972) (undo-tree-id1274 . -1) 973) nil (26369 3302 615006 604000) 0 nil])
([nil nil ((994 . 1009)) nil (26369 3302 615003 558000) 0 nil])
([nil nil ((1009 . 1029)) nil (26369 3302 615003 428000) 0 nil])
([nil nil ((823 . 824)) nil (26369 3302 615003 298000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -823) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) 824) nil (26369 3302 615002 877000) 0 nil])
([nil nil ((823 . 840)) nil (26369 3302 615001 254000) 0 nil])
([nil nil ((677 . 679)) nil (26369 3302 615001 113000) 0 nil])
([nil nil ((679 . 681)) nil (26369 3302 615000 983000) 0 nil])
([nil nil ((#("," 0 1 (fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -678) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (#("C" 0 1 (face py-variable-name-face fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -679) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (#("y" 0 1 (face py-variable-name-face fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -680) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) 681) nil (26369 3302 615000 272000) 0 nil])
([nil nil ((950 . 954)) nil (26369 3302 614993 519000) 0 nil])
([nil nil ((954 . 975)) nil (26369 3302 614993 248000) 0 nil])
([nil nil ((#("]" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t match-data (0 3 0 1 1 2 2 3))) . -974) (undo-tree-id1253 . -1) 975) nil (26369 3302 614992 737000) 0 nil])
([nil nil ((974 . 980)) nil (26369 3302 614981 556000) 0 nil])
([nil nil ((#("," 0 1 (fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -675) (undo-tree-id1289 . -1) (#("C" 0 1 (face py-variable-name-face fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -676) (undo-tree-id1290 . -1) (#("x" 0 1 (face py-variable-name-face fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -677) (undo-tree-id1291 . -1) 678 (t 26369 3302 618346 838000)) nil (26369 3341 947801 67000) 0 nil])
([nil nil ((#("the coordinate for that state" 0 29 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1045) (undo-tree-id1287 . -28) (undo-tree-id1288 . -29) 1074) nil (26369 3341 947799 705000) 0 nil])
([nil nil ((#("a" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1041) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (#("n" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1042) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (#("d" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1043) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (#(" " 0 1 (fontified nil)) . 1044) (1044 . 1045) (#(" " 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . 1044) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) 1045) nil (26369 3341 947798 91000) 0 nil])
([nil nil ((#(" " 0 1 (fontified nil)) . 1040) (1040 . 1041) (#(" " 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . 1040) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) 1041) nil (26369 3341 947792 952000) 0 nil])
([nil nil ((#("," 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1039) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) 1040) nil (26369 3341 947791 48000) 0 nil])
([nil nil ((1039 . 1040)) nil (26369 3341 947782 562000) 0 nil])
([nil nil ((1014 . 1018)) nil (26369 3341 947782 281000) 0 nil])
([nil nil ((1012 . 1033)) nil (26369 3341 947781 510000) 0 nil])
([nil nil ((1033 . 1036)) nil (26369 3341 947777 823000) 0 nil])
([nil nil ((838 . 849) (t 26369 3341 950077 688000)) nil (26369 3356 755783 27000) 0 nil])
([nil nil ((#("T" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -968) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (#("u" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -969) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (#("p" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -970) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (#("l" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -971) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (#("e" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -972) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (#("[" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t match-data (0 3 0 1 1 2 2 3))) . -973) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) (#("i" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -974) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t match-data (0 3 0 1 1 2 2 3))) . -975) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (#("t" 0 1 (face py-builtins-face fontified t match-data (0 3 0 1 1 2 2 3))) . -976) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (#("," 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -977) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (#("i" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -978) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t match-data (0 3 0 1 1 2 2 3))) . -979) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (#("t" 0 1 (face py-builtins-face fontified t match-data (0 3 0 1 1 2 2 3))) . -980) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t match-data (0 3 0 1 1 2 2 3))) . -981) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (#("," 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -982) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) 983 (t 26369 3356 758784 987000)) nil (26369 3387 56354 775000) 0 nil])
([nil nil ((968 . 972)) nil (26369 3387 56339 405000) 0 nil])
([nil nil ((#("T" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -962) (undo-tree-id1294 . -1) 963) nil (26369 3387 56338 744000) 0 nil])
([nil nil ((962 . 963)) nil (26369 3387 56337 331000) 0 nil])
([nil nil ((962 . 965)) nil (26369 3387 56336 980000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -964) (undo-tree-id1293 . -1) 965) nil (26369 3387 56336 359000) 0 nil])
([nil nil ((964 . 968)) nil (26369 3387 56334 866000) 0 nil])
([nil nil ((#("," 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -967) (undo-tree-id1292 . -1) 968) nil (26369 3387 56334 215000) 0 nil])
([nil nil ((967 . 968)) nil (26369 3387 56325 759000) 0 nil])
([nil nil ((983 . 984)) nil (26369 3387 56324 917000) 0 nil])
([nil nil ((984 . 989)) nil (26369 3387 56320 8000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -985) (undo-tree-id1471 . -1) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t match-data (0 3 0 1 1 2 2 3))) . -986) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (#("t" 0 1 (face py-builtins-face fontified t match-data (0 3 0 1 1 2 2 3))) . -987) (undo-tree-id1479 . -1) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t match-data (0 3 0 1 1 2 2 3))) . -988) (undo-tree-id1483 . -1) 989 (t 26369 3387 60292 704000)) nil (26369 3538 975563 374000) 0 nil])
([nil nil ((#("," 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -983) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (#(" " 0 1 (fontified nil)) . 984) (984 . 985) (#(" " 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . 984) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) 985) nil (26369 3538 975547 885000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -962) (undo-tree-id1455 . -1) (#("u" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -963) (undo-tree-id1456 . -1) (#("p" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -964) (undo-tree-id1457 . -1) (#("l" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -965) (undo-tree-id1458 . -1) (#("e" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -966) (undo-tree-id1459 . -1) (#("[" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t match-data (0 3 0 1 1 2 2 3))) . -967) (undo-tree-id1460 . -1) 968) nil (26369 3538 975543 798000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1062) (undo-tree-id1450 . -1) (#("t" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1063) (undo-tree-id1451 . -1) (#("a" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1064) (undo-tree-id1452 . -1) (#("t" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1065) (undo-tree-id1453 . -1) (#("e" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1066) (undo-tree-id1454 . -1) 1067) nil (26369 3538 975541 223000) 0 nil])
([nil nil ((#("t" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1057) (undo-tree-id1445 . -1) (#("h" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1058) (undo-tree-id1446 . -1) (#("a" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1059) (undo-tree-id1447 . -1) (#("t" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1060) (undo-tree-id1448 . -1) (#(" " 0 1 (fontified nil)) . 1061) (1061 . 1062) (#(" " 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . 1061) (undo-tree-id1449 . -1) 1062) nil (26369 3538 975538 838000) 0 nil])
([nil nil ((#("f" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1053) (undo-tree-id1441 . -1) (#("o" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1054) (undo-tree-id1442 . -1) (#("r" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1055) (undo-tree-id1443 . -1) (#(" " 0 1 (fontified nil)) . 1056) (1056 . 1057) (#(" " 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . 1056) (undo-tree-id1444 . -1) 1057) nil (26369 3538 975536 133000) 0 nil])
([nil nil ((#("r" 0 1 (face font-lock-string-face fontified nil match-data (0 3 0 1 1 2 2 3))) . -1046) (undo-tree-id1434 . -1) (#("e" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1047) (undo-tree-id1435 . -1) (#("w" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1048) (undo-tree-id1436 . -1) (#("a" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1049) (undo-tree-id1437 . -1) (#("r" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1050) (undo-tree-id1438 . -1) (#("d" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1051) (undo-tree-id1439 . -1) (#(" " 0 1 (fontified nil)) . 1052) (1052 . 1053) (#(" " 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . 1052) (undo-tree-id1440 . -1) 1053) nil (26369 3538 975531 996000) 0 nil])
([nil nil ((#("t" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1042) (undo-tree-id1430 . -1) (#("h" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1043) (undo-tree-id1431 . -1) (#("e" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1044) (undo-tree-id1432 . -1) (#(" " 0 1 (fontified nil)) . 1045) (1045 . 1046) (#(" " 0 1 (face font-lock-string-face fontified nil match-data (0 3 0 1 1 2 2 3))) . 1045) (undo-tree-id1433 . -1) 1046) nil (26369 3538 975529 200000) 0 nil])
([nil nil ((#("n" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1039) (undo-tree-id1427 . -1) (#("d" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1040) (undo-tree-id1428 . -1) (#(" " 0 1 (fontified nil)) . 1041) (1041 . 1042) (#(" " 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . 1041) (undo-tree-id1429 . -1) 1042) nil (26369 3538 975527 197000) 0 nil])
([nil nil ((#("a" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1038) (undo-tree-id1426 . -1) 1039) nil (26369 3538 975525 924000) 0 nil])
([nil nil ((#("," 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1036) (undo-tree-id1424 . -1) (#(" " 0 1 (fontified nil)) . 1037) (1037 . 1038) (#(" " 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . 1037) (undo-tree-id1425 . -1) 1038) nil (26369 3538 975525 203000) 0 nil])
([nil nil ((1036 . 1057)) nil (26369 3538 975524 401000) 0 nil])
([nil nil ((1057 . 1073)) nil (26369 3538 975524 181000) 0 nil])
([nil nil ((1090 . 1099)) nil (26369 3538 975523 930000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t match-data (0 3 0 1 1 2 2 3))) . 1095) (undo-tree-id1423 . -4) 1099) nil (26369 3538 975523 740000) 0 nil])
([nil nil ((1095 . 1108)) nil (26369 3538 975523 179000) 0 nil])
([nil nil ((1108 . 1123)) nil (26369 3538 975522 888000) 0 nil])
([nil nil ((1123 . 1124)) nil (26369 3538 975522 628000) 0 nil])
([nil nil ((1124 . 1131)) nil (26369 3538 975522 498000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1127) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (#("p" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1128) (undo-tree-id1420 . -1) (#("l" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1129) (undo-tree-id1421 . -1) (#("e" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1130) (undo-tree-id1422 . -1) 1131) nil (26369 3538 975521 887000) 0 nil])
([nil nil ((1127 . 1133)) nil (26369 3538 975518 500000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1130) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (#("i" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1131) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1132) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) 1133) nil (26369 3538 975517 879000) 0 nil])
([nil nil ((1130 . 1134)) nil (26369 3538 975513 811000) 0 nil])
([nil nil ((1134 . 1140)) nil (26369 3538 975513 521000) 0 nil])
([nil nil ((1140 . 1141)) nil (26369 3538 975513 270000) 0 nil])
([nil nil ((1141 . 1150)) nil (26369 3538 975513 30000) 0 nil])
([nil nil ((1150 . 1171)) nil (26369 3538 975512 790000) 0 nil])
([nil nil ((1171 . 1178)) nil (26369 3538 975512 539000) 0 nil])
([nil nil ((1178 . 1197)) nil (26369 3538 975512 228000) 0 nil])
([nil nil ((1197 . 1206)) nil (26369 3538 975511 978000) 0 nil])
([nil nil ((1206 . 1223)) nil (26369 3538 975511 718000) 0 nil])
([nil nil ((1223 . 1226)) nil (26369 3538 975511 437000) 0 nil])
([nil nil ((#("w" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1224) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (undo-tree-id1398 . -1) (#("e" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1225) (undo-tree-id1399 . -1) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (undo-tree-id1402 . -1) 1226) nil (26369 3538 975510 986000) 0 nil])
([nil nil ((1224 . 1228)) nil (26369 3538 975508 141000) 0 nil])
([nil nil ((1198 . 1199)) nil (26369 3538 975507 890000) 0 nil])
([nil nil ((1198 . 1206)) nil (26369 3538 975507 600000) 0 nil])
([nil nil ((1206 . 1209)) nil (26369 3538 975507 349000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . 1208) (undo-tree-id1394 . -1) 1209) nil (26369 3538 975506 949000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1206) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (#("f" 0 1 (face font-lock-keyword-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1207) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) 1208) nil (26369 3538 975505 917000) 0 nil])
([nil nil ((1206 . 1213)) nil (26369 3538 975502 891000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . 1212) (undo-tree-id1385 . -1) 1213) nil (26369 3538 975502 520000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1206) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (#("n" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1207) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (#("l" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1208) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (#("e" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1209) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (#("s" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1210) (undo-tree-id1383 . -1) (#("s" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1211) (undo-tree-id1384 . -1) 1212) nil (26369 3538 975501 48000) 0 nil])
([nil nil ((1206 . 1217)) nil (26369 3538 975494 285000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1213) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (#("e" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1214) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (#("w" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1215) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (#("a" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1216) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) 1217) nil (26369 3538 975493 163000) 0 nil])
([nil nil ((1213 . 1223)) nil (26369 3538 975487 913000) 0 nil])
([nil nil ((1223 . 1234) (#("rewards_set" 0 11 (fontified nil)) . -1223) (1223 . 1234)) nil (26369 3538 975487 482000) 0 nil])
([nil nil ((1234 . 1235)) nil (26369 3538 975487 161000) 0 nil])
([nil nil ((1235 . 1248)) nil (26369 3538 975486 921000) 0 nil])
([nil nil ((1248 . 1259)) nil (26369 3538 975486 681000) 0 nil])
([nil nil ((1254 . 1264) (#("Val" 0 3 (fontified nil)) . -1254) (1254 . 1257) (#("ValueError" 0 10 (fontified nil)) . -1254) (1254 . 1264) (#("Value" 0 5 (fontified t match-data (0 0))) . -1254) (undo-tree-id1347 . -5) (undo-tree-id1348 . -5) (undo-tree-id1349 . -5) (undo-tree-id1350 . -5) 1259) nil (26369 3538 975485 959000) 0 nil])
([nil nil ((1264 . 1266)) nil (26369 3538 975484 26000) 0 nil])
([nil nil ((1266 . 1287)) nil (26369 3538 975483 775000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-string-face fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . 1286) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) 1287) nil (26369 3538 975483 394000) 0 nil])
([nil nil ((#("y" 0 1 (face font-lock-string-face fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -1283) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (#("e" 0 1 (face font-lock-string-face fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -1284) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (#("t" 0 1 (face font-lock-string-face fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -1285) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) 1286) nil (26369 3538 975482 12000) 0 nil])
([nil nil ((1283 . 1304)) nil (26369 3538 975479 738000) 0 nil])
([nil nil ((1304 . 1316)) nil (26369 3538 975479 607000) 0 nil])
([nil nil ((1316 . 1329)) nil (26369 3538 975479 367000) 0 nil])
([nil nil ((1329 . 1330)) nil (26369 3538 975479 66000) 0 nil])
([nil nil ((#("w" 0 1 (fontified t match-data (0 0))) . -1252) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) 1253) nil (26369 3538 975478 625000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t match-data (0 0))) . -1248) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (#("h" 0 1 (fontified t match-data (0 0))) . -1249) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (#("r" 0 1 (fontified t match-data (0 0))) . -1250) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (#("o" 0 1 (fontified t match-data (0 0))) . -1251) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) 1252) nil (26369 3538 975476 532000) 0 nil])
([nil nil ((1248 . 1253)) nil (26369 3538 975470 701000) 0 nil])
([nil nil ((1248 . 1253) (#("rai" 0 3 (fontified nil)) . -1248) (1248 . 1251) (#("raise" 0 5 (face font-lock-keyword-face fontified t match-data (0 0))) . -1248) (undo-tree-id1325 . -5) (undo-tree-id1326 . -5) (undo-tree-id1327 . -5) (undo-tree-id1328 . -5) 1253) nil (26369 3538 975469 889000) 0 nil])
([nil nil ((1361 . 1382)) nil (26369 3538 975460 471000) 0 nil])
([nil nil ((1382 . 1388)) nil (26369 3538 975456 354000) 0 nil])
([nil nil ((#("," 0 1 (fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -673) (undo-tree-id1508 . -1) (#("R" 0 1 (face py-variable-name-face fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -674) (undo-tree-id1509 . -1) 675 (t 26369 3538 978667 87000)) nil (26369 3558 959595 716000) 0 nil])
([nil nil ((719 . 740)) nil (26369 3558 959593 743000) 0 nil])
([nil nil ((740 . 758)) nil (26369 3558 959593 442000) 0 nil])
([nil nil ((758 . 765)) nil (26369 3558 959592 771000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -764) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (undo-tree-id1507 . -1) 765) nil (26369 3558 959591 398000) 0 nil])
([nil nil ((764 . 769)) nil (26369 3558 959567 153000) 0 nil])
([nil nil ((#("," 0 1 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -763) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) 764 (t 26369 3558 963720 868000)) nil (26369 3571 150610 890000) 0 nil])
([nil nil ((763 . 764)) nil (26369 3571 150601 593000) 0 nil])
([nil nil ((759 . 760)) nil (26369 3571 150600 791000) 0 nil])
([nil nil ((769 . 770)) nil (26369 3571 150596 133000) 0 nil])
([nil nil ((377 . 385) (#("        " 0 8 (fontified nil match-data (0 3 0 1 1 2 2 3))) . 376) (undo-tree-id1525 . -8) (375 . 385) (t 26369 3571 153812 853000)) nil (26369 3640 511460 758000) 0 nil])
([nil nil ((385 . 406)) nil (26369 3640 511459 786000) 0 nil])
([nil nil ((406 . 416)) nil (26369 3640 511459 636000) 0 nil])
([nil nil ((#("." 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -415) (undo-tree-id1524 . -1) 416) nil (26369 3640 511459 185000) 0 nil])
([nil nil ((415 . 416)) nil (26369 3640 511458 143000) 0 nil])
([nil nil ((416 . 429)) nil (26369 3640 511457 852000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -417) (undo-tree-id1512 . -1) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (undo-tree-id1519 . -1) (undo-tree-id1520 . -1) (undo-tree-id1521 . -1) (undo-tree-id1522 . -1) (undo-tree-id1523 . -1) 418) nil (26369 3640 511457 51000) 0 nil])
([nil nil ((417 . 418)) nil (26369 3640 511439 397000) 0 nil])
([nil nil ((1 . 2) (t 26369 3640 513996 178000)) nil (26369 3648 168938 160000) 0 nil])
([nil nil ((1 . 19)) nil (26369 3648 168934 603000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . 395) (t 26369 3648 172181 312000)) nil (26369 3656 852161 640000) 0 nil])
([nil nil ((974 . 994) (#("                    " 0 20 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . 974) (t 26369 3656 855401 620000)) nil (26369 3715 657859 791000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . 990) (undo-tree-id1571 . -4) 994) nil (26369 3715 657859 330000) 0 nil])
([nil nil ((974 . 994) (#("                " 0 16 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . 974) (undo-tree-id1570 . -16) 990) nil (26369 3715 657858 568000) 0 nil])
([nil nil ((994 . 999)) nil (26369 3715 657857 536000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -997) (undo-tree-id1562 . -1) (undo-tree-id1563 . -1) (undo-tree-id1564 . -1) (undo-tree-id1565 . -1) (#("l" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -998) (undo-tree-id1566 . -1) (undo-tree-id1567 . -1) (undo-tree-id1568 . -1) (undo-tree-id1569 . -1) 999) nil (26369 3715 657856 895000) 0 nil])
([nil nil ((997 . 999)) nil (26369 3715 657850 764000) 0 nil])
([nil nil ((994 . 1011) (#("tot" 0 3 (fontified nil)) . -994) (994 . 997) (#("total_state_value" 0 17 (fontified nil)) . -994) (994 . 1011) (#("total" 0 5 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -994) (undo-tree-id1558 . -5) (undo-tree-id1559 . -5) (undo-tree-id1560 . -5) (undo-tree-id1561 . -5) 999) nil (26369 3715 657849 261000) 0 nil])
([nil nil ((1011 . 1018)) nil (26369 3715 657846 786000) 0 nil])
([nil nil ((1018 . 1026)) nil (26369 3715 657846 405000) 0 nil])
([nil nil ((1015 . 1033) (#("sta" 0 3 (fontified nil)) . -1015) (1015 . 1018) (#("state_action_value" 0 18 (fontified nil)) . -1015) (1015 . 1033) (#("state_actio" 0 11 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -1015) (undo-tree-id1554 . -11) (undo-tree-id1555 . -11) (undo-tree-id1556 . -11) (undo-tree-id1557 . -11) 1026) nil (26369 3715 657845 133000) 0 nil])
([nil nil ((1033 . 1054)) nil (26369 3715 657842 868000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t match-data (0 11 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10 11))) . 1050) (undo-tree-id1553 . -4) 1054) nil (26369 3715 657841 987000) 0 nil])
([nil nil ((1050 . 1060)) nil (26369 3715 657841 356000) 0 nil])
([nil nil ((1050 . 1066) (#("new" 0 3 (fontified nil)) . -1050) (1050 . 1053) (#("new_state_values" 0 16 (fontified nil)) . -1050) (1050 . 1066) (#("new_values" 0 10 (fontified t match-data (0 11 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10 11))) . -1050) (undo-tree-id1549 . -10) (undo-tree-id1550 . -10) (undo-tree-id1551 . -10) (undo-tree-id1552 . -10) 1060) nil (26369 3715 657840 594000) 0 nil])
([nil nil ((1066 . 1067)) nil (26369 3715 657838 330000) 0 nil])
([nil nil ((1067 . 1071)) nil (26369 3715 657837 959000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t match-data (0 16 0 1 1 2 2 3 3 4 10 11 11 12 12 13 13 14 14 15 15 16))) . -1069) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (undo-tree-id1546 . -1) (undo-tree-id1547 . -1) (#("j" 0 1 (fontified t match-data (0 16 0 1 1 2 2 3 3 4 10 11 11 12 12 13 13 14 14 15 15 16))) . -1070) (undo-tree-id1548 . -1) 1071) nil (26369 3715 657837 188000) 0 nil])
([nil nil ((1069 . 1077)) nil (26369 3715 657834 232000) 0 nil])
([nil nil ((1072 . 1089) (#("tot" 0 3 (fontified nil)) . -1072) (1072 . 1075) (#("total_state_value" 0 17 (fontified nil)) . -1072) (1072 . 1089) (#("total" 0 5 (fontified t match-data (0 16 0 1 1 2 2 3 3 4 10 11 11 12 12 13 13 14 14 15 15 16))) . -1072) (undo-tree-id1526 . -5) (undo-tree-id1527 . -5) (undo-tree-id1528 . -5) (undo-tree-id1529 . -5) (undo-tree-id1530 . -5) (undo-tree-id1531 . -5) (undo-tree-id1532 . -5) (undo-tree-id1533 . -5) (undo-tree-id1534 . -5) (undo-tree-id1535 . -5) (undo-tree-id1536 . -5) (undo-tree-id1537 . -5) (undo-tree-id1538 . -5) (undo-tree-id1539 . -5) (undo-tree-id1540 . -5) (undo-tree-id1541 . -5) (undo-tree-id1542 . -5) (undo-tree-id1543 . -5) 1077) nil (26369 3715 657829 713000) 0 nil])
([nil nil ((1089 . 1106) (t 26369 3715 661133 743000)) nil (26369 3733 891756 770000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . 1102) (undo-tree-id1694 . -4) 1106) nil (26369 3733 891756 320000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . 1098) (undo-tree-id1693 . -4) 1102) nil (26369 3733 891755 578000) 0 nil])
([nil nil ((1098 . 1117)) nil (26369 3733 891754 135000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . 1116) (undo-tree-id1692 . -1) 1117) nil (26369 3733 891753 765000) 0 nil])
([nil nil ((#("=" 0 1 (face font-lock-operator-face fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -1115) (undo-tree-id1691 . -1) 1116) nil (26369 3733 891753 133000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . 1114) (undo-tree-id1690 . -1) 1115) nil (26369 3733 891752 522000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -1103) (undo-tree-id1667 . -1) (undo-tree-id1668 . -1) (undo-tree-id1669 . -1) (undo-tree-id1670 . -1) (#("r" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -1104) (undo-tree-id1671 . -1) (undo-tree-id1672 . -1) (undo-tree-id1673 . -1) (undo-tree-id1674 . -1) (#("i" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -1105) (undo-tree-id1675 . -1) (undo-tree-id1676 . -1) (undo-tree-id1677 . -1) (undo-tree-id1678 . -1) (#("d" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -1106) (undo-tree-id1679 . -1) (undo-tree-id1680 . -1) (undo-tree-id1681 . -1) (undo-tree-id1682 . -1) (#("." 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -1107) (undo-tree-id1683 . -1) (#("s" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -1108) (undo-tree-id1684 . -1) (#("t" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -1109) (undo-tree-id1685 . -1) (#("a" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -1110) (undo-tree-id1686 . -1) (#("t" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -1111) (undo-tree-id1687 . -1) (#("e" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -1112) (undo-tree-id1688 . -1) (#("s" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -1113) (undo-tree-id1689 . -1) 1114) nil (26369 3733 891750 418000) 0 nil])
([nil nil ((1103 . 1114)) nil (26369 3733 891743 194000) 0 nil])
([nil nil ((1114 . 1121)) nil (26369 3733 891742 563000) 0 nil])
([nil nil ((1117 . 1133) (#("new" 0 3 (fontified nil)) . -1117) (1117 . 1120) (#("new_state_values" 0 16 (fontified nil)) . -1117) (1117 . 1133) (#("new_" 0 4 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -1117) (undo-tree-id1572 . -4) (undo-tree-id1573 . -4) (undo-tree-id1574 . -2) (undo-tree-id1575 . -2) (undo-tree-id1576 . -2) (undo-tree-id1577 . -2) (undo-tree-id1578 . -2) (undo-tree-id1579 . -2) (undo-tree-id1580 . -2) (undo-tree-id1581 . -2) (undo-tree-id1582 . -2) (undo-tree-id1583 . -2) (undo-tree-id1584 . -2) (undo-tree-id1585 . -2) (undo-tree-id1586 . -2) (undo-tree-id1587 . -3) (undo-tree-id1588 . -3) (undo-tree-id1589 . -3) (undo-tree-id1590 . -3) (undo-tree-id1591 . -3) (undo-tree-id1592 . -3) (undo-tree-id1593 . -3) (undo-tree-id1594 . -3) (undo-tree-id1595 . -3) (undo-tree-id1596 . -3) (undo-tree-id1597 . -3) (undo-tree-id1598 . -3) (undo-tree-id1599 . -3) (undo-tree-id1600 . -3) (undo-tree-id1601 . -3) (undo-tree-id1602 . -3) (undo-tree-id1603 . -3) (undo-tree-id1604 . -3) (undo-tree-id1605 . -3) (undo-tree-id1606 . -3) (undo-tree-id1607 . -3) (undo-tree-id1608 . -3) (undo-tree-id1609 . -3) (undo-tree-id1610 . -3) (undo-tree-id1611 . -3) (undo-tree-id1612 . -3) (undo-tree-id1613 . -3) (undo-tree-id1614 . -3) (undo-tree-id1615 . -3) (undo-tree-id1616 . -3) (undo-tree-id1617 . -3) (undo-tree-id1618 . -3) (undo-tree-id1619 . -3) (undo-tree-id1620 . -3) (undo-tree-id1621 . -3) (undo-tree-id1622 . -3) (undo-tree-id1623 . -3) (undo-tree-id1624 . -3) (undo-tree-id1625 . -3) (undo-tree-id1626 . -4) (undo-tree-id1627 . -4) (undo-tree-id1628 . -4) (undo-tree-id1629 . -4) (undo-tree-id1630 . -4) (undo-tree-id1631 . -4) (undo-tree-id1632 . -4) (undo-tree-id1633 . -4) (undo-tree-id1634 . -4) (undo-tree-id1635 . -4) (undo-tree-id1636 . -4) (undo-tree-id1637 . -4) (undo-tree-id1638 . -4) (undo-tree-id1639 . -4) (undo-tree-id1640 . -4) (undo-tree-id1641 . -4) (undo-tree-id1642 . -4) (undo-tree-id1643 . -4) (undo-tree-id1644 . -4) (undo-tree-id1645 . -4) (undo-tree-id1646 . -4) (undo-tree-id1647 . -4) (undo-tree-id1648 . -4) (undo-tree-id1649 . -4) (undo-tree-id1650 . -4) (undo-tree-id1651 . -4) (undo-tree-id1652 . -4) (undo-tree-id1653 . -4) (undo-tree-id1654 . -4) (undo-tree-id1655 . -4) (undo-tree-id1656 . -4) (undo-tree-id1657 . -4) (undo-tree-id1658 . -4) (undo-tree-id1659 . -4) (undo-tree-id1660 . -4) (undo-tree-id1661 . -4) (undo-tree-id1662 . -4) (undo-tree-id1663 . -4) (undo-tree-id1664 . -4) (undo-tree-id1665 . -4) (undo-tree-id1666 . -4) 1121) nil (26369 3733 891738 215000) 0 nil])
([nil nil ((334 . 338) (t 26369 3733 895738 884000)) nil (26369 3752 849941 846000) 0 nil])
([nil nil ((338 . 342)) nil (26369 3752 849937 347000) 0 nil])
([nil nil ((1765 . 1773) (#("        " 0 8 (fontified nil)) . 1764) (undo-tree-id1922 . -8) (1763 . 1773) (t 26369 3752 853394 422000)) nil (26369 3810 296124 678000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . 1769) (undo-tree-id1921 . -4) 1773) nil (26369 3810 296123 897000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1765) (undo-tree-id1920 . -4) 1769) nil (26369 3810 296123 246000) 0 nil])
([nil nil ((1765 . 1766)) nil (26369 3810 296122 735000) 0 nil])
([nil nil ((#("\\" 0 1 (fontified t)) . -1765) (undo-tree-id1919 . -1) 1766) nil (26369 3810 296122 344000) 0 nil])
([nil nil ((1765 . 1781)) nil (26369 3810 296121 793000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -1780) (undo-tree-id1918 . -1) 1781) nil (26369 3810 296121 492000) 0 nil])
([nil nil ((1780 . 1783)) nil (26369 3810 296120 891000) 0 nil])
([nil nil ((#("+" 0 1 (face font-lock-string-face fontified t)) . -1781) (undo-tree-id1916 . -1) (#("+" 0 1 (face font-lock-string-face fontified t)) . -1782) (undo-tree-id1917 . -1) 1783) nil (26369 3810 296120 450000) 0 nil])
([nil nil ((1781 . 1788)) nil (26369 3810 296119 649000) 0 nil])
([nil nil ((#("o" 0 1 (face font-lock-string-face fontified t)) . -1786) (undo-tree-id1914 . -1) (#("n" 0 1 (face font-lock-string-face fontified t)) . -1787) (undo-tree-id1915 . -1) 1788) nil (26369 3810 296119 328000) 0 nil])
([nil nil ((1786 . 1790)) nil (26369 3810 296118 366000) 0 nil])
([nil nil ((1790 . 1791)) nil (26369 3810 296118 116000) 0 nil])
([nil nil ((1791 . 1796)) nil (26369 3810 296117 865000) 0 nil])
([nil nil ((1796 . 1799)) nil (26369 3810 296117 545000) 0 nil])
([nil nil ((#("." 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1355) (undo-tree-id1908 . -1) (undo-tree-id1909 . -1) (#("." 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1356) (undo-tree-id1910 . -1) (undo-tree-id1911 . -1) (#("." 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1357) (undo-tree-id1912 . -1) (undo-tree-id1913 . -1) 1358) nil (26369 3810 296116 723000) 0 nil])
([nil nil ((1355 . 1370)) nil (26369 3810 296113 918000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1359) (undo-tree-id1861 . -1) (undo-tree-id1862 . -1) (undo-tree-id1863 . -1) (undo-tree-id1864 . -1) (undo-tree-id1865 . -1) (#("o" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1360) (undo-tree-id1866 . -1) (undo-tree-id1867 . -1) (undo-tree-id1868 . -1) (undo-tree-id1869 . -1) (undo-tree-id1870 . -1) (#("s" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1361) (undo-tree-id1871 . -1) (undo-tree-id1872 . -1) (undo-tree-id1873 . -1) (undo-tree-id1874 . -1) (undo-tree-id1875 . -1) (#("i" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1362) (undo-tree-id1876 . -1) (undo-tree-id1877 . -1) (undo-tree-id1878 . -1) (undo-tree-id1879 . -1) (undo-tree-id1880 . -1) (#("t" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1363) (undo-tree-id1881 . -1) (undo-tree-id1882 . -1) (undo-tree-id1883 . -1) (undo-tree-id1884 . -1) (undo-tree-id1885 . -1) (#("i" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1364) (undo-tree-id1886 . -1) (undo-tree-id1887 . -1) (undo-tree-id1888 . -1) (undo-tree-id1889 . -1) (undo-tree-id1890 . -1) (#("o" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1365) (undo-tree-id1891 . -1) (undo-tree-id1892 . -1) (undo-tree-id1893 . -1) (undo-tree-id1894 . -1) (undo-tree-id1895 . -1) (#("n" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1366) (undo-tree-id1896 . -1) (undo-tree-id1897 . -1) (undo-tree-id1898 . -1) (undo-tree-id1899 . -1) (undo-tree-id1900 . -1) (#("[" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t match-data (0 3 0 1 1 2 2 3))) . -1367) (undo-tree-id1901 . -1) (undo-tree-id1902 . -1) (undo-tree-id1903 . -1) (undo-tree-id1904 . -1) (undo-tree-id1905 . -1) (#("0" 0 1 (face py-number-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1368) (undo-tree-id1906 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t match-data (0 3 0 1 1 2 2 3))) . -1369) (undo-tree-id1907 . -1) 1370) nil (26369 3810 296111 934000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . 1358) (undo-tree-id1856 . -1) (undo-tree-id1857 . -1) (undo-tree-id1858 . -1) (undo-tree-id1859 . -1) (undo-tree-id1860 . -1) 1359) nil (26369 3810 295912 622000) 0 nil])
([nil nil ((#("=" 0 1 (face font-lock-operator-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1357) (undo-tree-id1851 . -1) (undo-tree-id1852 . -1) (undo-tree-id1853 . -1) (undo-tree-id1854 . -1) (undo-tree-id1855 . -1) 1358) nil (26369 3810 295910 549000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . 1356) (undo-tree-id1846 . -1) (undo-tree-id1847 . -1) (undo-tree-id1848 . -1) (undo-tree-id1849 . -1) (undo-tree-id1850 . -1) 1357) nil (26369 3810 295908 14000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1355) (undo-tree-id1841 . -1) (undo-tree-id1842 . -1) (undo-tree-id1843 . -1) (undo-tree-id1844 . -1) (undo-tree-id1845 . -1) 1356) nil (26369 3810 295906 270000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t match-data (0 3 0 1 1 2 2 3))) . 1351) (undo-tree-id1835 . -4) (undo-tree-id1836 . -4) (undo-tree-id1837 . -4) (undo-tree-id1838 . -4) (undo-tree-id1839 . -4) (undo-tree-id1840 . -4) 1355) nil (26369 3810 295904 216000) 0 nil])
([nil nil ((1347 . 1355) (#("    " 0 4 (fontified t match-data (0 3 0 1 1 2 2 3))) . 1347) (undo-tree-id1829 . -4) (undo-tree-id1830 . -4) (undo-tree-id1831 . -4) (undo-tree-id1832 . -4) (undo-tree-id1833 . -4) (undo-tree-id1834 . -4) 1351) nil (26369 3810 295901 191000) 0 nil])
([nil nil ((1355 . 1375)) nil (26369 3810 295899 197000) 0 nil])
([nil nil ((1370 . 1375) (#("va" 0 2 (fontified nil)) . -1370) (1370 . 1372) (#("value" 0 5 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1370) (undo-tree-id1695 . -5) (undo-tree-id1696 . -5) (undo-tree-id1697 . -1) (undo-tree-id1698 . -1) (undo-tree-id1699 . -1) (undo-tree-id1700 . -1) (undo-tree-id1701 . -1) (undo-tree-id1702 . -1) (undo-tree-id1703 . -1) (undo-tree-id1704 . -1) (undo-tree-id1705 . -1) (undo-tree-id1706 . -1) (undo-tree-id1707 . -1) (undo-tree-id1708 . -1) (undo-tree-id1709 . -1) (undo-tree-id1710 . -1) (undo-tree-id1711 . -1) (undo-tree-id1712 . -1) (undo-tree-id1713 . -1) (undo-tree-id1714 . -1) (undo-tree-id1715 . -1) (undo-tree-id1716 . -1) (undo-tree-id1717 . -1) (undo-tree-id1718 . -1) (undo-tree-id1719 . -1) (undo-tree-id1720 . -1) (undo-tree-id1721 . -1) (undo-tree-id1722 . -1) (undo-tree-id1723 . -1) (undo-tree-id1724 . -1) (undo-tree-id1725 . -1) (undo-tree-id1726 . -1) (undo-tree-id1727 . -1) (undo-tree-id1728 . -1) (undo-tree-id1729 . -1) (undo-tree-id1730 . -1) (undo-tree-id1731 . -2) (undo-tree-id1732 . -2) (undo-tree-id1733 . -2) (undo-tree-id1734 . -2) (undo-tree-id1735 . -2) (undo-tree-id1736 . -2) (undo-tree-id1737 . -2) (undo-tree-id1738 . -2) (undo-tree-id1739 . -2) (undo-tree-id1740 . -2) (undo-tree-id1741 . -2) (undo-tree-id1742 . -2) (undo-tree-id1743 . -2) (undo-tree-id1744 . -2) (undo-tree-id1745 . -2) (undo-tree-id1746 . -2) (undo-tree-id1747 . -2) (undo-tree-id1748 . -2) (undo-tree-id1749 . -2) (undo-tree-id1750 . -2) (undo-tree-id1751 . -2) (undo-tree-id1752 . -2) (undo-tree-id1753 . -2) (undo-tree-id1754 . -2) (undo-tree-id1755 . -2) (undo-tree-id1756 . -2) (undo-tree-id1757 . -2) (undo-tree-id1758 . -2) (undo-tree-id1759 . -2) (undo-tree-id1760 . -3) (undo-tree-id1761 . -3) (undo-tree-id1762 . -3) (undo-tree-id1763 . -3) (undo-tree-id1764 . -3) (undo-tree-id1765 . -3) (undo-tree-id1766 . -3) (undo-tree-id1767 . -3) (undo-tree-id1768 . -3) (undo-tree-id1769 . -3) (undo-tree-id1770 . -3) (undo-tree-id1771 . -3) (undo-tree-id1772 . -3) (undo-tree-id1773 . -3) (undo-tree-id1774 . -3) (undo-tree-id1775 . -3) (undo-tree-id1776 . -3) (undo-tree-id1777 . -3) (undo-tree-id1778 . -3) (undo-tree-id1779 . -3) (undo-tree-id1780 . -3) (undo-tree-id1781 . -3) (undo-tree-id1782 . -4) (undo-tree-id1783 . -4) (undo-tree-id1784 . -4) (undo-tree-id1785 . -4) (undo-tree-id1786 . -4) (undo-tree-id1787 . -4) (undo-tree-id1788 . -4) (undo-tree-id1789 . -4) (undo-tree-id1790 . -4) (undo-tree-id1791 . -4) (undo-tree-id1792 . -4) (undo-tree-id1793 . -4) (undo-tree-id1794 . -4) (undo-tree-id1795 . -4) (undo-tree-id1796 . -4) (undo-tree-id1797 . -4) (undo-tree-id1798 . -4) (undo-tree-id1799 . -5) (undo-tree-id1800 . -5) (undo-tree-id1801 . -5) (undo-tree-id1802 . -5) (undo-tree-id1803 . -5) (undo-tree-id1804 . -5) (undo-tree-id1805 . -5) (undo-tree-id1806 . -5) (undo-tree-id1807 . -5) (undo-tree-id1808 . -5) (undo-tree-id1809 . -5) (undo-tree-id1810 . -5) (undo-tree-id1811 . -5) (undo-tree-id1812 . -5) (undo-tree-id1813 . -5) (undo-tree-id1814 . -5) (undo-tree-id1815 . -5) (undo-tree-id1816 . -5) (undo-tree-id1817 . -5) (undo-tree-id1818 . -5) (undo-tree-id1819 . -5) (undo-tree-id1820 . -5) (undo-tree-id1821 . -5) (undo-tree-id1822 . -5) (undo-tree-id1823 . -5) (undo-tree-id1824 . -5) (undo-tree-id1825 . -5) (undo-tree-id1826 . -5) (undo-tree-id1827 . -5) (undo-tree-id1828 . -5) 1375) nil (26369 3810 295896 752000) 0 nil])
([nil nil ((1816 . 1817) 1375) nil (26369 3810 295828 461000) 0 nil])
([nil nil ((1375 . 1384) (t 26369 3810 299509 976000)) nil (26369 3844 101969 674000) 0 nil])
([nil nil ((1384 . 1390)) nil (26369 3844 101969 203000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . 1389) (undo-tree-id1937 . -1) 1390) nil (26369 3844 101968 822000) 0 nil])
([nil nil ((#("=" 0 1 (face font-lock-operator-face fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -1388) (undo-tree-id1936 . -1) 1389) nil (26369 3844 101967 870000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . 1387) (undo-tree-id1935 . -1) 1388) nil (26369 3844 101967 299000) 0 nil])
([nil nil ((1387 . 1408)) nil (26369 3844 101966 367000) 0 nil])
([nil nil ((1408 . 1411)) nil (26369 3844 101966 107000) 0 nil])
([nil nil ((1411 . 1428)) nil (26369 3844 101965 926000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -1425) (undo-tree-id1923 . -1) (undo-tree-id1924 . -1) (undo-tree-id1925 . -1) (undo-tree-id1926 . -1) (#("c" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -1426) (undo-tree-id1927 . -1) (undo-tree-id1928 . -1) (undo-tree-id1929 . -1) (undo-tree-id1930 . -1) (#("t" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -1427) (undo-tree-id1931 . -1) (undo-tree-id1932 . -1) (undo-tree-id1933 . -1) (undo-tree-id1934 . -1) 1428) nil (26369 3844 101965 285000) 0 nil])
([nil nil ((1425 . 1434)) nil (26369 3844 101952 30000) 0 nil])
([nil nil ((#("        new" 0 8 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5)) 8 11 (face py-variable-name-face fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . 1376)) nil (26369 3844 101951 529000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . 1376)) nil (26369 3844 101951 148000) 0 nil])
([nil nil ((1376 . 1384)) nil (26369 3844 101950 847000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . 1384)) nil (26369 3844 101949 966000) 0 nil])
([nil nil ((1384 . 1390)) nil (26369 3844 101945 898000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1873) (undo-tree-id1966 . -1) (undo-tree-id1967 . -1) (#("." 0 1 (fontified t)) . -1874) (undo-tree-id1968 . -1) (undo-tree-id1969 . -1) (#("." 0 1 (fontified t)) . -1875) (undo-tree-id1970 . -1) (undo-tree-id1971 . -1) 1876 (t 26369 3844 105823 148000)) nil (26369 3927 417784 778000) 0 nil])
([nil nil ((1873 . 1891)) nil (26369 3927 417780 99000) 0 nil])
([nil nil ((#("2" 0 1 (face py-number-face fontified t)) . -1890) (undo-tree-id1964 . -1) (undo-tree-id1965 . -1) 1891) nil (26369 3927 417779 798000) 0 nil])
([nil nil ((1890 . 1892)) nil (26369 3927 417778 987000) 0 nil])
([nil nil ((1892 . 1897)) nil (26369 3927 417778 756000) 0 nil])
([nil nil ((1897 . 1917)) nil (26369 3927 417778 426000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . 1916)) nil (26369 3927 417778 95000) 0 nil])
([nil nil ((1916 . 1923)) nil (26369 3927 417777 854000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -1922) (undo-tree-id1963 . -1) 1923) nil (26369 3927 417777 464000) 0 nil])
([nil nil ((1922 . 1926)) nil (26369 3927 417776 742000) 0 nil])
([nil nil ((1926 . 1931)) nil (26369 3927 417776 472000) 0 nil])
([nil nil ((1931 . 1940)) nil (26369 3927 417776 191000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -1938) (undo-tree-id1961 . -1) (#("a" 0 1 (fontified t)) . -1939) (undo-tree-id1962 . -1) 1940) nil (26369 3927 417775 851000) 0 nil])
([nil nil ((1938 . 1950)) nil (26369 3927 417774 939000) 0 nil])
([nil nil ((1950 . 1955)) nil (26369 3927 417774 578000) 0 nil])
([nil nil ((1950 . 1960) (#("tes" 0 3 (fontified nil)) . -1950) (1950 . 1953) (#("test_agent" 0 10 (fontified nil)) . -1950) (1950 . 1960) (#("test_" 0 5 (fontified t)) . -1950) (undo-tree-id1957 . -5) (undo-tree-id1958 . -5) (undo-tree-id1959 . -5) (undo-tree-id1960 . -5) 1955) nil (26369 3927 417773 807000) 0 nil])
([nil nil ((1960 . 1972)) nil (26369 3927 417771 623000) 0 nil])
([nil nil ((1974 . 1978) (#("    " 0 4 (fontified nil match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . 1973) (undo-tree-id1938 . -4) (undo-tree-id1939 . -4) (undo-tree-id1940 . -4) (undo-tree-id1941 . -4) (undo-tree-id1942 . -4) (undo-tree-id1943 . -4) (undo-tree-id1944 . -4) (undo-tree-id1945 . -4) (undo-tree-id1946 . -4) (undo-tree-id1947 . -4) (undo-tree-id1948 . -4) (undo-tree-id1949 . -4) (undo-tree-id1950 . -4) (undo-tree-id1951 . -4) (undo-tree-id1952 . -4) (undo-tree-id1953 . -4) (undo-tree-id1954 . -4) (undo-tree-id1955 . -4) (undo-tree-id1956 . -4) (1972 . 1978)) nil (26369 3927 417768 346000) 0 nil])
([nil nil ((1978 . 1985) (t 26369 3927 752210 883000)) nil (26369 3951 500217 409000) 0 nil])
([nil nil ((1978 . 1988) (#("tes" 0 3 (fontified nil)) . -1978) (1978 . 1981) (#("test_brain" 0 10 (fontified nil)) . -1978) (1978 . 1988) (#("test_br" 0 7 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -1978) (undo-tree-id2023 . -7) (undo-tree-id2024 . -7) (undo-tree-id2025 . -7) (undo-tree-id2026 . -7) 1985) nil (26369 3951 500216 567000) 0 nil])
([nil nil ((1988 . 1995)) nil (26369 3951 500214 443000) 0 nil])
([nil nil ((1989 . 2006) (#("up" 0 2 (fontified nil)) . -1989) (1989 . 1991) (#("updateStateValues" 0 17 (fontified nil)) . -1989) (1989 . 2006) (#("update" 0 6 (fontified t match-data (0 7 0 1 1 2 2 3 3 4 4 5 5 6 6 7))) . -1989) (undo-tree-id1972 . -6) (undo-tree-id1973 . -6) (undo-tree-id1974 . -6) (undo-tree-id1975 . -6) (undo-tree-id1976 . -6) (undo-tree-id1977 . -6) (undo-tree-id1978 . -6) (undo-tree-id1979 . -6) (undo-tree-id1980 . -6) (undo-tree-id1981 . -6) (undo-tree-id1982 . -6) (undo-tree-id1983 . -6) (undo-tree-id1984 . -6) (undo-tree-id1985 . -6) (undo-tree-id1986 . -6) (undo-tree-id1987 . -6) (undo-tree-id1988 . -6) (undo-tree-id1989 . -6) (undo-tree-id1990 . -6) (undo-tree-id1991 . -6) (undo-tree-id1992 . -6) (undo-tree-id1993 . -6) (undo-tree-id1994 . -6) (undo-tree-id1995 . -6) (undo-tree-id1996 . -6) (undo-tree-id1997 . -6) (undo-tree-id1998 . -6) (undo-tree-id1999 . -6) (undo-tree-id2000 . -6) (undo-tree-id2001 . -6) (undo-tree-id2002 . -6) (undo-tree-id2003 . -6) (undo-tree-id2004 . -6) (undo-tree-id2005 . -6) (undo-tree-id2006 . -6) (undo-tree-id2007 . -6) (undo-tree-id2008 . -6) (undo-tree-id2009 . -6) (undo-tree-id2010 . -6) (undo-tree-id2011 . -6) (undo-tree-id2012 . -6) (undo-tree-id2013 . -6) (undo-tree-id2014 . -6) (undo-tree-id2015 . -6) (undo-tree-id2016 . -6) (undo-tree-id2017 . -6) (undo-tree-id2018 . -6) (undo-tree-id2019 . -6) (undo-tree-id2020 . -6) (undo-tree-id2021 . -6) (undo-tree-id2022 . -6) 1995) nil (26369 3951 500212 950000) 0 nil])
([nil nil ((2006 . 2008)) nil (26369 3951 500178 174000) 0 nil])
([nil nil ((1926 . 1931) (t 26369 3951 503197 659000)) nil (26370 62258 506421 711000) 0 nil])
([nil nil ((1931 . 1944)) nil (26370 62258 506420 780000) 0 nil])
([nil nil ((1941 . 1951) (#("se" 0 2 (fontified nil)) . -1941) (1941 . 1943) (#("setRewards" 0 10 (fontified nil)) . -1941) (1941 . 1951) (#("set" 0 3 (fontified t)) . -1941) (undo-tree-id30 . -3) (undo-tree-id31 . -3) (undo-tree-id32 . -3) (undo-tree-id33 . -3) 1944) nil (26370 62258 506419 628000) 0 nil])
([nil nil ((1951 . 1952)) nil (26370 62258 506387 347000) 0 nil])
([nil nil ((1952 . 1960)) nil (26370 62258 506386 866000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1958) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (#("e" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1959) (undo-tree-id28 . -1) (undo-tree-id29 . -1) 1960) nil (26370 62258 506385 583000) 0 nil])
([nil nil ((1958 . 1963)) nil (26370 62258 506383 750000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t match-data (0 3 0 1 1 2 2 3))) . -1962) (undo-tree-id24 . -1) (undo-tree-id25 . -1) 1963) nil (26370 62258 506382 507000) 0 nil])
([nil nil ((1962 . 1964)) nil (26370 62258 506381 95000) 0 nil])
([nil nil ((1964 . 1968)) nil (26370 62258 506380 474000) 0 nil])
([nil nil ((1968 . 1970)) nil (26370 62258 506379 862000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1955) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (#("d" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1956) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (#("a" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1957) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (#("r" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1958) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (#("r" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1959) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (#("a" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1960) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (#("y" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1961) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t match-data (0 3 0 1 1 2 2 3))) . -1962) (undo-tree-id16 . -1) (#("[" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t match-data (0 3 0 1 1 2 2 3))) . -1963) (undo-tree-id17 . -1) (#("0" 0 1 (face py-number-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1964) (undo-tree-id18 . -1) (#("," 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1965) (undo-tree-id19 . -1) (#("0" 0 1 (face py-number-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1966) (undo-tree-id20 . -1) (#("," 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1967) (undo-tree-id21 . -1) (#("5" 0 1 (face py-number-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1968) (undo-tree-id22 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t match-data (0 3 0 1 1 2 2 3))) . -1969) (undo-tree-id23 . -1) 1970) nil (26370 62258 506376 556000) 0 nil])
([nil nil ((1955 . 1961)) nil (26370 62258 506365 95000) 0 nil])
([nil nil ((#("9" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1960) (undo-tree-id1 . -1) 1961) nil (26370 62258 506364 213000) 0 nil])
([nil nil ((1960 . 1971)) nil (26370 62258 506362 289000) 0 nil])
([nil nil ((1971 . 1978)) nil (26370 62258 506361 648000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . 1977) (undo-tree-id0 . -1) 1978) nil (26370 62258 506360 576000) 0 nil])
([nil nil ((1977 . 1988)) nil (26370 62258 506330 519000) 0 nil])
([nil nil ((#("?" 0 1 (face font-lock-string-face fontified t)) . -1670) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (#("?" 0 1 (face font-lock-string-face fontified t)) . -1671) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (#("?" 0 1 (face font-lock-string-face fontified t)) . -1672) (undo-tree-id98 . -1) (undo-tree-id99 . -1) 1673 (t 26370 62258 646941 558000)) nil (26370 62653 290321 113000) 0 nil])
([nil nil ((1670 . 1680)) nil (26370 62653 290040 709000) 0 nil])
([nil nil ((#("]" 0 1 (face font-lock-string-face fontified t)) . -1675) (undo-tree-id89 . -1) (#("." 0 1 (face font-lock-string-face fontified t)) . -1676) (undo-tree-id90 . -1) (#("s" 0 1 (face font-lock-string-face fontified t)) . -1677) (undo-tree-id91 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -1678) (undo-tree-id92 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -1679) (undo-tree-id93 . -1) 1680) nil (26370 62653 290040 38000) 0 nil])
([nil nil ((1675 . 1684)) nil (26370 62653 290037 443000) 0 nil])
([nil nil ((1684 . 1692)) nil (26370 62653 290036 572000) 0 nil])
([nil nil ((#("w" 0 1 (face font-lock-string-face fontified t)) . -1690) (undo-tree-id87 . -1) (#("a" 0 1 (face font-lock-string-face fontified t)) . -1691) (undo-tree-id88 . -1) 1692) nil (26370 62653 290035 830000) 0 nil])
([nil nil ((1690 . 1699)) nil (26370 62653 290034 738000) 0 nil])
([nil nil ((1699 . 1706)) nil (26370 62653 290034 217000) 0 nil])
([nil nil ((#(")" 0 1 (face font-lock-string-face fontified t)) . -1705) (undo-tree-id85 . -1) (undo-tree-id86 . -1) 1706) nil (26370 62653 290033 756000) 0 nil])
([nil nil ((#("n" 0 1 (face font-lock-string-face fontified t)) . -1697) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (#("p" 0 1 (face font-lock-string-face fontified t)) . -1698) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (#("." 0 1 (face font-lock-string-face fontified t)) . -1699) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (#("a" 0 1 (face font-lock-string-face fontified t)) . -1700) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (#("r" 0 1 (face font-lock-string-face fontified t)) . -1701) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (#("r" 0 1 (face font-lock-string-face fontified t)) . -1702) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (#("a" 0 1 (face font-lock-string-face fontified t)) . -1703) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (#("y" 0 1 (face font-lock-string-face fontified t)) . -1704) (undo-tree-id83 . -1) (undo-tree-id84 . -1) 1705) nil (26370 62653 290031 572000) 0 nil])
([nil nil ((1697 . 1711)) nil (26370 62653 290025 571000) 0 nil])
([nil nil ((1716 . 1724) (#("        " 0 8 (fontified nil)) . 1715) (undo-tree-id68 . -8) (1714 . 1724)) nil (26370 62653 290024 950000) 0 nil])
([nil nil ((1724 . 1725)) nil (26370 62653 290024 188000) 0 nil])
([nil nil ((1725 . 1735)) nil (26370 62653 290023 968000) 0 nil])
([nil nil ((1735 . 1756)) nil (26370 62653 290023 497000) 0 nil])
([nil nil ((1756 . 1758)) nil (26370 62653 290023 96000) 0 nil])
([nil nil ((1758 . 1767)) nil (26370 62653 290022 726000) 0 nil])
([nil nil ((1767 . 1784)) nil (26370 62653 290022 425000) 0 nil])
([nil nil ((1784 . 1798)) nil (26370 62653 290022 185000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 1797) (undo-tree-id67 . -1) 1798) nil (26370 62653 290021 624000) 0 nil])
([nil nil ((1797 . 1809)) nil (26370 62653 290021 93000) 0 nil])
([nil nil ((1809 . 1830)) nil (26370 62653 290020 842000) 0 nil])
([nil nil ((1830 . 1834)) nil (26370 62653 290020 572000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 1833) (undo-tree-id66 . -1) 1834) nil (26370 62653 290019 951000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -1831) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (#("r" 0 1 (face font-lock-keyword-face fontified t)) . -1832) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) 1833) nil (26370 62653 290018 688000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 1830) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) 1831) nil (26370 62653 290014 741000) 0 nil])
([nil nil ((1778 . 1779)) nil (26370 62653 290011 635000) 0 nil])
([nil nil ((1831 . 1846)) nil (26370 62653 290011 395000) 0 nil])
([nil nil ((1846 . 1867)) nil (26370 62653 290011 54000) 0 nil])
([nil nil ((1867 . 1873)) nil (26370 62653 290010 803000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1872) (undo-tree-id52 . -1) 1873) nil (26370 62653 290010 162000) 0 nil])
([nil nil ((1872 . 1879)) nil (26370 62653 290009 491000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . -1874) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (#("r" 0 1 (fontified t)) . -1875) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (#("i" 0 1 (fontified t)) . -1876) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (#("d" 0 1 (fontified t)) . -1877) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (#("." 0 1 (fontified t)) . -1878) (undo-tree-id51 . -1) 1879) nil (26370 62653 290008 58000) 0 nil])
([nil nil ((1874 . 1876)) nil (26370 62653 290000 324000) 0 nil])
([nil nil ((#("F" 0 1 (fontified t)) . -1875) (undo-tree-id34 . -1) 1876) nil (26370 62653 289999 703000) 0 nil])
([nil nil ((1875 . 1896)) nil (26370 62653 289991 928000) 0 nil])
([nil nil ((1896 . 1897)) nil (26370 62653 289991 307000) 0 nil])
([nil nil ((1897 . 1910)) nil (26370 62653 289990 836000) 0 nil])
([nil nil ((1910 . 1919)) nil (26370 62653 289986 909000) 0 nil])
([nil nil ((1919 . 1928) (t 26370 62653 294381 431000)) nil (26370 62681 46282 773000) 0 nil])
([nil nil ((498 . 500) (t 26370 62681 60219 576000)) nil (26370 62987 464821 379000) 0 nil])
([nil nil ((549 . 551)) nil (26370 62987 464816 570000) 0 nil])
([nil nil ((2326 . 2331) (t 26370 62987 468735 910000)) nil (26370 63152 194069 456000) 0 nil])
([nil nil ((2331 . 2352)) nil (26370 63152 194068 314000) 0 nil])
([nil nil ((2352 . 2355)) nil (26370 63152 194063 185000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -2347) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (#("e" 0 1 (fontified t)) . -2348) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (#("w" 0 1 (fontified t)) . -2349) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (#("a" 0 1 (fontified t)) . -2350) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (#("r" 0 1 (fontified t)) . -2351) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (#("d" 0 1 (fontified t)) . -2352) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (#("s" 0 1 (fontified t)) . -2353) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) 2354 (t 26370 63152 198194 676000)) nil (26370 63164 290128 299000) 0 nil])
([nil nil ((#("    print(test_grid.)" 0 4 (fontified t) 4 9 (face py-builtins-face fontified t) 9 10 (face (rainbow-delimiters-depth-1-face) fontified t) 10 20 (fontified t) 20 21 (face (rainbow-delimiters-depth-1-face) fontified t)) . 2327) (undo-tree-id100 . -20) (undo-tree-id101 . -20) (undo-tree-id102 . -20) (undo-tree-id103 . -10) (undo-tree-id104 . -20)) nil (26370 63164 290110 335000) 0 nil])
([nil nil ((2327 . 2331)) nil (26370 63164 290097 390000) 0 nil])
([nil nil ((2331 . 2348)) nil (26370 63164 290092 301000) 0 nil])
([nil nil ((1101 . 1118) (t 26370 63164 294242 596000)) nil (26370 63836 601002 452000) 0 nil])
([nil nil ((1118 . 1124)) nil (26370 63836 601001 641000) 0 nil])
([nil nil ((1124 . 1125)) nil (26370 63836 601000 979000) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-string-face fontified t)) . -1124) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) 1125) nil (26370 63836 601000 158000) 0 nil])
([nil nil ((1124 . 1125)) nil (26370 63836 600997 793000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -1124) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) 1125) nil (26370 63836 600997 12000) 0 nil])
([nil nil ((1124 . 1127)) nil (26370 63836 600994 357000) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-string-face fontified t)) . -1126) (undo-tree-id181 . -1) (undo-tree-id182 . -1) 1127) nil (26370 63836 600993 686000) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-string-face fontified t)) . -1124) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (#("[" 0 1 (face font-lock-string-face fontified t)) . -1125) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) 1126) nil (26370 63836 600991 181000) 0 nil])
([nil nil ((1124 . 1131)) nil (26370 63836 600984 839000) 0 nil])
([nil nil ((#("]" 0 1 (face font-lock-string-face fontified t)) . -1130) (undo-tree-id169 . -1) (undo-tree-id170 . -1) 1131) nil (26370 63836 600983 977000) 0 nil])
([nil nil ((1130 . 1132)) nil (26370 63836 600982 354000) 0 nil])
([nil nil ((#("[" 0 1 (face font-lock-string-face fontified t)) . -1131) (undo-tree-id167 . -1) (undo-tree-id168 . -1) 1132) nil (26370 63836 600981 452000) 0 nil])
([nil nil ((1131 . 1136)) nil (26370 63836 600979 849000) 0 nil])
([nil nil ((#("\\" 0 1 (face font-lock-string-face fontified t)) . -1135) (undo-tree-id165 . -1) (undo-tree-id166 . -1) 1136) nil (26370 63836 600978 858000) 0 nil])
([nil nil ((1135 . 1156)) nil (26370 63836 600977 204000) 0 nil])
([nil nil ((1156 . 1158)) nil (26370 63836 600976 533000) 0 nil])
([nil nil ((#("]" 0 1 (face font-lock-string-face fontified t)) . -1157) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) 1158) nil (26370 63836 600974 980000) 0 nil])
([nil nil ((1157 . 1158)) nil (26370 63836 600667 30000) 0 nil])
([nil nil ((1157 . 1158) (t 26370 63836 604744 333000)) nil (26370 63838 428995 645000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . -498) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (#("1" 0 1 (face py-number-face fontified t)) . -499) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) 500 (t 26370 63838 432759 737000)) nil (26370 63864 72552 216000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . -547) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (#("1" 0 1 (face py-number-face fontified t)) . -548) (undo-tree-id195 . -1) (undo-tree-id196 . -1) 549) nil (26370 63864 72545 72000) 0 nil])
([nil nil ((892 . 913) (t 26370 63864 76976 924000)) nil (26370 63912 510800 898000) 0 nil])
([nil nil ((913 . 920)) nil (26370 63912 510799 906000) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-string-face fontified t)) . -919) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) 920) nil (26370 63912 510799 65000) 0 nil])
([nil nil ((919 . 926)) nil (26370 63912 510795 318000) 0 nil])
([nil nil ((#("n" 0 1 (face font-lock-string-face fontified t)) . -924) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (#("}" 0 1 (face font-lock-string-face fontified t)) . -925) (undo-tree-id211 . -1) (undo-tree-id212 . -1) 926) nil (26370 63912 510794 396000) 0 nil])
([nil nil ((924 . 936)) nil (26370 63912 510789 667000) 0 nil])
([nil nil ((936 . 939)) nil (26370 63912 510788 876000) 0 nil])
([nil nil ((#("O" 0 1 (face font-lock-string-face fontified t)) . -938) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) 939) nil (26370 63912 510787 703000) 0 nil])
([nil nil ((938 . 942)) nil (26370 63912 510772 334000) 0 nil])
([nil nil ((1483 . 1484) (t 26370 63912 522392 455000)) nil (26370 64061 902221 806000) 0 nil])
([nil nil ((1484 . 1493)) nil (26370 64061 902220 784000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . 1489) (undo-tree-id387 . -4) 1493) nil (26370 64061 902220 52000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1485) (undo-tree-id386 . -4) 1489) nil (26370 64061 902219 100000) 0 nil])
([nil nil ((#("\\" 0 1 (fontified t)) . -1483) (undo-tree-id384 . -1) (#("
" 0 1 (fontified t)) . -1484) (undo-tree-id385 . -1) 1485) nil (26370 64061 902218 89000) 0 nil])
([nil nil ((1483 . 1492)) nil (26370 64061 902217 267000) 0 nil])
([nil nil ((1492 . 1513)) nil (26370 64061 902217 7000) 0 nil])
([nil nil ((1513 . 1534)) nil (26370 64061 902216 756000) 0 nil])
([nil nil ((1534 . 1538)) nil (26370 64061 902216 385000) 0 nil])
([nil nil ((1538 . 1540)) nil (26370 64061 902215 904000) 0 nil])
([nil nil ((#("]" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -1539) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) 1540) nil (26370 64061 902215 123000) 0 nil])
([nil nil ((1539 . 1545)) nil (26370 64061 902213 901000) 0 nil])
([nil nil ((1545 . 1551)) nil (26370 64061 902213 159000) 0 nil])
([nil nil ((1551 . 1560)) nil (26370 64061 902212 348000) 0 nil])
([nil nil ((1560 . 1579)) nil (26370 64061 902211 977000) 0 nil])
([nil nil ((1579 . 1588)) nil (26370 64061 902211 416000) 0 nil])
([nil nil ((1588 . 1590)) nil (26370 64061 902210 985000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -1589) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) 1590) nil (26370 64061 902210 144000) 0 nil])
([nil nil ((1589 . 1591)) nil (26370 64061 902208 210000) 0 nil])
([nil nil ((1591 . 1609)) nil (26370 64061 902207 489000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 1608) (undo-tree-id376 . -1) 1609) nil (26370 64061 902206 567000) 0 nil])
([nil nil ((1608 . 1614)) nil (26370 64061 902205 304000) 0 nil])
([nil nil ((1591 . 1592)) nil (26370 64061 902204 824000) 0 nil])
([nil nil ((1615 . 1636)) nil (26370 64061 902204 583000) 0 nil])
([nil nil ((1636 . 1637)) nil (26370 64061 902204 252000) 0 nil])
([nil nil ((1637 . 1638)) nil (26370 64061 902203 922000) 0 nil])
([nil nil ((1638 . 1651)) nil (26370 64061 902203 481000) 0 nil])
([nil nil ((1651 . 1656)) nil (26370 64061 902203 30000) 0 nil])
([nil nil ((1656 . 1658)) nil (26370 64061 902202 569000) 0 nil])
([nil nil ((#("v" 0 1 (fontified t)) . -1657) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) 1658) nil (26370 64061 902201 988000) 0 nil])
([nil nil ((1657 . 1659)) nil (26370 64061 902200 115000) 0 nil])
([nil nil ((1657 . 1667) (#("Va" 0 2 (fontified nil)) . -1657) (1657 . 1659) (#("ValueError" 0 10 (fontified nil)) . -1657) (1657 . 1667) (#("Va" 0 2 (fontified t)) . -1657) (undo-tree-id368 . -2) (undo-tree-id369 . -2) (undo-tree-id370 . -2) (undo-tree-id371 . -2) 1659) nil (26370 64061 902198 912000) 0 nil])
([nil nil ((1667 . 1679)) nil (26370 64061 902194 394000) 0 nil])
([nil nil ((#("a" 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . -1676) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (#("t" 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . -1677) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (#("e" 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . -1678) (undo-tree-id366 . -1) (undo-tree-id367 . -1) 1679) nil (26370 64061 902192 811000) 0 nil])
([nil nil ((#("S" 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . -1674) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (#("t" 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . -1675) (undo-tree-id360 . -1) (undo-tree-id361 . -1) 1676) nil (26370 64061 902189 615000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . 1673) (undo-tree-id356 . -1) (undo-tree-id357 . -1) 1674) nil (26370 64061 902187 701000) 0 nil])
([nil nil ((#("N" 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . -1669) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (#("e" 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . -1670) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (#("x" 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . -1671) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (#("t" 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . -1672) (undo-tree-id354 . -1) (undo-tree-id355 . -1) 1673) nil (26370 64061 902177 442000) 0 nil])
([nil nil ((1669 . 1670)) nil (26370 64061 902173 925000) 0 nil])
([nil nil ((#("[" 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . -1669) (undo-tree-id346 . -1) (undo-tree-id347 . -1) 1670) nil (26370 64061 902173 174000) 0 nil])
([nil nil ((1669 . 1671)) nil (26370 64061 902170 188000) 0 nil])
([nil nil ((1671 . 1684)) nil (26370 64061 902169 657000) 0 nil])
([nil nil ((1668 . 1669)) nil (26370 64061 902168 996000) 0 nil])
([nil nil ((1685 . 1706)) nil (26370 64061 902168 315000) 0 nil])
([nil nil ((1706 . 1710)) nil (26370 64061 902167 603000) 0 nil])
([nil nil ((#("n" 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . -1703) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (#("e" 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . -1704) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (#("w" 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . -1705) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (#("p" 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . -1706) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (#("o" 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . -1707) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (#("s" 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . -1708) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (#("i" 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . -1709) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) 1710) nil (26370 64061 902165 950000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . 1702) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) 1703) nil (26370 64061 902155 230000) 0 nil])
([nil nil ((#("(" 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . -1684) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (#("{" 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . -1685) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (#("n" 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . -1686) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (#("e" 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . -1687) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (#("w" 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . -1688) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (#("_" 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . -1689) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (#("p" 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . -1690) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (#("o" 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . -1691) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (#("s" 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . -1692) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (#("i" 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . -1693) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (#("t" 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . -1694) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (#("i" 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . -1695) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (#("o" 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . -1696) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (#("n" 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . -1697) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (#("[" 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . -1698) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (#("0" 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . -1699) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (#("]" 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . -1700) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (#("," 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . -1701) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) 1702) nil (26370 64061 902149 319000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . 1683) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) 1684) nil (26370 64061 901735 38000) 0 nil])
([nil nil ((1683 . 1684)) nil (26370 64061 901721 703000) 0 nil])
([nil nil ((1684 . 1705)) nil (26370 64061 901720 270000) 0 nil])
([nil nil ((1705 . 1717)) nil (26370 64061 901715 752000) 0 nil])
([nil nil ((#("                    print(f\"N={N}, R={R}, P={P}\")" 0 20 (fontified t) 20 25 (face py-builtins-face fontified t) 25 26 (face (rainbow-delimiters-depth-1-face) fontified t) 26 27 (fontified t) 27 48 (face font-lock-string-face fontified t) 48 49 (face (rainbow-delimiters-depth-1-face) fontified t)) . 893) (undo-tree-id388 . -49) (t 26370 64061 905711 479000)) nil (26370 64080 256223 547000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 893)) nil (26370 64080 256210 322000) 0 nil])
([nil nil ((1516 . 1523) (t 26370 64080 260876 978000)) nil (26370 64229 14934 212000) 0 nil])
([nil nil ((1523 . 1544)) nil (26370 64229 14933 621000) 0 nil])
([nil nil ((1544 . 1546)) nil (26370 64229 14933 260000) 0 nil])
([nil nil ((1546 . 1547)) nil (26370 64229 14932 849000) 0 nil])
([nil nil ((1547 . 1549)) nil (26370 64229 14932 298000) 0 nil])
([nil nil ((#("[" 0 1 (face font-lock-string-face fontified t)) . -1548) (undo-tree-id389 . -1) 1549) nil (26370 64229 14931 286000) 0 nil])
([nil nil ((1548 . 1549)) nil (26370 64229 14921 678000) 0 nil])
([nil nil ((1561 . 1563)) nil (26370 64229 14916 28000) 0 nil])
([nil nil ((1501 . 1510) (t 26370 64229 23240 626000)) nil (26370 64295 819677 859000) 0 nil])
([nil nil ((1510 . 1531)) nil (26370 64295 819676 426000) 0 nil])
([nil nil ((1531 . 1540)) nil (26370 64295 819675 655000) 0 nil])
([nil nil ((#("n" 0 1 (face font-lock-string-face fontified t)) . -1539) (undo-tree-id428 . -1) (undo-tree-id429 . -1) 1540) nil (26370 64295 819674 603000) 0 nil])
([nil nil ((#("t" 0 1 (face font-lock-string-face fontified t)) . -1536) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (#("i" 0 1 (face font-lock-string-face fontified t)) . -1537) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -1538) (undo-tree-id426 . -1) (undo-tree-id427 . -1) 1539) nil (26370 64295 819672 689000) 0 nil])
([nil nil ((#("L" 0 1 (face font-lock-string-face fontified t)) . -1532) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -1533) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (#("c" 0 1 (face font-lock-string-face fontified t)) . -1534) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (#("a" 0 1 (face font-lock-string-face fontified t)) . -1535) (undo-tree-id420 . -1) (undo-tree-id421 . -1) 1536) nil (26370 64295 819669 223000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-string-face fontified t)) . 1531) (undo-tree-id412 . -1) (undo-tree-id413 . -1) 1532) nil (26370 64295 819664 814000) 0 nil])
([nil nil ((#("u" 0 1 (face font-lock-string-face fontified t)) . -1525) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (#("r" 0 1 (face font-lock-string-face fontified t)) . -1526) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (#("r" 0 1 (face font-lock-string-face fontified t)) . -1527) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -1528) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (#("n" 0 1 (face font-lock-string-face fontified t)) . -1529) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -1530) (undo-tree-id410 . -1) (undo-tree-id411 . -1) 1531) nil (26370 64295 819662 119000) 0 nil])
([nil nil ((1525 . 1541)) nil (26370 64295 819653 22000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-string-face fontified t)) . -1540) (undo-tree-id398 . -1) (undo-tree-id399 . -1) 1541) nil (26370 64295 819652 181000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-string-face fontified t)) . -1536) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -1537) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (#("a" 0 1 (face font-lock-string-face fontified t)) . -1538) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -1539) (undo-tree-id396 . -1) (undo-tree-id397 . -1) 1540) nil (26370 64295 819649 546000) 0 nil])
([nil nil ((1536 . 1551)) nil (26370 64295 819636 130000) 0 nil])
([nil nil ((1551 . 1564)) nil (26370 64295 819631 502000) 0 nil])
([nil nil ((#("[" 0 1 (face font-lock-string-face fontified t)) . -1122) (undo-tree-id471 . -1) (undo-tree-id472 . -1) 1123 (t 26370 64295 823864 120000)) nil (26370 64417 112791 912000) 0 nil])
([nil nil ((1122 . 1128)) nil (26370 64417 112790 820000) 0 nil])
([nil nil ((1128 . 1144)) nil (26370 64417 112790 469000) 0 nil])
([nil nil ((#("]" 0 1 (face font-lock-string-face fontified t)) . -1151) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) 1152) nil (26370 64417 112789 187000) 0 nil])
([nil nil ((1151 . 1152)) nil (26370 64417 112413 909000) 0 nil])
([nil nil ((1144 . 1145)) nil (26370 64417 112409 271000) 0 nil])
([nil nil ((#("        print(f\"[LOG] Calculating value for state {position}\")" 0 8 (fontified t) 8 13 (face py-builtins-face fontified t) 13 14 (face (rainbow-delimiters-depth-1-face) fontified t) 14 15 (fontified t) 15 61 (face font-lock-string-face fontified t) 61 62 (face (rainbow-delimiters-depth-1-face) fontified t)) . 1524) (undo-tree-id474 . -51) (undo-tree-id475 . -59) (undo-tree-id476 . -59) (undo-tree-id477 . -22) (undo-tree-id478 . -22) (undo-tree-id479 . -22) (undo-tree-id480 . -22) (undo-tree-id481 . -22) (undo-tree-id482 . -22) (undo-tree-id483 . -22) (undo-tree-id484 . -22) (undo-tree-id485 . -22) (undo-tree-id486 . -22) (undo-tree-id487 . -22) (undo-tree-id488 . -22) (undo-tree-id489 . -22) (undo-tree-id490 . -22) (undo-tree-id491 . -22) (undo-tree-id492 . -22) (undo-tree-id493 . -62) (t 26370 64417 117010 395000)) nil (26370 64543 420963 155000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1524) (undo-tree-id473 . -1)) nil (26370 64543 420948 528000) 0 nil])
([nil nil ((#("(" 0 1 (face font-lock-string-face fontified t)) . -1144) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (#("{" 0 1 (face font-lock-string-face fontified t)) . -1145) (undo-tree-id1145 . 1) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (undo-tree-id1176 . -1) (undo-tree-id1177 . -1) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (#("i" 0 1 (face font-lock-string-face fontified t)) . -1146) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (#("}" 0 1 (face font-lock-string-face fontified t)) . -1147) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (undo-tree-id1507 . -1) (undo-tree-id1508 . -1) (undo-tree-id1509 . -1) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (undo-tree-id1519 . -1) (undo-tree-id1520 . -1) (undo-tree-id1521 . -1) (undo-tree-id1522 . -1) (undo-tree-id1523 . -1) (undo-tree-id1524 . -1) (undo-tree-id1525 . -1) (undo-tree-id1526 . -1) (undo-tree-id1527 . -1) (undo-tree-id1528 . -1) (undo-tree-id1529 . -1) (undo-tree-id1530 . -1) (undo-tree-id1531 . -1) (undo-tree-id1532 . -1) (undo-tree-id1533 . -1) (undo-tree-id1534 . -1) (undo-tree-id1535 . -1) (undo-tree-id1536 . -1) (undo-tree-id1537 . -1) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) (#("," 0 1 (face font-lock-string-face fontified t)) . -1148) (undo-tree-id1542 . -1) (undo-tree-id1543 . -1) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (undo-tree-id1546 . -1) (undo-tree-id1547 . -1) (undo-tree-id1548 . -1) (undo-tree-id1549 . -1) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) (undo-tree-id1552 . -1) (undo-tree-id1553 . -1) (undo-tree-id1554 . -1) (undo-tree-id1555 . -1) (undo-tree-id1556 . -1) (undo-tree-id1557 . -1) (undo-tree-id1558 . -1) (undo-tree-id1559 . -1) (undo-tree-id1560 . -1) (undo-tree-id1561 . -1) (undo-tree-id1562 . -1) (undo-tree-id1563 . -1) (undo-tree-id1564 . -1) (undo-tree-id1565 . -1) (undo-tree-id1566 . -1) (undo-tree-id1567 . -1) (undo-tree-id1568 . -1) (undo-tree-id1569 . -1) (undo-tree-id1570 . -1) (undo-tree-id1571 . -1) (undo-tree-id1572 . -1) (undo-tree-id1573 . -1) (undo-tree-id1574 . -1) (undo-tree-id1575 . -1) (undo-tree-id1576 . -1) (undo-tree-id1577 . -1) (undo-tree-id1578 . -1) (undo-tree-id1579 . -1) (undo-tree-id1580 . -1) (undo-tree-id1581 . -1) (undo-tree-id1582 . -1) (undo-tree-id1583 . -1) (undo-tree-id1584 . -1) (undo-tree-id1585 . -1) (undo-tree-id1586 . -1) (undo-tree-id1587 . -1) (undo-tree-id1588 . -1) (undo-tree-id1589 . -1) (undo-tree-id1590 . -1) (undo-tree-id1591 . -1) (undo-tree-id1592 . -1) (undo-tree-id1593 . -1) (undo-tree-id1594 . -1) (undo-tree-id1595 . -1) (undo-tree-id1596 . -1) (undo-tree-id1597 . -1) (undo-tree-id1598 . -1) (undo-tree-id1599 . -1) (undo-tree-id1600 . -1) (undo-tree-id1601 . -1) (undo-tree-id1602 . -1) (undo-tree-id1603 . -1) (undo-tree-id1604 . -1) (undo-tree-id1605 . -1) (undo-tree-id1606 . -1) (undo-tree-id1607 . -1) (undo-tree-id1608 . -1) (undo-tree-id1609 . -1) (undo-tree-id1610 . -1) (undo-tree-id1611 . -1) (undo-tree-id1612 . -1) (undo-tree-id1613 . -1) (undo-tree-id1614 . -1) (undo-tree-id1615 . -1) (undo-tree-id1616 . -1) (undo-tree-id1617 . -1) (undo-tree-id1618 . -1) (undo-tree-id1619 . -1) (undo-tree-id1620 . -1) (undo-tree-id1621 . -1) (undo-tree-id1622 . -1) (undo-tree-id1623 . -1) (undo-tree-id1624 . -1) (undo-tree-id1625 . -1) (undo-tree-id1626 . -1) (undo-tree-id1627 . -1) (undo-tree-id1628 . -1) (undo-tree-id1629 . -1) (undo-tree-id1630 . -1) (undo-tree-id1631 . -1) (undo-tree-id1632 . -1) (undo-tree-id1633 . -1) (undo-tree-id1634 . -1) (undo-tree-id1635 . -1) (undo-tree-id1636 . -1) (undo-tree-id1637 . -1) (undo-tree-id1638 . -1) (undo-tree-id1639 . -1) (undo-tree-id1640 . -1) (undo-tree-id1641 . -1) (undo-tree-id1642 . -1) (undo-tree-id1643 . -1) (undo-tree-id1644 . -1) (undo-tree-id1645 . -1) (undo-tree-id1646 . -1) (undo-tree-id1647 . -1) (undo-tree-id1648 . -1) (undo-tree-id1649 . -1) (undo-tree-id1650 . -1) (undo-tree-id1651 . -1) (undo-tree-id1652 . -1) (undo-tree-id1653 . -1) (undo-tree-id1654 . -1) (undo-tree-id1655 . -1) (undo-tree-id1656 . -1) (undo-tree-id1657 . -1) (#("{" 0 1 (face font-lock-string-face fontified t)) . -1149) (undo-tree-id1658 . -1) (undo-tree-id1659 . -1) (undo-tree-id1660 . -1) (undo-tree-id1661 . -1) (undo-tree-id1662 . -1) (undo-tree-id1663 . -1) (undo-tree-id1664 . -1) (undo-tree-id1665 . -1) (undo-tree-id1666 . -1) (undo-tree-id1667 . -1) (undo-tree-id1668 . -1) (undo-tree-id1669 . -1) (undo-tree-id1670 . -1) (undo-tree-id1671 . -1) (undo-tree-id1672 . -1) (undo-tree-id1673 . -1) (undo-tree-id1674 . -1) (undo-tree-id1675 . -1) (undo-tree-id1676 . -1) (undo-tree-id1677 . -1) (undo-tree-id1678 . -1) (undo-tree-id1679 . -1) (undo-tree-id1680 . -1) (undo-tree-id1681 . -1) (undo-tree-id1682 . -1) (undo-tree-id1683 . -1) (undo-tree-id1684 . -1) (undo-tree-id1685 . -1) (undo-tree-id1686 . -1) (undo-tree-id1687 . -1) (undo-tree-id1688 . -1) (undo-tree-id1689 . -1) (undo-tree-id1690 . -1) (undo-tree-id1691 . -1) (undo-tree-id1692 . -1) (undo-tree-id1693 . -1) (undo-tree-id1694 . -1) (undo-tree-id1695 . -1) (undo-tree-id1696 . -1) (undo-tree-id1697 . -1) (undo-tree-id1698 . -1) (undo-tree-id1699 . -1) (undo-tree-id1700 . -1) (undo-tree-id1701 . -1) (undo-tree-id1702 . -1) (undo-tree-id1703 . -1) (undo-tree-id1704 . -1) (undo-tree-id1705 . -1) (undo-tree-id1706 . -1) (undo-tree-id1707 . -1) (undo-tree-id1708 . -1) (undo-tree-id1709 . -1) (undo-tree-id1710 . -1) (undo-tree-id1711 . -1) (undo-tree-id1712 . -1) (undo-tree-id1713 . -1) (undo-tree-id1714 . -1) (undo-tree-id1715 . -1) (undo-tree-id1716 . -1) (undo-tree-id1717 . -1) (undo-tree-id1718 . -1) (undo-tree-id1719 . -1) (undo-tree-id1720 . -1) (undo-tree-id1721 . -1) (undo-tree-id1722 . -1) (undo-tree-id1723 . -1) (undo-tree-id1724 . -1) (undo-tree-id1725 . -1) (undo-tree-id1726 . -1) (undo-tree-id1727 . -1) (undo-tree-id1728 . -1) (undo-tree-id1729 . -1) (undo-tree-id1730 . -1) (undo-tree-id1731 . -1) (undo-tree-id1732 . -1) (undo-tree-id1733 . -1) (undo-tree-id1734 . -1) (undo-tree-id1735 . -1) (undo-tree-id1736 . -1) (undo-tree-id1737 . -1) (undo-tree-id1738 . -1) (undo-tree-id1739 . -1) (undo-tree-id1740 . -1) (undo-tree-id1741 . -1) (undo-tree-id1742 . -1) (undo-tree-id1743 . -1) (undo-tree-id1744 . -1) (undo-tree-id1745 . -1) (undo-tree-id1746 . -1) (undo-tree-id1747 . -1) (undo-tree-id1748 . -1) (undo-tree-id1749 . -1) (undo-tree-id1750 . -1) (undo-tree-id1751 . -1) (undo-tree-id1752 . -1) (undo-tree-id1753 . -1) (undo-tree-id1754 . -1) (undo-tree-id1755 . -1) (undo-tree-id1756 . -1) (undo-tree-id1757 . -1) (undo-tree-id1758 . -1) (undo-tree-id1759 . -1) (undo-tree-id1760 . -1) (undo-tree-id1761 . -1) (undo-tree-id1762 . -1) (undo-tree-id1763 . -1) (undo-tree-id1764 . -1) (undo-tree-id1765 . -1) (#("j" 0 1 (face font-lock-string-face fontified t)) . -1150) (undo-tree-id1766 . -1) (undo-tree-id1767 . -1) (undo-tree-id1768 . -1) (undo-tree-id1769 . -1) (undo-tree-id1770 . -1) (undo-tree-id1771 . -1) (undo-tree-id1772 . -1) (undo-tree-id1773 . -1) (undo-tree-id1774 . -1) (undo-tree-id1775 . -1) (undo-tree-id1776 . -1) (undo-tree-id1777 . -1) (undo-tree-id1778 . -1) (undo-tree-id1779 . -1) (undo-tree-id1780 . -1) (undo-tree-id1781 . -1) (undo-tree-id1782 . -1) (undo-tree-id1783 . -1) (undo-tree-id1784 . -1) (undo-tree-id1785 . -1) (undo-tree-id1786 . -1) (undo-tree-id1787 . -1) (undo-tree-id1788 . -1) (undo-tree-id1789 . -1) (undo-tree-id1790 . -1) (undo-tree-id1791 . -1) (undo-tree-id1792 . -1) (undo-tree-id1793 . -1) (undo-tree-id1794 . -1) (undo-tree-id1795 . -1) (undo-tree-id1796 . -1) (undo-tree-id1797 . -1) (undo-tree-id1798 . -1) (undo-tree-id1799 . -1) (undo-tree-id1800 . -1) (undo-tree-id1801 . -1) (undo-tree-id1802 . -1) (undo-tree-id1803 . -1) (undo-tree-id1804 . -1) (undo-tree-id1805 . -1) (undo-tree-id1806 . -1) (undo-tree-id1807 . -1) (undo-tree-id1808 . -1) (undo-tree-id1809 . -1) (undo-tree-id1810 . -1) (undo-tree-id1811 . -1) (undo-tree-id1812 . -1) (undo-tree-id1813 . -1) (undo-tree-id1814 . -1) (undo-tree-id1815 . -1) (undo-tree-id1816 . -1) (undo-tree-id1817 . -1) (undo-tree-id1818 . -1) (undo-tree-id1819 . -1) (undo-tree-id1820 . -1) (undo-tree-id1821 . -1) (undo-tree-id1822 . -1) (undo-tree-id1823 . -1) (undo-tree-id1824 . -1) (undo-tree-id1825 . -1) (undo-tree-id1826 . -1) (undo-tree-id1827 . -1) (undo-tree-id1828 . -1) (undo-tree-id1829 . -1) (undo-tree-id1830 . -1) (undo-tree-id1831 . -1) (undo-tree-id1832 . -1) (undo-tree-id1833 . -1) (undo-tree-id1834 . -1) (undo-tree-id1835 . -1) (undo-tree-id1836 . -1) (undo-tree-id1837 . -1) (undo-tree-id1838 . -1) (undo-tree-id1839 . -1) (undo-tree-id1840 . -1) (undo-tree-id1841 . -1) (undo-tree-id1842 . -1) (undo-tree-id1843 . -1) (undo-tree-id1844 . -1) (undo-tree-id1845 . -1) (undo-tree-id1846 . -1) (undo-tree-id1847 . -1) (undo-tree-id1848 . -1) (undo-tree-id1849 . -1) (undo-tree-id1850 . -1) (undo-tree-id1851 . -1) (undo-tree-id1852 . -1) (undo-tree-id1853 . -1) (undo-tree-id1854 . -1) (undo-tree-id1855 . -1) (undo-tree-id1856 . -1) (undo-tree-id1857 . -1) (undo-tree-id1858 . -1) (undo-tree-id1859 . -1) (undo-tree-id1860 . -1) (undo-tree-id1861 . -1) (undo-tree-id1862 . -1) (undo-tree-id1863 . -1) (undo-tree-id1864 . -1) (undo-tree-id1865 . -1) (#("}" 0 1 (face font-lock-string-face fontified t)) . -1151) (undo-tree-id1866 . -1) (undo-tree-id1867 . -1) (undo-tree-id1868 . -1) (undo-tree-id1869 . -1) (undo-tree-id1870 . -1) (undo-tree-id1871 . -1) (undo-tree-id1872 . -1) (undo-tree-id1873 . -1) (undo-tree-id1874 . -1) (undo-tree-id1875 . -1) (undo-tree-id1876 . -1) (undo-tree-id1877 . -1) (undo-tree-id1878 . -1) (undo-tree-id1879 . -1) (undo-tree-id1880 . -1) (undo-tree-id1881 . -1) (undo-tree-id1882 . -1) (undo-tree-id1883 . -1) (undo-tree-id1884 . -1) (undo-tree-id1885 . -1) (undo-tree-id1886 . -1) (undo-tree-id1887 . -1) (undo-tree-id1888 . -1) (undo-tree-id1889 . -1) (undo-tree-id1890 . -1) (undo-tree-id1891 . -1) (undo-tree-id1892 . -1) (undo-tree-id1893 . -1) (undo-tree-id1894 . -1) (undo-tree-id1895 . -1) (undo-tree-id1896 . -1) (undo-tree-id1897 . -1) (undo-tree-id1898 . -1) (undo-tree-id1899 . -1) (undo-tree-id1900 . -1) (undo-tree-id1901 . -1) (undo-tree-id1902 . -1) (undo-tree-id1903 . -1) (undo-tree-id1904 . -1) (undo-tree-id1905 . -1) (undo-tree-id1906 . -1) (undo-tree-id1907 . -1) (undo-tree-id1908 . -1) (undo-tree-id1909 . -1) (undo-tree-id1910 . -1) (undo-tree-id1911 . -1) (undo-tree-id1912 . -1) (undo-tree-id1913 . -1) (undo-tree-id1914 . -1) (undo-tree-id1915 . -1) (undo-tree-id1916 . -1) (undo-tree-id1917 . -1) (undo-tree-id1918 . -1) (undo-tree-id1919 . -1) (undo-tree-id1920 . -1) (undo-tree-id1921 . -1) (undo-tree-id1922 . -1) (undo-tree-id1923 . -1) (undo-tree-id1924 . -1) (undo-tree-id1925 . -1) (undo-tree-id1926 . -1) (undo-tree-id1927 . -1) (undo-tree-id1928 . -1) (undo-tree-id1929 . -1) (undo-tree-id1930 . -1) (undo-tree-id1931 . -1) (undo-tree-id1932 . -1) (undo-tree-id1933 . -1) (undo-tree-id1934 . -1) (undo-tree-id1935 . -1) (undo-tree-id1936 . -1) (undo-tree-id1937 . -1) (undo-tree-id1938 . -1) (undo-tree-id1939 . -1) (undo-tree-id1940 . -1) (undo-tree-id1941 . -1) (undo-tree-id1942 . -1) (undo-tree-id1943 . -1) (undo-tree-id1944 . -1) (undo-tree-id1945 . -1) (undo-tree-id1946 . -1) (undo-tree-id1947 . -1) (undo-tree-id1948 . -1) (undo-tree-id1949 . -1) (undo-tree-id1950 . -1) (#(")" 0 1 (face font-lock-string-face fontified t)) . -1152) (undo-tree-id1951 . -1) (undo-tree-id1952 . -1) (undo-tree-id1953 . -1) (undo-tree-id1954 . -1) (undo-tree-id1955 . -1) (undo-tree-id1956 . -1) (undo-tree-id1957 . -1) (undo-tree-id1958 . -1) (undo-tree-id1959 . -1) (undo-tree-id1960 . -1) (undo-tree-id1961 . -1) (undo-tree-id1962 . -1) (undo-tree-id1963 . -1) (undo-tree-id1964 . -1) (undo-tree-id1965 . -1) (undo-tree-id1966 . -1) (undo-tree-id1967 . -1) (undo-tree-id1968 . -1) (undo-tree-id1969 . -1) (undo-tree-id1970 . -1) (undo-tree-id1971 . -1) (undo-tree-id1972 . -1) (undo-tree-id1973 . -1) (undo-tree-id1974 . -1) (undo-tree-id1975 . -1) (undo-tree-id1976 . -1) (undo-tree-id1977 . -1) (undo-tree-id1978 . -1) (undo-tree-id1979 . -1) (undo-tree-id1980 . -1) (undo-tree-id1981 . -1) (undo-tree-id1982 . -1) (undo-tree-id1983 . -1) (undo-tree-id1984 . -1) (undo-tree-id1985 . -1) (undo-tree-id1986 . -1) (undo-tree-id1987 . -1) (undo-tree-id1988 . -1) (undo-tree-id1989 . -1) (undo-tree-id1990 . -1) (undo-tree-id1991 . -1) (undo-tree-id1992 . -1) (undo-tree-id1993 . -1) (undo-tree-id1994 . -1) (undo-tree-id1995 . -1) (undo-tree-id1996 . -1) (undo-tree-id1997 . -1) (undo-tree-id1998 . -1) (undo-tree-id1999 . -1) (undo-tree-id2000 . -1) (undo-tree-id2001 . -1) (undo-tree-id2002 . -1) (undo-tree-id2003 . -1) (undo-tree-id2004 . -1) (undo-tree-id2005 . -1) (undo-tree-id2006 . -1) 1153 (t 26370 64543 428371 418000)) nil (26370 64595 483174 657000) 0 nil])
([nil nil ((1144 . 1153)) nil (26370 64595 482832 337000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-string-face fontified t)) . -1148) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (#("r" 0 1 (face font-lock-string-face fontified t)) . -1149) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (#("n" 0 1 (face font-lock-string-face fontified t)) . -1150) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -1151) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (#("_" 0 1 (face font-lock-string-face fontified t)) . -1152) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) 1153) nil (26370 64595 482828 850000) 0 nil])
([nil nil ((1148 . 1153)) nil (26370 64595 482749 389000) 0 nil])
([nil nil ((1145 . 1161) (#("curren" 0 6 (fontified nil)) . -1145) (1145 . 1151) (#("current_position" 0 16 (fontified nil)) . -1145) (1145 . 1161) (#("current_" 0 8 (face font-lock-string-face fontified t)) . -1145) (undo-tree-id494 . -8) (undo-tree-id495 . -8) (undo-tree-id496 . -3) (undo-tree-id497 . -3) (undo-tree-id498 . -3) (undo-tree-id499 . -3) (undo-tree-id500 . -3) (undo-tree-id501 . -3) (undo-tree-id502 . -3) (undo-tree-id503 . -3) (undo-tree-id504 . -3) (undo-tree-id505 . -3) (undo-tree-id506 . -3) (undo-tree-id507 . -3) (undo-tree-id508 . -3) (undo-tree-id509 . -3) (undo-tree-id510 . -3) (undo-tree-id511 . -3) (undo-tree-id512 . -3) (undo-tree-id513 . -3) (undo-tree-id514 . -3) (undo-tree-id515 . -3) (undo-tree-id516 . -3) (undo-tree-id517 . -3) (undo-tree-id518 . -3) (undo-tree-id519 . -3) (undo-tree-id520 . -3) (undo-tree-id521 . -3) (undo-tree-id522 . -3) (undo-tree-id523 . -3) (undo-tree-id524 . -3) (undo-tree-id525 . -3) (undo-tree-id526 . -3) (undo-tree-id527 . -3) (undo-tree-id528 . -3) (undo-tree-id529 . -3) (undo-tree-id530 . -3) (undo-tree-id531 . -3) (undo-tree-id532 . -3) (undo-tree-id533 . -3) (undo-tree-id534 . -3) (undo-tree-id535 . -3) (undo-tree-id536 . -3) (undo-tree-id537 . -3) (undo-tree-id538 . -3) (undo-tree-id539 . -3) (undo-tree-id540 . -3) (undo-tree-id541 . -3) (undo-tree-id542 . -3) (undo-tree-id543 . -3) (undo-tree-id544 . -3) (undo-tree-id545 . -3) (undo-tree-id546 . -3) (undo-tree-id547 . -3) (undo-tree-id548 . -3) (undo-tree-id549 . -3) (undo-tree-id550 . -3) (undo-tree-id551 . -3) (undo-tree-id552 . -3) (undo-tree-id553 . -3) (undo-tree-id554 . -3) (undo-tree-id555 . -3) (undo-tree-id556 . -3) (undo-tree-id557 . -3) (undo-tree-id558 . -3) (undo-tree-id559 . -3) (undo-tree-id560 . -3) (undo-tree-id561 . -3) (undo-tree-id562 . -3) (undo-tree-id563 . -3) (undo-tree-id564 . -3) (undo-tree-id565 . -3) (undo-tree-id566 . -3) (undo-tree-id567 . -3) (undo-tree-id568 . -3) (undo-tree-id569 . -3) (undo-tree-id570 . -3) (undo-tree-id571 . -3) (undo-tree-id572 . -3) (undo-tree-id573 . -3) (undo-tree-id574 . -3) (undo-tree-id575 . -3) (undo-tree-id576 . -3) (undo-tree-id577 . -3) (undo-tree-id578 . -3) (undo-tree-id579 . -3) (undo-tree-id580 . -3) (undo-tree-id581 . -4) (undo-tree-id582 . -4) (undo-tree-id583 . -4) (undo-tree-id584 . -4) (undo-tree-id585 . -4) (undo-tree-id586 . -4) (undo-tree-id587 . -4) (undo-tree-id588 . -4) (undo-tree-id589 . -4) (undo-tree-id590 . -4) (undo-tree-id591 . -4) (undo-tree-id592 . -4) (undo-tree-id593 . -4) (undo-tree-id594 . -4) (undo-tree-id595 . -4) (undo-tree-id596 . -4) (undo-tree-id597 . -4) (undo-tree-id598 . -4) (undo-tree-id599 . -4) (undo-tree-id600 . -4) (undo-tree-id601 . -4) (undo-tree-id602 . -4) (undo-tree-id603 . -4) (undo-tree-id604 . -4) (undo-tree-id605 . -4) (undo-tree-id606 . -4) (undo-tree-id607 . -4) (undo-tree-id608 . -4) (undo-tree-id609 . -4) (undo-tree-id610 . -4) (undo-tree-id611 . -4) (undo-tree-id612 . -4) (undo-tree-id613 . -4) (undo-tree-id614 . -4) (undo-tree-id615 . -4) (undo-tree-id616 . -4) (undo-tree-id617 . -4) (undo-tree-id618 . -4) (undo-tree-id619 . -4) (undo-tree-id620 . -4) (undo-tree-id621 . -4) (undo-tree-id622 . -4) (undo-tree-id623 . -4) (undo-tree-id624 . -4) (undo-tree-id625 . -4) (undo-tree-id626 . -4) (undo-tree-id627 . -4) (undo-tree-id628 . -4) (undo-tree-id629 . -4) (undo-tree-id630 . -4) (undo-tree-id631 . -4) (undo-tree-id632 . -4) (undo-tree-id633 . -5) (undo-tree-id634 . -5) (undo-tree-id635 . -5) (undo-tree-id636 . -5) (undo-tree-id637 . -5) (undo-tree-id638 . -5) (undo-tree-id639 . -5) (undo-tree-id640 . -5) (undo-tree-id641 . -5) (undo-tree-id642 . -5) (undo-tree-id643 . -5) (undo-tree-id644 . -5) (undo-tree-id645 . -5) (undo-tree-id646 . -5) (undo-tree-id647 . -5) (undo-tree-id648 . -5) (undo-tree-id649 . -5) (undo-tree-id650 . -5) (undo-tree-id651 . -5) (undo-tree-id652 . -5) (undo-tree-id653 . -5) (undo-tree-id654 . -5) (undo-tree-id655 . -5) (undo-tree-id656 . -5) (undo-tree-id657 . -5) (undo-tree-id658 . -5) (undo-tree-id659 . -5) (undo-tree-id660 . -5) (undo-tree-id661 . -5) (undo-tree-id662 . -5) (undo-tree-id663 . -5) (undo-tree-id664 . -6) (undo-tree-id665 . -6) (undo-tree-id666 . -6) (undo-tree-id667 . -6) (undo-tree-id668 . -6) (undo-tree-id669 . -6) (undo-tree-id670 . -6) (undo-tree-id671 . -6) (undo-tree-id672 . -6) (undo-tree-id673 . -6) (undo-tree-id674 . -6) (undo-tree-id675 . -6) (undo-tree-id676 . -6) (undo-tree-id677 . -6) (undo-tree-id678 . -6) (undo-tree-id679 . -6) (undo-tree-id680 . -6) (undo-tree-id681 . -6) (undo-tree-id682 . -6) (undo-tree-id683 . -6) (undo-tree-id684 . -6) (undo-tree-id685 . -6) (undo-tree-id686 . -6) (undo-tree-id687 . -7) (undo-tree-id688 . -7) (undo-tree-id689 . -7) (undo-tree-id690 . -7) (undo-tree-id691 . -7) (undo-tree-id692 . -7) (undo-tree-id693 . -7) (undo-tree-id694 . -7) (undo-tree-id695 . -7) (undo-tree-id696 . -7) (undo-tree-id697 . -7) (undo-tree-id698 . -7) (undo-tree-id699 . -7) (undo-tree-id700 . -7) (undo-tree-id701 . -7) (undo-tree-id702 . -7) (undo-tree-id703 . -7) (undo-tree-id704 . -7) (undo-tree-id705 . -7) (undo-tree-id706 . -7) (undo-tree-id707 . -7) (undo-tree-id708 . -7) (undo-tree-id709 . -7) (undo-tree-id710 . -7) (undo-tree-id711 . -7) (undo-tree-id712 . -7) (undo-tree-id713 . -7) (undo-tree-id714 . -7) (undo-tree-id715 . -7) (undo-tree-id716 . -7) (undo-tree-id717 . -7) (undo-tree-id718 . -7) (undo-tree-id719 . -7) (undo-tree-id720 . -7) (undo-tree-id721 . -7) (undo-tree-id722 . -7) (undo-tree-id723 . -7) (undo-tree-id724 . -8) (undo-tree-id725 . -8) (undo-tree-id726 . -8) (undo-tree-id727 . -8) (undo-tree-id728 . -8) (undo-tree-id729 . -8) (undo-tree-id730 . -8) (undo-tree-id731 . -8) (undo-tree-id732 . -8) (undo-tree-id733 . -8) (undo-tree-id734 . -8) (undo-tree-id735 . -8) (undo-tree-id736 . -8) (undo-tree-id737 . -8) (undo-tree-id738 . -8) (undo-tree-id739 . -8) (undo-tree-id740 . -8) (undo-tree-id741 . -8) (undo-tree-id742 . -8) (undo-tree-id743 . -8) (undo-tree-id744 . -8) (undo-tree-id745 . -8) (undo-tree-id746 . -8) (undo-tree-id747 . -8) (undo-tree-id748 . -8) (undo-tree-id749 . -8) (undo-tree-id750 . -8) (undo-tree-id751 . -8) (undo-tree-id752 . -8) (undo-tree-id753 . -8) (undo-tree-id754 . -8) (undo-tree-id755 . -8) 1153) nil (26370 64595 482745 472000) 0 nil])
([nil nil ((1161 . 1162)) nil (26370 64595 482345 473000) 0 nil])
([nil nil ((590 . 607) (t 26370 64595 488590 154000)) nil (26370 64626 789991 444000) 0 nil])
([nil nil ((607 . 623)) nil (26370 64626 789990 773000) 0 nil])
([nil nil ((623 . 631)) nil (26370 64626 789990 91000) 0 nil])
([nil nil ((#("c" 0 1 (face font-lock-string-face fontified t)) . -626) (undo-tree-id2184 . -1) (undo-tree-id2185 . -1) (#("u" 0 1 (face font-lock-string-face fontified t)) . -627) (undo-tree-id2186 . -1) (undo-tree-id2187 . -1) (#("l" 0 1 (face font-lock-string-face fontified t)) . -628) (undo-tree-id2188 . -1) (undo-tree-id2189 . -1) (#("a" 0 1 (face font-lock-string-face fontified t)) . -629) (undo-tree-id2190 . -1) (undo-tree-id2191 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -630) (undo-tree-id2192 . -1) (undo-tree-id2193 . -1) 631) nil (26370 64626 789988 769000) 0 nil])
([nil nil ((626 . 647)) nil (26370 64626 789984 461000) 0 nil])
([nil nil ((647 . 653)) nil (26370 64626 789984 50000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-string-face fontified t)) . -652) (undo-tree-id2180 . -1) (undo-tree-id2181 . -1) (undo-tree-id2182 . -1) (undo-tree-id2183 . -1) 653) nil (26370 64626 789983 178000) 0 nil])
([nil nil ((652 . 656)) nil (26370 64626 789980 683000) 0 nil])
([nil nil ((652 . 668) (#("curr" 0 4 (fontified nil)) . -652) (652 . 656) (#("current_position" 0 16 (fontified nil)) . -652) (652 . 668) (#("curr" 0 4 (face font-lock-string-face fontified t)) . -652) (undo-tree-id2072 . -4) (undo-tree-id2073 . -4) (undo-tree-id2074 . -1) (undo-tree-id2075 . -1) (undo-tree-id2076 . -1) (undo-tree-id2077 . -1) (undo-tree-id2078 . -2) (undo-tree-id2079 . -2) (undo-tree-id2080 . -2) (undo-tree-id2081 . -2) (undo-tree-id2082 . -2) (undo-tree-id2083 . -2) (undo-tree-id2084 . -2) (undo-tree-id2085 . -3) (undo-tree-id2086 . -3) (undo-tree-id2087 . -3) (undo-tree-id2088 . -3) (undo-tree-id2089 . -3) (undo-tree-id2090 . -3) (undo-tree-id2091 . -3) (undo-tree-id2092 . -3) (undo-tree-id2093 . -3) (undo-tree-id2094 . -3) (undo-tree-id2095 . -3) (undo-tree-id2096 . -3) (undo-tree-id2097 . -3) (undo-tree-id2098 . -3) (undo-tree-id2099 . -3) (undo-tree-id2100 . -3) (undo-tree-id2101 . -3) (undo-tree-id2102 . -3) (undo-tree-id2103 . -3) (undo-tree-id2104 . -3) (undo-tree-id2105 . -3) (undo-tree-id2106 . -3) (undo-tree-id2107 . -3) (undo-tree-id2108 . -3) (undo-tree-id2109 . -3) (undo-tree-id2110 . -3) (undo-tree-id2111 . -3) (undo-tree-id2112 . -3) (undo-tree-id2113 . -3) (undo-tree-id2114 . -3) (undo-tree-id2115 . -3) (undo-tree-id2116 . -3) (undo-tree-id2117 . -3) (undo-tree-id2118 . -3) (undo-tree-id2119 . -3) (undo-tree-id2120 . -3) (undo-tree-id2121 . -3) (undo-tree-id2122 . -3) (undo-tree-id2123 . -3) (undo-tree-id2124 . -3) (undo-tree-id2125 . -4) (undo-tree-id2126 . -4) (undo-tree-id2127 . -4) (undo-tree-id2128 . -4) (undo-tree-id2129 . -4) (undo-tree-id2130 . -4) (undo-tree-id2131 . -4) (undo-tree-id2132 . -4) (undo-tree-id2133 . -4) (undo-tree-id2134 . -4) (undo-tree-id2135 . -4) (undo-tree-id2136 . -4) (undo-tree-id2137 . -4) (undo-tree-id2138 . -4) (undo-tree-id2139 . -4) (undo-tree-id2140 . -4) (undo-tree-id2141 . -4) (undo-tree-id2142 . -4) (undo-tree-id2143 . -4) (undo-tree-id2144 . -4) (undo-tree-id2145 . -4) (undo-tree-id2146 . -4) (undo-tree-id2147 . -4) (undo-tree-id2148 . -4) (undo-tree-id2149 . -4) (undo-tree-id2150 . -4) (undo-tree-id2151 . -4) (undo-tree-id2152 . -4) (undo-tree-id2153 . -4) (undo-tree-id2154 . -4) (undo-tree-id2155 . -4) (undo-tree-id2156 . -4) (undo-tree-id2157 . -4) (undo-tree-id2158 . -4) (undo-tree-id2159 . -4) (undo-tree-id2160 . -4) (undo-tree-id2161 . -4) (undo-tree-id2162 . -4) (undo-tree-id2163 . -4) (undo-tree-id2164 . -4) (undo-tree-id2165 . -4) (undo-tree-id2166 . -4) (undo-tree-id2167 . -4) (undo-tree-id2168 . -4) (undo-tree-id2169 . -4) (undo-tree-id2170 . -4) (undo-tree-id2171 . -4) (undo-tree-id2172 . -4) (undo-tree-id2173 . -4) (undo-tree-id2174 . -4) (undo-tree-id2175 . -4) (undo-tree-id2176 . -4) (undo-tree-id2177 . -4) (undo-tree-id2178 . -4) (undo-tree-id2179 . -4) 656) nil (26370 64626 789978 499000) 0 nil])
([nil nil ((668 . 669)) nil (26370 64626 789654 214000) 0 nil])
([nil nil ((669 . 670)) nil (26370 64626 789653 352000) 0 nil])
([nil nil ((#(")" 0 1 (face font-lock-string-face fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -669) (undo-tree-id2007 . -1) (undo-tree-id2008 . -1) (undo-tree-id2009 . -1) (undo-tree-id2010 . -1) (undo-tree-id2011 . -1) (undo-tree-id2012 . -1) (undo-tree-id2013 . -1) (undo-tree-id2014 . -1) (undo-tree-id2015 . -1) (undo-tree-id2016 . -1) (undo-tree-id2017 . -1) (undo-tree-id2018 . -1) (undo-tree-id2019 . -1) (undo-tree-id2020 . -1) (undo-tree-id2021 . -1) (undo-tree-id2022 . -1) (undo-tree-id2023 . -1) (undo-tree-id2024 . -1) (undo-tree-id2025 . -1) (undo-tree-id2026 . -1) (undo-tree-id2027 . -1) (undo-tree-id2028 . -1) (undo-tree-id2029 . -1) (undo-tree-id2030 . -1) (undo-tree-id2031 . -1) (undo-tree-id2032 . -1) (undo-tree-id2033 . -1) (undo-tree-id2034 . -1) (undo-tree-id2035 . -1) (undo-tree-id2036 . -1) (undo-tree-id2037 . -1) (undo-tree-id2038 . -1) (undo-tree-id2039 . -1) (undo-tree-id2040 . -1) (undo-tree-id2041 . -1) (undo-tree-id2042 . -1) (undo-tree-id2043 . -1) (undo-tree-id2044 . -1) (undo-tree-id2045 . -1) (undo-tree-id2046 . -1) (undo-tree-id2047 . -1) (undo-tree-id2048 . -1) (undo-tree-id2049 . -1) (undo-tree-id2050 . -1) (undo-tree-id2051 . -1) (undo-tree-id2052 . -1) (undo-tree-id2053 . -1) (undo-tree-id2054 . -1) (undo-tree-id2055 . -1) (undo-tree-id2056 . -1) (undo-tree-id2057 . -1) (undo-tree-id2058 . -1) (undo-tree-id2059 . -1) (undo-tree-id2060 . -1) (undo-tree-id2061 . -1) (undo-tree-id2062 . -1) (undo-tree-id2063 . -1) (undo-tree-id2064 . -1) (undo-tree-id2065 . -1) (undo-tree-id2066 . -1) (undo-tree-id2067 . -1) (undo-tree-id2068 . -1) (undo-tree-id2069 . -1) (undo-tree-id2070 . -1) (undo-tree-id2071 . -1) 670) nil (26370 64626 789651 188000) 0 nil])
([nil nil ((669 . 671)) nil (26370 64626 789601 294000) 0 nil])
([nil nil ((#("3" 0 1 (face py-number-face fontified t)) . -2581) (undo-tree-id2194 . -1) (undo-tree-id2195 . -1) 2582 (t 26370 64626 797294 99000)) nil (26370 65497 554751 97000) 0 nil])
([nil nil ((2581 . 2582)) nil (26370 65497 554737 291000) 0 nil])
([nil nil ((2618 . 2622) (#("    " 0 4 (fontified t)) . 2618) (t 26370 65497 559817 31000)) nil (26370 65528 982504 110000) 0 nil])
([nil nil ((2622 . 2623)) nil (26370 65528 982503 128000) 0 nil])
([nil nil ((2623 . 2624)) nil (26370 65528 982502 628000) 0 nil])
([nil nil ((2617 . 2622)) nil (26370 65528 982502 277000) 0 nil])
([nil nil ((2622 . 2634)) nil (26370 65528 982501 616000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -2632) (undo-tree-id2278 . -1) (undo-tree-id2279 . -1) (undo-tree-id2280 . -1) (undo-tree-id2281 . -1) (#("e" 0 1 (fontified t)) . -2633) (undo-tree-id2282 . -1) (undo-tree-id2283 . -1) (undo-tree-id2284 . -1) (undo-tree-id2285 . -1) 2634) nil (26370 65528 982500 373000) 0 nil])
([nil nil ((2632 . 2633)) nil (26370 65528 982495 875000) 0 nil])
([nil nil ((2632 . 2642) (#("s" 0 1 (fontified nil)) . -2632) (2632 . 2633) (#("setRewards" 0 10 (fontified nil)) . -2632) (2632 . 2642) (#("s" 0 1 (fontified t)) . -2632) (undo-tree-id2274 . -1) (undo-tree-id2275 . -1) (undo-tree-id2276 . -1) (undo-tree-id2277 . -1) 2633) nil (26370 65528 982495 93000) 0 nil])
([nil nil ((2642 . 2648)) nil (26370 65528 982492 528000) 0 nil])
([nil nil ((2648 . 2667)) nil (26370 65528 982491 957000) 0 nil])
([nil nil ((#("_" 0 1 (face py-builtins-face fontified t match-data (0 1 0 1))) . -2666) (undo-tree-id2196 . -1) (undo-tree-id2197 . -1) (undo-tree-id2198 . -1) (undo-tree-id2199 . -1) (undo-tree-id2200 . -1) (undo-tree-id2201 . -1) (undo-tree-id2202 . -1) (undo-tree-id2203 . -1) (undo-tree-id2204 . -1) (undo-tree-id2205 . -1) (undo-tree-id2206 . -1) (undo-tree-id2207 . -1) (undo-tree-id2208 . -1) (undo-tree-id2209 . -1) (undo-tree-id2210 . -1) (undo-tree-id2211 . -1) (undo-tree-id2212 . -1) (undo-tree-id2213 . -1) (undo-tree-id2214 . -1) (undo-tree-id2215 . -1) (undo-tree-id2216 . -1) (undo-tree-id2217 . -1) (undo-tree-id2218 . -1) (undo-tree-id2219 . -1) (undo-tree-id2220 . -1) (undo-tree-id2221 . -1) (undo-tree-id2222 . -1) (undo-tree-id2223 . -1) (undo-tree-id2224 . -1) (undo-tree-id2225 . -1) (undo-tree-id2226 . -1) (undo-tree-id2227 . -1) (undo-tree-id2228 . -1) (undo-tree-id2229 . -1) (undo-tree-id2230 . -1) (undo-tree-id2231 . -1) (undo-tree-id2232 . -1) (undo-tree-id2233 . -1) (undo-tree-id2234 . -1) (undo-tree-id2235 . -1) (undo-tree-id2236 . -1) (undo-tree-id2237 . -1) (undo-tree-id2238 . -1) (undo-tree-id2239 . -1) (undo-tree-id2240 . -1) (undo-tree-id2241 . -1) (undo-tree-id2242 . -1) (undo-tree-id2243 . -1) (undo-tree-id2244 . -1) (undo-tree-id2245 . -1) (undo-tree-id2246 . -1) (undo-tree-id2247 . -1) (undo-tree-id2248 . -1) (undo-tree-id2249 . -1) (undo-tree-id2250 . -1) (undo-tree-id2251 . -1) (undo-tree-id2252 . -1) (undo-tree-id2253 . -1) (undo-tree-id2254 . -1) (undo-tree-id2255 . -1) (undo-tree-id2256 . -1) (undo-tree-id2257 . -1) (undo-tree-id2258 . -1) (undo-tree-id2259 . -1) (undo-tree-id2260 . -1) (undo-tree-id2261 . -1) (undo-tree-id2262 . -1) (undo-tree-id2263 . -1) (undo-tree-id2264 . -1) (undo-tree-id2265 . -1) (undo-tree-id2266 . -1) (undo-tree-id2267 . -1) (undo-tree-id2268 . -1) (undo-tree-id2269 . -1) (undo-tree-id2270 . -1) (undo-tree-id2271 . -1) (undo-tree-id2272 . -1) (undo-tree-id2273 . -1) 2667) nil (26370 65528 982490 104000) 0 nil])
([nil nil ((2666 . 2667)) nil (26370 65528 982443 686000) 0 nil])
([nil nil ((498 . 500) (t 26370 65528 987240 656000)) nil (26371 10 198332 935000) 0 nil])
([nil current ((549 . 551)) nil (26371 10 198328 136000) 0 nil])
nil
