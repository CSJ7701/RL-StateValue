(undo-tree-save-format-version . 1)
"28df17c1ceb7e4e9c0367e6aaac0d4502603c1d1"
[nil nil nil nil (26368 21984 361460 231000) 0 nil]
([nil nil ((1 . 6) (t 26368 21951 909517 511000)) nil (26368 21984 361459 88000) 0 nil])
([nil nil ((6 . 12)) nil (26368 21984 361458 587000) 0 nil])
([nil nil ((6 . 19) (#("rl_s" 0 4 (fontified nil)) . -6) (6 . 10) (#("rl_statevalue" 0 13 (fontified nil)) . -6) (6 . 19) (#("rl_sta" 0 6 (fontified t)) . -6) (undo-tree-id110 . -6) (undo-tree-id111 . -6) (undo-tree-id112 . -6) (undo-tree-id113 . -6) 12) nil (26368 21984 361457 606000) 0 nil])
([nil nil ((19 . 32)) nil (26368 21984 361455 892000) 0 nil])
([nil nil ((27 . 32) (#("Age" 0 3 (fontified nil)) . -27) (27 . 30) (#("Agent" 0 5 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -27) (undo-tree-id106 . -5) (undo-tree-id107 . -5) (undo-tree-id108 . -5) (undo-tree-id109 . -5) 32) nil (26368 21984 361454 941000) 0 nil])
([nil nil ((32 . 33)) nil (26368 21984 361453 117000) 0 nil])
([nil nil ((33 . 42)) nil (26368 21984 361452 396000) 0 nil])
([nil nil ((33 . 34)) nil (26368 21984 361451 664000) 0 nil])
([nil nil ((43 . 45)) nil (26368 21984 361451 103000) 0 nil])
([nil nil ((#("," 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -44) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) 45) nil (26368 21984 361450 71000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . 43) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) 44) nil (26368 21984 361311 19000) 0 nil])
([nil nil ((43 . 49)) nil (26368 21984 361300 970000) 0 nil])
([nil nil ((45 . 49) (#("Gri" 0 3 (fontified nil)) . -45) (45 . 48) (#("Grid" 0 4 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -45) (undo-tree-id0 . -4) (undo-tree-id1 . -4) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -2) (undo-tree-id16 . -2) (undo-tree-id17 . -2) (undo-tree-id18 . -2) (undo-tree-id19 . -2) (undo-tree-id20 . -2) (undo-tree-id21 . -2) (undo-tree-id22 . -3) (undo-tree-id23 . -3) (undo-tree-id24 . -3) (undo-tree-id25 . -3) (undo-tree-id26 . -3) (undo-tree-id27 . -3) (undo-tree-id28 . -3) (undo-tree-id29 . -4) (undo-tree-id30 . -4) (undo-tree-id31 . -4) (undo-tree-id32 . -4) (undo-tree-id33 . -4) (undo-tree-id34 . -4) (undo-tree-id35 . -4) (undo-tree-id36 . -4) (undo-tree-id37 . -4) (undo-tree-id38 . -4) (undo-tree-id39 . -4) (undo-tree-id40 . -4) (undo-tree-id41 . -4) (undo-tree-id42 . -4) (undo-tree-id43 . -4) (undo-tree-id44 . -4) (undo-tree-id45 . -4) (undo-tree-id46 . -4) (undo-tree-id47 . -4) (undo-tree-id48 . -4) (undo-tree-id49 . -4) (undo-tree-id50 . -4) (undo-tree-id51 . -4) (undo-tree-id52 . -4) (undo-tree-id53 . -4) (undo-tree-id54 . -4) (undo-tree-id55 . -4) (undo-tree-id56 . -4) (undo-tree-id57 . -4) (undo-tree-id58 . -4) (undo-tree-id59 . -4) (undo-tree-id60 . -4) (undo-tree-id61 . -4) (undo-tree-id62 . -4) 49) nil (26368 21984 361299 147000) 0 nil])
([nil nil ((49 . 50)) nil (26368 21984 361252 148000) 0 nil])
([nil nil ((#("G" 0 1 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -45) (undo-tree-id325 . -1) (#("r" 0 1 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -46) (undo-tree-id326 . -1) (#("i" 0 1 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -47) (undo-tree-id327 . -1) (#("d" 0 1 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -48) (undo-tree-id328 . -1) 49 (t 26368 21984 362781 448000)) nil (26368 22007 186511 933000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . 44) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) 45) nil (26368 22007 186510 420000) 0 nil])
([nil nil ((#("D" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -34) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (#("i" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -35) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (#("r" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -36) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (#("e" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -37) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (#("c" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -38) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (#("t" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -39) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (#("i" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -40) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (#("o" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -41) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (#("n" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -42) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (#("," 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -43) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) 44) nil (26368 22007 186507 525000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . 33) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) 34) nil (26368 22007 186487 908000) 0 nil])
([nil nil ((#("A" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -27) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (#("g" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -28) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (#("e" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -29) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (#("n" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -30) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (#("t" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -31) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (#("," 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -32) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) 33) nil (26368 22007 186484 842000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . 26) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) 27) nil (26368 22007 186357 542000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -20) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (#("m" 0 1 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -21) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (#("p" 0 1 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -22) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (#("o" 0 1 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -23) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (#("r" 0 1 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -24) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (#("t" 0 1 (face py-import-from-face fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -25) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) 26) nil (26368 22007 186354 647000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . 19) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) 20) nil (26368 22007 186344 167000) 0 nil])
([nil nil ((19 . 20)) nil (26368 22007 186342 704000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -19) (undo-tree-id194 . -1) 20) nil (26368 22007 186342 424000) 0 nil])
([nil nil ((19 . 40)) nil (26368 22007 186341 602000) 0 nil])
([nil nil ((40 . 49)) nil (26368 22007 186341 362000) 0 nil])
([nil nil ((40 . 49) (#("Dir" 0 3 (fontified nil)) . -40) (40 . 43) (#("Direction" 0 9 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -40) (undo-tree-id190 . -9) (undo-tree-id191 . -9) (undo-tree-id192 . -9) (undo-tree-id193 . -9) 49) nil (26368 22007 186340 510000) 0 nil])
([nil nil ((49 . 50)) nil (26368 22007 186337 985000) 0 nil])
([nil nil ((50 . 58)) nil (26368 22007 186337 83000) 0 nil])
([nil nil ((55 . 68) (#("rl_" 0 3 (fontified nil)) . -55) (55 . 58) (#("rl_statevalue" 0 13 (fontified nil)) . -55) (55 . 68) (#("rl_" 0 3 (fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -55) (undo-tree-id186 . -3) (undo-tree-id187 . -3) (undo-tree-id188 . -3) (undo-tree-id189 . -3) 58) nil (26368 22007 186335 961000) 0 nil])
([nil nil ((68 . 85)) nil (26368 22007 186333 557000) 0 nil])
([nil nil ((81 . 85) (#("Gri" 0 3 (fontified nil)) . -81) (81 . 84) (#("Grid" 0 4 (fontified t match-data (0 3 0 1 1 2 2 3))) . -81) (undo-tree-id114 . -4) (undo-tree-id115 . -4) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -2) (undo-tree-id130 . -2) (undo-tree-id131 . -2) (undo-tree-id132 . -2) (undo-tree-id133 . -2) (undo-tree-id134 . -2) (undo-tree-id135 . -2) (undo-tree-id136 . -3) (undo-tree-id137 . -3) (undo-tree-id138 . -3) (undo-tree-id139 . -3) (undo-tree-id140 . -3) (undo-tree-id141 . -3) (undo-tree-id142 . -3) (undo-tree-id143 . -3) (undo-tree-id144 . -3) (undo-tree-id145 . -3) (undo-tree-id146 . -3) (undo-tree-id147 . -3) (undo-tree-id148 . -3) (undo-tree-id149 . -3) (undo-tree-id150 . -4) (undo-tree-id151 . -4) (undo-tree-id152 . -4) (undo-tree-id153 . -4) (undo-tree-id154 . -4) (undo-tree-id155 . -4) (undo-tree-id156 . -4) (undo-tree-id157 . -4) (undo-tree-id158 . -4) (undo-tree-id159 . -4) (undo-tree-id160 . -4) (undo-tree-id161 . -4) (undo-tree-id162 . -4) (undo-tree-id163 . -4) (undo-tree-id164 . -4) (undo-tree-id165 . -4) (undo-tree-id166 . -4) (undo-tree-id167 . -4) (undo-tree-id168 . -4) (undo-tree-id169 . -4) (undo-tree-id170 . -4) (undo-tree-id171 . -4) (undo-tree-id172 . -4) (undo-tree-id173 . -4) (undo-tree-id174 . -4) (undo-tree-id175 . -4) (undo-tree-id176 . -4) (undo-tree-id177 . -4) (undo-tree-id178 . -4) (undo-tree-id179 . -4) (undo-tree-id180 . -4) (undo-tree-id181 . -4) (undo-tree-id182 . -4) (undo-tree-id183 . -4) (undo-tree-id184 . -4) (undo-tree-id185 . -4) 85) nil (26368 22007 186329 529000) 0 nil])
([nil nil ((85 . 87) (t 26368 22007 186969 203000)) nil (26368 22090 233612 675000) 0 nil])
([nil nil ((87 . 96)) nil (26368 22090 233612 94000) 0 nil])
([nil nil ((96 . 100)) nil (26368 22090 233611 342000) 0 nil])
([nil nil ((100 . 101)) nil (26368 22090 233610 611000) 0 nil])
([nil nil ((101 . 106)) nil (26368 22090 233609 819000) 0 nil])
([nil nil ((106 . 108)) nil (26368 22090 233608 948000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -107) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) 108) nil (26368 22090 233607 996000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -106) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) 107) nil (26368 22090 233604 860000) 0 nil])
([nil nil ((106 . 121)) nil (26368 22090 233602 446000) 0 nil])
([nil nil ((121 . 122)) nil (26368 22090 233602 105000) 0 nil])
([nil nil ((122 . 131)) nil (26368 22090 233601 574000) 0 nil])
([nil nil ((119 . 123)) nil (26368 22090 233601 233000) 0 nil])
([nil nil ((135 . 138)) nil (26368 22090 233600 943000) 0 nil])
([nil nil ((140 . 148) (#("        " 0 8 (fontified nil match-data (0 4 0 1 1 2 2 3 3 4))) . 139) (undo-tree-id341 . -8) (undo-tree-id342 . -8) (undo-tree-id343 . -8) (undo-tree-id344 . -8) (undo-tree-id345 . -8) (undo-tree-id346 . -8) (138 . 148)) nil (26368 22090 233600 402000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . 144) (undo-tree-id329 . -4) (undo-tree-id330 . -4) (undo-tree-id331 . -4) (undo-tree-id332 . -4) (undo-tree-id333 . -4) (undo-tree-id334 . -4) (undo-tree-id335 . -4) (undo-tree-id336 . -4) (undo-tree-id337 . -4) (undo-tree-id338 . -4) (undo-tree-id339 . -4) (undo-tree-id340 . -4) 148) nil (26368 22090 233594 841000) 0 nil])
([nil nil ((123 . 130) (t 26368 22090 235665 969000)) nil (26368 25583 649477 633000) 0 nil])
([nil nil ((130 . 131)) nil (26368 25583 649476 932000) 0 nil])
([nil nil ((131 . 137)) nil (26368 25583 649476 290000) 0 nil])
([nil nil ((137 . 143)) nil (26368 25583 649475 719000) 0 nil])
([nil nil ((143 . 144)) nil (26368 25583 649475 349000) 0 nil])
([nil nil ((144 . 149)) nil (26368 25583 649475 48000) 0 nil])
([nil nil ((145 . 149) (#("Gri" 0 3 (fontified nil)) . -145) (145 . 148) (#("Grid" 0 4 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -145) (undo-tree-id368 . -4) (undo-tree-id369 . -4) (undo-tree-id370 . -4) (undo-tree-id371 . -4) 149) nil (26368 25583 649474 587000) 0 nil])
([nil nil ((#("." 0 1 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -161) (undo-tree-id365 . -1) (#("." 0 1 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -162) (undo-tree-id366 . -1) (#("." 0 1 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -163) (undo-tree-id367 . -1) 164) nil (26368 25583 649471 421000) 0 nil])
([nil nil ((161 . 179)) nil (26368 25583 649468 997000) 0 nil])
([nil nil ((174 . 179) (#("Age" 0 3 (fontified nil)) . -174) (174 . 177) (#("Agent" 0 5 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -174) (undo-tree-id361 . -5) (undo-tree-id362 . -5) (undo-tree-id363 . -5) (undo-tree-id364 . -5) 179) nil (26368 25583 649468 125000) 0 nil])
([nil nil ((179 . 188)) nil (26368 25583 649464 458000) 0 nil])
([nil nil ((188 . 194)) nil (26368 25583 649463 647000) 0 nil])
([nil nil ((#("f" 0 1 (face py-object-reference-face fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -191) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (#("g" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -192) (undo-tree-id359 . -1) (#("." 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -193) (undo-tree-id360 . -1) 194) nil (26368 25583 649462 244000) 0 nil])
([nil nil ((191 . 204)) nil (26368 25583 649446 725000) 0 nil])
([nil nil ((149 . 165) (t 26368 25583 651361 506000)) nil (26368 25849 319076 690000) 0 nil])
([nil nil ((165 . 166)) nil (26368 25849 319076 480000) 0 nil])
([nil nil ((166 . 176)) nil (26368 25849 319076 229000) 0 nil])
([nil nil ((176 . 178)) nil (26368 25849 319075 989000) 0 nil])
([nil nil ((233 . 242)) nil (26368 25849 319075 448000) 0 nil])
([nil nil ((242 . 252)) nil (26368 25849 319075 227000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -251) (undo-tree-id470 . -1) 252) nil (26368 25849 319074 836000) 0 nil])
([nil nil ((251 . 255)) nil (26368 25849 319074 295000) 0 nil])
([nil nil ((255 . 257)) nil (26368 25849 319074 45000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -255) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (#("i" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -256) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) 257) nil (26368 25849 319073 304000) 0 nil])
([nil nil ((157 . 158)) nil (26368 25849 319070 238000) 0 nil])
([nil nil ((256 . 259)) nil (26368 25849 319069 326000) 0 nil])
([nil nil ((256 . 271) (#("dis" 0 3 (fontified nil)) . -256) (256 . 259) (#("discount_factor" 0 15 (fontified nil)) . -256) (256 . 271) (#("dis" 0 3 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -256) (undo-tree-id372 . -3) (undo-tree-id373 . -3) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -2) (undo-tree-id396 . -2) (undo-tree-id397 . -2) (undo-tree-id398 . -2) (undo-tree-id399 . -2) (undo-tree-id400 . -2) (undo-tree-id401 . -2) (undo-tree-id402 . -2) (undo-tree-id403 . -2) (undo-tree-id404 . -2) (undo-tree-id405 . -2) (undo-tree-id406 . -2) (undo-tree-id407 . -2) (undo-tree-id408 . -2) (undo-tree-id409 . -2) (undo-tree-id410 . -2) (undo-tree-id411 . -2) (undo-tree-id412 . -2) (undo-tree-id413 . -2) (undo-tree-id414 . -3) (undo-tree-id415 . -3) (undo-tree-id416 . -3) (undo-tree-id417 . -3) (undo-tree-id418 . -3) (undo-tree-id419 . -3) (undo-tree-id420 . -3) (undo-tree-id421 . -3) (undo-tree-id422 . -3) (undo-tree-id423 . -3) (undo-tree-id424 . -3) (undo-tree-id425 . -3) (undo-tree-id426 . -3) (undo-tree-id427 . -3) (undo-tree-id428 . -3) (undo-tree-id429 . -3) (undo-tree-id430 . -3) (undo-tree-id431 . -3) (undo-tree-id432 . -3) (undo-tree-id433 . -3) (undo-tree-id434 . -3) (undo-tree-id435 . -3) (undo-tree-id436 . -3) (undo-tree-id437 . -3) (undo-tree-id438 . -3) (undo-tree-id439 . -3) (undo-tree-id440 . -3) (undo-tree-id441 . -3) (undo-tree-id442 . -3) (undo-tree-id443 . -3) (undo-tree-id444 . -3) (undo-tree-id445 . -3) (undo-tree-id446 . -3) (undo-tree-id447 . -3) (undo-tree-id448 . -3) (undo-tree-id449 . -3) (undo-tree-id450 . -3) (undo-tree-id451 . -3) (undo-tree-id452 . -3) (undo-tree-id453 . -3) (undo-tree-id454 . -3) (undo-tree-id455 . -3) (undo-tree-id456 . -3) (undo-tree-id457 . -3) (undo-tree-id458 . -3) (undo-tree-id459 . -3) (undo-tree-id460 . -3) (undo-tree-id461 . -3) 259) nil (26368 25849 319064 417000) 0 nil])
([nil nil ((274 . 282) (#("        " 0 8 (fontified nil match-data (0 3 0 1 1 2 2 3))) . 273) (undo-tree-id478 . -8) (273 . 282) (#("        " 0 8 (fontified nil match-data (0 3 0 1 1 2 2 3))) . 272) (undo-tree-id479 . -8) (271 . 281) (t 26368 25849 319811 362000)) nil (26368 25923 1580 32000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t match-data (0 3 0 1 1 2 2 3))) . 278) (undo-tree-id477 . -4) 282) nil (26368 25923 1578 569000) 0 nil])
([nil nil ((278 . 299)) nil (26368 25923 1577 938000) 0 nil])
([nil nil ((299 . 305)) nil (26368 25923 1577 698000) 0 nil])
([nil nil ((305 . 306)) nil (26368 25923 1577 457000) 0 nil])
([nil nil ((306 . 315)) nil (26368 25923 1576 896000) 0 nil])
([nil nil ((315 . 318)) nil (26368 25923 1576 215000) 0 nil])
([nil nil ((320 . 328) (#("        " 0 8 (fontified nil match-data (0 3 0 1 1 2 2 3))) . 319) (undo-tree-id476 . -8) (318 . 328)) nil (26368 25923 1575 514000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t match-data (0 3 0 1 1 2 2 3))) . 324) (undo-tree-id475 . -4) 328) nil (26368 25923 1574 51000) 0 nil])
([nil nil ((324 . 329)) nil (26368 25923 1572 528000) 0 nil])
([nil nil ((#("f" 0 1 (face py-def-face fontified t match-data (0 3 0 1 1 2 2 3))) . -328) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) 329) nil (26368 25923 1571 476000) 0 nil])
([nil nil ((328 . 346)) nil (26368 25923 1560 195000) 0 nil])
([nil nil ((346 . 347)) nil (26368 25923 1559 423000) 0 nil])
([nil nil ((347 . 356)) nil (26368 25923 1558 732000) 0 nil])
([nil nil ((356 . 359)) nil (26368 25923 1553 913000) 0 nil])
([nil nil ((361 . 369) (#("        " 0 8 (fontified nil match-data (0 3 0 1 1 2 2 3))) . 360) (undo-tree-id528 . -8) (359 . 369) (t 26368 25923 3726 633000)) nil (26368 26088 546023 956000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t match-data (0 3 0 1 1 2 2 3))) . 365) (undo-tree-id527 . -4) 369) nil (26368 26088 546022 944000) 0 nil])
([nil nil ((365 . 384)) nil (26368 26088 546022 13000) 0 nil])
([nil nil ((#("r" 0 1 (face py-def-face fontified t match-data (0 3 0 1 1 2 2 3))) . -380) (undo-tree-id523 . -1) (#("i" 0 1 (face py-def-face fontified t match-data (0 3 0 1 1 2 2 3))) . -381) (undo-tree-id524 . -1) (#("o" 0 1 (face py-def-face fontified t match-data (0 3 0 1 1 2 2 3))) . -382) (undo-tree-id525 . -1) (#("n" 0 1 (face py-def-face fontified t match-data (0 3 0 1 1 2 2 3))) . -383) (undo-tree-id526 . -1) 384) nil (26368 26088 546021 1000) 0 nil])
([nil nil ((380 . 390)) nil (26368 26088 546019 408000) 0 nil])
([nil nil ((390 . 391)) nil (26368 26088 546019 177000) 0 nil])
([nil nil ((391 . 400)) nil (26368 26088 546018 867000) 0 nil])
([nil nil ((400 . 403)) nil (26368 26088 546018 596000) 0 nil])
([nil nil ((#("    def getValidActions(self):
        ..." 0 4 (fontified t match-data (0 3 0 1 1 2 2 3)) 4 7 (face py-def-class-face fontified t match-data (0 3 0 1 1 2 2 3)) 7 8 (fontified t match-data (0 3 0 1 1 2 2 3)) 8 23 (face py-def-face fontified t match-data (0 3 0 1 1 2 2 3)) 23 24 (face (rainbow-delimiters-depth-1-face) fontified t match-data (0 3 0 1 1 2 2 3)) 24 28 (face py-object-reference-face fontified t match-data (0 3 0 1 1 2 2 3)) 28 29 (face (rainbow-delimiters-depth-1-face) fontified t match-data (0 3 0 1 1 2 2 3)) 29 31 (fontified t match-data (0 3 0 1 1 2 2 3)) 31 42 (fontified t match-data (0 3 0 1 1 2 2 3))) . 361) (undo-tree-id517 . -8) (undo-tree-id518 . -11) (undo-tree-id519 . -11) (undo-tree-id520 . -42) (undo-tree-id521 . -42) (undo-tree-id522 . -11)) nil (26368 26088 546017 875000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -360) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) 361) nil (26368 26088 546014 819000) 0 nil])
([nil nil ((307 . 308)) nil (26368 26088 546012 374000) 0 nil])
([nil nil ((307 . 315)) nil (26368 26088 546012 94000) 0 nil])
([nil nil ((315 . 319)) nil (26368 26088 546011 803000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . 318) (undo-tree-id509 . -1) 319) nil (26368 26088 546011 443000) 0 nil])
([nil nil ((318 . 337)) nil (26368 26088 546010 841000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . 336) (undo-tree-id508 . -1) 337) nil (26368 26088 546010 330000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -335) (undo-tree-id507 . -1) 336) nil (26368 26088 546009 509000) 0 nil])
([nil nil ((335 . 337)) nil (26368 26088 546008 447000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -335) (undo-tree-id505 . -1) (#("s" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -336) (undo-tree-id506 . -1) 337) nil (26368 26088 546007 846000) 0 nil])
([nil nil ((#("v" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -331) (undo-tree-id501 . -1) (#("e" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -332) (undo-tree-id502 . -1) (#("l" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -333) (undo-tree-id503 . -1) (#("u" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -334) (undo-tree-id504 . -1) 335) nil (26368 26088 546006 173000) 0 nil])
([nil nil ((331 . 332)) nil (26368 26088 546003 87000) 0 nil])
([nil nil ((332 . 353)) nil (26368 26088 546002 846000) 0 nil])
([nil nil ((353 . 366)) nil (26368 26088 546002 396000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -362) (undo-tree-id497 . -1) (#("'" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -363) (undo-tree-id498 . -1) (#("\"" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -364) (undo-tree-id499 . -1) (#("\"" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -365) (undo-tree-id500 . -1) 366) nil (26368 26088 546001 915000) 0 nil])
([nil nil ((362 . 365)) nil (26368 26088 546000 31000) 0 nil])
([nil nil ((#("." 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -374) (undo-tree-id494 . -1) (#("." 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -375) (undo-tree-id495 . -1) (#("." 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -376) (undo-tree-id496 . -1) 377) nil (26368 26088 545999 500000) 0 nil])
([nil nil ((374 . 395)) nil (26368 26088 545998 47000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -393) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (#("." 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -394) (undo-tree-id492 . -1) (undo-tree-id493 . -1) 395) nil (26368 26088 545997 486000) 0 nil])
([nil nil ((393 . 395)) nil (26368 26088 545995 563000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -394) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) 395) nil (26368 26088 545994 911000) 0 nil])
([nil nil ((394 . 400)) nil (26368 26088 545993 18000) 0 nil])
([nil nil ((400 . 409)) nil (26368 26088 545992 727000) 0 nil])
([nil nil ((409 . 410)) nil (26368 26088 545992 477000) 0 nil])
([nil nil ((410 . 423)) nil (26368 26088 545992 206000) 0 nil])
([nil nil ((#("G" 0 1 (face py-variable-name-face fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -223) (undo-tree-id484 . -1) (undo-tree-id485 . -1) 224) nil (26368 26088 545991 846000) 0 nil])
([nil nil ((223 . 224)) nil (26368 26088 545990 192000) 0 nil])
([nil nil ((223 . 227) (#("g" 0 1 (fontified nil)) . -223) (223 . 224) (#("grid" 0 4 (fontified nil)) . -223) (223 . 227) (#("g" 0 1 (face py-variable-name-face fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -223) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) 224) nil (26368 26088 545989 331000) 0 nil])
([nil nil ((#("d" 0 1 (face py-variable-name-face fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . 227) (#("i" 0 1 (face py-variable-name-face fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . 227) (#("r" 0 1 (face py-variable-name-face fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . 227)) nil (26368 26088 545974 12000) 0 nil])
([nil nil ((#("A" 0 1 (face py-variable-name-face fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -196) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) 197 (t 26368 26088 547736 126000)) nil (26368 26091 810323 24000) 0 nil])
([nil nil ((196 . 197)) nil (26368 26091 810301 874000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . 142) (t 26368 26091 811775 186000)) nil (26368 26129 375764 675000) 0 nil])
([nil nil ((142 . 143)) nil (26368 26129 375764 364000) 0 nil])
([nil nil ((#("g" 0 1 (face py-variable-name-face fontified t match-data (0 1 0 1))) . -223) (undo-tree-id591 . -1) (undo-tree-id592 . -1) 224) nil (26368 26129 375763 963000) 0 nil])
([nil nil ((223 . 224)) nil (26368 26129 375763 112000) 0 nil])
([nil nil ((223 . 227) (#("G" 0 1 (fontified nil)) . -223) (223 . 224) (#("Grid" 0 4 (fontified nil)) . -223) (223 . 227) (#("G" 0 1 (face py-variable-name-face fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -223) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) 224) nil (26368 26129 375762 330000) 0 nil])
([nil nil ((#("r" 0 1 (face py-variable-name-face fontified t match-data (0 1 0 1))) . -224) (undo-tree-id584 . -1) (#("i" 0 1 (face py-variable-name-face fontified t match-data (0 1 0 1))) . -225) (undo-tree-id585 . -1) (#("d" 0 1 (face py-variable-name-face fontified t match-data (0 1 0 1))) . -226) (undo-tree-id586 . -1) 227) nil (26368 26129 375759 856000) 0 nil])
([nil nil ((#("a" 0 1 (face py-variable-name-face fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -196) (undo-tree-id583 . -1) 197) nil (26368 26129 375757 722000) 0 nil])
([nil nil ((196 . 197)) nil (26368 26129 375757 20000) 0 nil])
([nil nil ((#("g" 0 1 (face py-variable-name-face fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . 248)) nil (26368 26129 375756 640000) 0 nil])
([nil nil ((248 . 249)) nil (26368 26129 375756 349000) 0 nil])
([nil nil ((232 . 233)) nil (26368 26129 375756 89000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -232) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) 233) nil (26368 26129 375755 688000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -231) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) 232) nil (26368 26129 375753 794000) 0 nil])
([nil nil ((#("G" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -230) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) 231) nil (26368 26129 375752 31000) 0 nil])
([nil nil ((230 . 232)) nil (26368 26129 375750 488000) 0 nil])
([nil nil ((230 . 234) (#("gr" 0 2 (fontified nil)) . -230) (230 . 232) (#("Grid" 0 4 (fontified nil)) . -230) (230 . 234) (#("gr" 0 2 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -230) (undo-tree-id567 . -2) (undo-tree-id568 . -2) (undo-tree-id569 . -2) (undo-tree-id570 . -2) 232) nil (26368 26129 375749 807000) 0 nil])
([nil nil ((#("G" 0 1 (fontified t match-data (0 2 0 1 1 2))) . -230) (undo-tree-id563 . -1) (#("r" 0 1 (fontified t match-data (0 2 0 1 1 2))) . -231) (undo-tree-id564 . -1) (#("i" 0 1 (fontified t match-data (0 2 0 1 1 2))) . -232) (undo-tree-id565 . -1) (#("d" 0 1 (fontified t match-data (0 2 0 1 1 2))) . -233) (undo-tree-id566 . -1) 234) nil (26368 26129 375747 402000) 0 nil])
([nil nil ((230 . 232)) nil (26368 26129 375745 709000) 0 nil])
([nil nil ((234 . 235)) nil (26368 26129 375745 458000) 0 nil])
([nil nil ((#("A" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -204) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) 205) nil (26368 26129 375744 787000) 0 nil])
([nil nil ((204 . 205)) nil (26368 26129 375427 909000) 0 nil])
([nil nil ((209 . 210)) nil (26368 26129 375424 152000) 0 nil])
([nil nil ((412 . 425) (t 26368 26129 378223 429000)) nil (26368 26146 291714 549000) 0 nil])
([nil nil ((425 . 446)) nil (26368 26146 291713 788000) 0 nil])
([nil nil ((446 . 455)) nil (26368 26146 291713 337000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -451) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (#("m" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -452) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (#("e" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -453) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (#("n" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -454) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) 455) nil (26368 26146 291710 802000) 0 nil])
([nil nil ((451 . 460)) nil (26368 26146 291645 228000) 0 nil])
([nil nil ((460 . 461)) nil (26368 26146 291644 838000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -460) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) 461) nil (26368 26146 291643 996000) 0 nil])
([nil nil ((460 . 461)) nil (26368 26146 291590 786000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -460) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) 461) nil (26368 26146 291589 944000) 0 nil])
([nil nil ((460 . 461)) nil (26368 26146 291568 694000) 0 nil])
([nil nil ((461 . 478) (t 26368 26146 294424 483000)) nil (26368 26149 902656 387000) 0 nil])
([nil nil ((478 . 481)) nil (26368 26149 902651 929000) 0 nil])
([nil nil ((#("." 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -478) (undo-tree-id825 . -1) (#("." 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -479) (undo-tree-id826 . -1) (#("." 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -480) (undo-tree-id827 . -1) 481 (t 26368 26149 904467 324000)) nil (26368 26201 495894 352000) 0 nil])
([nil nil ((478 . 499)) nil (26368 26201 495892 739000) 0 nil])
([nil nil ((499 . 501)) nil (26368 26201 495892 489000) 0 nil])
([nil nil ((492 . 501) (#("Dir" 0 3 (fontified nil)) . -492) (492 . 495) (#("Direction" 0 9 (fontified t match-data (0 3 0 1 1 2 2 3))) . -492) (undo-tree-id821 . -9) (undo-tree-id822 . -9) (undo-tree-id823 . -9) (undo-tree-id824 . -9) 501) nil (26368 26201 495891 346000) 0 nil])
([nil nil ((501 . 502)) nil (26368 26201 495880 877000) 0 nil])
([nil nil ((502 . 523)) nil (26368 26201 495876 749000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -584) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) 585 (t 26368 26201 498077 445000)) nil (26368 26370 626436 966000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -580) (undo-tree-id844 . -4) (undo-tree-id845 . -4) (undo-tree-id846 . -4) (undo-tree-id847 . -4) (undo-tree-id848 . -4) (undo-tree-id849 . -4) (undo-tree-id850 . -4) 584) nil (26368 26370 626431 35000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -579) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) 580) nil (26368 26370 626427 38000) 0 nil])
([nil nil ((579 . 587)) nil (26368 26370 626422 690000) 0 nil])
([nil nil ((580 . 588) (#("        " 0 8 (fontified nil match-data (0 4 0 1 1 2 2 3 3 4))) . 579) (undo-tree-id836 . -8) (587 . 588)) nil (26368 26370 626421 668000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . 584) (undo-tree-id835 . -4) 588) nil (26368 26370 626420 35000) 0 nil])
([nil nil ((584 . 597)) nil (26368 26370 626418 492000) 0 nil])
([nil nil ((#("z" 0 1 (face py-def-face fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -595) (undo-tree-id833 . -1) (#("x" 0 1 (face py-def-face fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -596) (undo-tree-id834 . -1) 597) nil (26368 26370 626417 319000) 0 nil])
([nil nil ((595 . 597)) nil (26368 26370 626414 694000) 0 nil])
([nil nil ((597 . 603)) nil (26368 26370 626413 983000) 0 nil])
([nil nil ((603 . 604)) nil (26368 26370 626413 192000) 0 nil])
([nil nil ((604 . 613)) nil (26368 26370 626412 270000) 0 nil])
([nil nil ((613 . 624)) nil (26368 26370 626411 468000) 0 nil])
([nil nil ((603 . 612)) nil (26368 26370 626410 807000) 0 nil])
([nil nil ((607 . 612) (#("flo" 0 3 (fontified nil)) . -607) (607 . 610) (#("float" 0 5 (face py-builtins-face fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -607) (undo-tree-id829 . -5) (undo-tree-id830 . -5) (undo-tree-id831 . -5) (undo-tree-id832 . -5) 612) nil (26368 26370 626409 715000) 0 nil])
([nil nil ((635 . 639) (#("    " 0 4 (fontified nil match-data (0 4 0 1 1 2 2 3 3 4))) . 634) (undo-tree-id828 . -4) (633 . 639)) nil (26368 26370 626405 978000) 0 nil])
([nil nil ((639 . 660)) nil (26368 26370 626397 772000) 0 nil])
([nil nil ((660 . 661)) nil (26368 26370 626397 91000) 0 nil])
([nil nil ((661 . 669)) nil (26368 26370 626396 149000) 0 nil])
([nil nil ((669 . 670)) nil (26368 26370 626395 428000) 0 nil])
([nil nil ((670 . 679)) nil (26368 26370 626394 617000) 0 nil])
([nil nil ((679 . 682)) nil (26368 26370 626393 775000) 0 nil])
([nil nil ((682 . 683)) nil (26368 26370 626389 397000) 0 nil])
([nil nil ((274 . 282) (t 26368 26370 628052 95000)) nil (26368 26414 533440 683000) 0 nil])
([nil nil ((478 . 479)) nil (26368 26414 533439 841000) 0 nil])
([nil nil ((479 . 491) (#("        " 0 8 (fontified t match-data (0 3 0 1 1 2 2 3))) . 479) (undo-tree-id865 . -8) 487) nil (26368 26414 533438 799000) 0 nil])
([nil nil ((479 . 487) (#("            " 0 12 (fontified t match-data (0 3 0 1 1 2 2 3))) . 479) (undo-tree-id864 . -12) 491) nil (26368 26414 533437 547000) 0 nil])
([nil nil ((479 . 483) (#("        " 0 8 (fontified t match-data (0 3 0 1 1 2 2 3))) . 479) (undo-tree-id863 . -8) 487) nil (26368 26414 533436 164000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t match-data (0 3 0 1 1 2 2 3))) . 479) (undo-tree-id862 . -4) 483) nil (26368 26414 533434 611000) 0 nil])
([nil nil ((479 . 495)) nil (26368 26414 533433 379000) 0 nil])
([nil nil ((478 . 479)) nil (26368 26414 533432 617000) 0 nil])
([nil nil ((470 . 482) (#("        " 0 8 (fontified t match-data (0 3 0 1 1 2 2 3))) . 470) (undo-tree-id861 . -8) 478) nil (26368 26414 533431 796000) 0 nil])
([nil nil ((470 . 478) (#("            " 0 12 (fontified t match-data (0 3 0 1 1 2 2 3))) . 470) (undo-tree-id860 . -12) 482) nil (26368 26414 533429 912000) 0 nil])
([nil nil ((470 . 474) (#("        " 0 8 (fontified t match-data (0 3 0 1 1 2 2 3))) . 470) (undo-tree-id859 . -8) 478) nil (26368 26414 533428 99000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t match-data (0 3 0 1 1 2 2 3))) . 470) (undo-tree-id858 . -4) 474) nil (26368 26414 533426 155000) 0 nil])
([nil nil ((470 . 486)) nil (26368 26414 533417 759000) 0 nil])
([nil nil ((486 . 507)) nil (26368 26414 533416 537000) 0 nil])
([nil nil ((507 . 510)) nil (26368 26414 533411 908000) 0 nil])
([nil nil ((613 . 623) (t 26368 26414 535559 393000)) nil (26368 26523 486688 20000) 0 nil])
([nil nil ((623 . 624)) nil (26368 26523 486687 799000) 0 nil])
([nil nil ((624 . 645)) nil (26368 26523 486687 569000) 0 nil])
([nil nil ((645 . 647)) nil (26368 26523 486687 248000) 0 nil])
([nil nil ((647 . 648)) nil (26368 26523 486687 28000) 0 nil])
([nil nil ((648 . 658)) nil (26368 26523 486686 777000) 0 nil])
([nil nil ((649 . 658) (#("Dir" 0 3 (fontified nil)) . -649) (649 . 652) (#("Direction" 0 9 (fontified t match-data (0 3 0 1 1 2 2 3))) . -649) (undo-tree-id1197 . -9) (undo-tree-id1198 . -9) (undo-tree-id1199 . -9) (undo-tree-id1200 . -9) 658) nil (26368 26523 486686 136000) 0 nil])
([nil nil ((573 . 594)) nil (26368 26523 486684 373000) 0 nil])
([nil nil ((594 . 597)) nil (26368 26523 486684 42000) 0 nil])
([nil nil ((592 . 601) (#("ge" 0 2 (fontified nil)) . -592) (592 . 594) (#("getPolicy" 0 9 (fontified nil)) . -592) (592 . 601) (#("getPo" 0 5 (fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -592) (undo-tree-id1193 . -5) (undo-tree-id1194 . -5) (undo-tree-id1195 . -5) (undo-tree-id1196 . -5) 597) nil (26368 26523 486683 481000) 0 nil])
([nil nil ((601 . 603)) nil (26368 26523 486681 137000) 0 nil])
([nil nil ((603 . 624)) nil (26368 26523 486680 325000) 0 nil])
([nil nil ((573 . 578)) nil (26368 26523 486679 353000) 0 nil])
([nil nil ((#("p" 0 1 (face py-variable-name-face fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . 578)) nil (26368 26523 486678 512000) 0 nil])
([nil nil ((578 . 579)) nil (26368 26523 486677 770000) 0 nil])
([nil nil ((629 . 630)) nil (26368 26523 486677 229000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -629) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) 630) nil (26368 26523 486676 598000) 0 nil])
([nil nil ((629 . 631)) nil (26368 26523 486674 33000) 0 nil])
([nil nil ((#("                    ne" 0 22 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . 609) (undo-tree-id1185 . -20) (undo-tree-id1186 . -22) (undo-tree-id1187 . -22) (undo-tree-id1188 . -22)) nil (26368 26523 486673 121000) 0 nil])
([nil nil ((553 . 554)) nil (26368 26523 486671 17000) 0 nil])
([nil nil ((553 . 573)) nil (26368 26523 486670 236000) 0 nil])
([nil nil ((573 . 580)) nil (26368 26523 486669 865000) 0 nil])
([nil nil ((#("S" 0 1 (fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -577) (undo-tree-id1182 . -1) (#("t" 0 1 (fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -578) (undo-tree-id1183 . -1) (#("a" 0 1 (fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -579) (undo-tree-id1184 . -1) 580) nil (26368 26523 486668 733000) 0 nil])
([nil nil ((577 . 597)) nil (26368 26523 486666 439000) 0 nil])
([nil nil ((591 . 603) (#("ge" 0 2 (fontified nil)) . -591) (591 . 593) (#("getNextState" 0 12 (fontified nil)) . -591) (591 . 603) (#("getNex" 0 6 (fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -591) (undo-tree-id1178 . -6) (undo-tree-id1179 . -6) (undo-tree-id1180 . -6) (undo-tree-id1181 . -6) 597) nil (26368 26523 486665 207000) 0 nil])
([nil nil ((603 . 611)) nil (26368 26523 486663 193000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -607) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (#("r" 0 1 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -608) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (#("n" 0 1 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -609) (undo-tree-id1176 . -1) (#("t" 0 1 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -610) (undo-tree-id1177 . -1) 611) nil (26368 26523 486662 211000) 0 nil])
([nil nil ((607 . 608)) nil (26368 26523 486656 280000) 0 nil])
([nil nil ((608 . 610)) nil (26368 26523 486655 809000) 0 nil])
([nil nil ((604 . 620) (#("cur" 0 3 (fontified nil)) . -604) (604 . 607) (#("current_position" 0 16 (fontified nil)) . -604) (604 . 620) (#("curren" 0 6 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -604) (undo-tree-id1164 . -6) (undo-tree-id1165 . -6) (undo-tree-id1166 . -6) (undo-tree-id1167 . -6) 610) nil (26368 26523 486654 847000) 0 nil])
([nil nil ((620 . 630)) nil (26368 26523 486652 613000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -629) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) 630) nil (26368 26523 486651 771000) 0 nil])
([nil nil ((#("s" 0 1 (face py-variable-name-face fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -650) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (#("t" 0 1 (face py-variable-name-face fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -651) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (#("a" 0 1 (face py-variable-name-face fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -652) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (#("t" 0 1 (face py-variable-name-face fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -653) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (#("e" 0 1 (face py-variable-name-face fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -654) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (#("P" 0 1 (face py-variable-name-face fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -655) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (#("r" 0 1 (face py-variable-name-face fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -656) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (#("o" 0 1 (face py-variable-name-face fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -657) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (#("b" 0 1 (face py-variable-name-face fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -658) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (#("a" 0 1 (face py-variable-name-face fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -659) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (#("b" 0 1 (face py-variable-name-face fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -660) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (#("i" 0 1 (face py-variable-name-face fontified nil match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -661) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (#("l" 0 1 (face py-variable-name-face fontified nil match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -662) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (#("i" 0 1 (face py-variable-name-face fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -663) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (#("t" 0 1 (face py-variable-name-face fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -664) (undo-tree-id1158 . -1) (#("y" 0 1 (face py-variable-name-face fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -665) (undo-tree-id1159 . -1) 666) nil (26368 26523 486644 247000) 0 nil])
([nil nil ((650 . 651)) nil (26368 26524 760551 873000) 0 nil])
([nil nil ((#("next_state" 0 10 (face py-variable-name-face fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . 573)) nil (26368 26571 570913 207000) 0 nil] [nil nil ((651 . 652)) ((#("
" 0 1 (fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . 651) (undo-tree-id1201 . 1)) (26368 26523 486208 364000) 0 nil])
([nil nil ((573 . 576)) nil (26368 26571 570912 305000) 0 nil])
nil
([nil nil ((#("e" 0 1 (face py-variable-name-face fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -574) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (#("x" 0 1 (face py-variable-name-face fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -575) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) 576) nil (26368 26571 570910 973000) 0 nil])
([nil nil ((662 . 682)) nil (26368 26571 570903 458000) 0 nil])
([nil nil ((573 . 574)) nil (26368 26571 570902 296000) 0 nil])
([nil nil ((574 . 578) 594) nil (26368 26571 570901 455000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . 574) 598) nil (26368 26571 570900 52000) 0 nil])
([nil nil ((574 . 594)) nil (26368 26571 570898 930000) 0 nil])
([nil nil ((573 . 574)) nil (26368 26571 570898 239000) 0 nil])
([nil nil ((574 . 575)) nil (26368 26571 570897 517000) 0 nil])
([nil nil ((575 . 576)) nil (26368 26571 570896 736000) 0 nil])
([nil nil ((#("  " 0 2 (face font-lock-comment-face fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . 574) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -2) 576) nil (26368 26571 570895 604000) 0 nil])
([nil nil ((574 . 595)) nil (26368 26571 570882 369000) 0 nil])
([nil nil ((595 . 596)) nil (26368 26571 570881 657000) 0 nil])
([nil nil ((596 . 613)) nil (26368 26571 570876 337000) 0 nil])
([nil nil ((511 . 527) (t 26368 26571 573359 740000)) nil (26368 26693 738851 714000) 0 nil])
([nil nil ((527 . 528)) nil (26368 26693 738851 313000) 0 nil])
([nil nil ((527 . 548)) nil (26368 26693 738851 33000) 0 nil])
([nil nil ((781 . 790)) nil (26368 26693 738850 752000) 0 nil])
([nil nil ((#("v" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -789) (undo-tree-id1238 . -1) 790) nil (26368 26693 738850 382000) 0 nil])
([nil nil ((789 . 804)) nil (26368 26693 738849 831000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -803) (undo-tree-id1237 . -1) 804) nil (26368 26693 738849 189000) 0 nil])
([nil nil ((803 . 804)) nil (26368 26693 738848 157000) 0 nil])
([nil nil ((804 . 806)) nil (26368 26693 738847 396000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -805) (undo-tree-id1236 . -1) 806) nil (26368 26693 738846 444000) 0 nil])
([nil nil ((673 . 675)) nil (26368 26693 738845 82000) 0 nil])
([nil nil ((894 . 919)) nil (26368 26693 738844 340000) 0 nil])
([nil nil ((895 . 915) (#("                        " 0 24 (fontified t match-data (0 3 0 1 1 2 2 3))) . 895) (undo-tree-id1235 . -24) 919) nil (26368 26693 738843 308000) 0 nil])
([nil nil ((895 . 911) (#("                    " 0 20 (fontified t match-data (0 3 0 1 1 2 2 3))) . 895) (undo-tree-id1234 . -20) 915) nil (26368 26693 738841 876000) 0 nil])
([nil nil ((895 . 907) (#("                " 0 16 (fontified t match-data (0 3 0 1 1 2 2 3))) . 895) (undo-tree-id1233 . -16) 911) nil (26368 26693 738840 313000) 0 nil])
([nil nil ((895 . 903) (#("            " 0 12 (fontified t match-data (0 3 0 1 1 2 2 3))) . 895) (undo-tree-id1232 . -12) 907) nil (26368 26693 738838 920000) 0 nil])
([nil nil ((903 . 907)) nil (26368 26693 738837 16000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . 906) (undo-tree-id1231 . -1) 907) nil (26368 26693 738835 794000) 0 nil])
([nil nil ((906 . 911)) nil (26368 26693 738832 518000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -910) (undo-tree-id1230 . -1) 911) nil (26368 26693 738831 576000) 0 nil])
([nil nil ((910 . 921)) nil (26368 26693 738830 203000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -918) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (#("n" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -919) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (#("x" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -920) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) 921) nil (26368 26693 738828 971000) 0 nil])
([nil nil ((918 . 920)) nil (26368 26693 738821 527000) 0 nil])
([nil nil ((920 . 929)) nil (26368 26693 738820 655000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . 928) (undo-tree-id1217 . -1) 929) nil (26368 26693 738819 593000) 0 nil])
([nil nil ((928 . 949)) nil (26368 26693 738808 513000) 0 nil])
([nil nil ((949 . 962)) nil (26368 26693 738801 279000) 0 nil])
([nil nil ((807 . 809) (t 26368 26693 740747 851000)) nil (26368 29461 585545 613000) 0 nil])
([nil nil ((809 . 830)) nil (26368 29461 585540 423000) 0 nil])
([nil nil ((1102 . 1111) (t 26368 29461 589212 369000)) nil (26368 32239 285051 741000) 0 nil])
([nil nil ((1111 . 1114)) nil (26368 32239 285051 510000) 0 nil])
([nil nil ((#("        ..." 0 11 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . 1103) (undo-tree-id1244 . -9) (undo-tree-id1245 . -9) (undo-tree-id1246 . -9) (undo-tree-id1247 . -9)) nil (26368 32239 285051 210000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1103)) nil (26368 32239 285049 386000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . 1091)) nil (26368 32239 285049 116000) 0 nil])
([nil nil ((#("       ..." 0 10 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . 1091) (undo-tree-id1243 . -10)) nil (26368 32239 285048 825000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . 1091) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1)) nil (26368 32239 285047 493000) 0 nil])
([nil nil ((1091 . 1099)) nil (26368 32239 285036 772000) 0 nil])
([nil nil ((1099 . 1102)) nil (26368 32239 285035 751000) 0 nil])
([nil nil ((1102 . 1103)) nil (26368 32239 285031 853000) 0 nil])
([nil nil ((1102 . 1103) (t 26368 32239 286774 401000)) nil (26368 34577 409566 374000) 0 nil])
([nil nil ((#("?" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -807) (undo-tree-id1249 . -1) 808 (t 26368 34577 739905 517000)) nil (26369 3090 572041 271000) 0 nil])
([nil nil ((807 . 815)) nil (26369 3090 572040 18000) 0 nil])
([nil nil ((815 . 820)) nil (26369 3090 572039 768000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -818) (undo-tree-id1248 . -1) 819) nil (26369 3090 572039 237000) 0 nil])
([nil nil ((818 . 819)) nil (26369 3090 572030 560000) 0 nil])
([nil nil ((809 . 810)) nil (26369 3090 572026 242000) 0 nil])
([nil nil ((#("R" 0 1 (face py-variable-name-face fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -674) (undo-tree-id1252 . -1) 675 (t 26369 3090 574796 689000)) nil (26369 3107 688632 949000) 0 nil])
([nil nil ((674 . 675)) nil (26369 3107 688631 726000) 0 nil])
([nil nil ((#("R" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -807) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) 808) nil (26369 3107 688630 945000) 0 nil])
([nil nil ((807 . 808)) nil (26369 3107 688617 850000) 0 nil])
([nil nil ((822 . 823) (t 26369 3107 691115 22000)) nil (26369 3302 615008 177000) 0 nil])
([nil nil ((675 . 677)) nil (26369 3302 615007 676000) 0 nil])
([nil nil ((#("a" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -969) (undo-tree-id1271 . -1) (#("n" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -970) (undo-tree-id1272 . -1) (#("d" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -971) (undo-tree-id1273 . -1) (#(" " 0 1 (fontified nil)) . 972) (972 . 973) (#(" " 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . 972) (undo-tree-id1274 . -1) 973) nil (26369 3302 615006 604000) 0 nil])
([nil nil ((994 . 1009)) nil (26369 3302 615003 558000) 0 nil])
([nil nil ((1009 . 1029)) nil (26369 3302 615003 428000) 0 nil])
([nil nil ((823 . 824)) nil (26369 3302 615003 298000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -823) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) 824) nil (26369 3302 615002 877000) 0 nil])
([nil nil ((823 . 840)) nil (26369 3302 615001 254000) 0 nil])
([nil nil ((677 . 679)) nil (26369 3302 615001 113000) 0 nil])
([nil nil ((679 . 681)) nil (26369 3302 615000 983000) 0 nil])
([nil nil ((#("," 0 1 (fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -678) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (#("C" 0 1 (face py-variable-name-face fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -679) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (#("y" 0 1 (face py-variable-name-face fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -680) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) 681) nil (26369 3302 615000 272000) 0 nil])
([nil nil ((950 . 954)) nil (26369 3302 614993 519000) 0 nil])
([nil nil ((954 . 975)) nil (26369 3302 614993 248000) 0 nil])
([nil nil ((#("]" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t match-data (0 3 0 1 1 2 2 3))) . -974) (undo-tree-id1253 . -1) 975) nil (26369 3302 614992 737000) 0 nil])
([nil nil ((974 . 980)) nil (26369 3302 614981 556000) 0 nil])
([nil nil ((#("," 0 1 (fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -675) (undo-tree-id1289 . -1) (#("C" 0 1 (face py-variable-name-face fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -676) (undo-tree-id1290 . -1) (#("x" 0 1 (face py-variable-name-face fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -677) (undo-tree-id1291 . -1) 678 (t 26369 3302 618346 838000)) nil (26369 3341 947801 67000) 0 nil])
([nil nil ((#("the coordinate for that state" 0 29 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1045) (undo-tree-id1287 . -28) (undo-tree-id1288 . -29) 1074) nil (26369 3341 947799 705000) 0 nil])
([nil nil ((#("a" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1041) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (#("n" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1042) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (#("d" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1043) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (#(" " 0 1 (fontified nil)) . 1044) (1044 . 1045) (#(" " 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . 1044) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) 1045) nil (26369 3341 947798 91000) 0 nil])
([nil nil ((#(" " 0 1 (fontified nil)) . 1040) (1040 . 1041) (#(" " 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . 1040) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) 1041) nil (26369 3341 947792 952000) 0 nil])
([nil nil ((#("," 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1039) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) 1040) nil (26369 3341 947791 48000) 0 nil])
([nil nil ((1039 . 1040)) nil (26369 3341 947782 562000) 0 nil])
([nil nil ((1014 . 1018)) nil (26369 3341 947782 281000) 0 nil])
([nil nil ((1012 . 1033)) nil (26369 3341 947781 510000) 0 nil])
([nil nil ((1033 . 1036)) nil (26369 3341 947777 823000) 0 nil])
([nil nil ((838 . 849) (t 26369 3341 950077 688000)) nil (26369 3356 755783 27000) 0 nil])
([nil nil ((#("T" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -968) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (#("u" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -969) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (#("p" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -970) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (#("l" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -971) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (#("e" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -972) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (#("[" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t match-data (0 3 0 1 1 2 2 3))) . -973) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) (#("i" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -974) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t match-data (0 3 0 1 1 2 2 3))) . -975) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (#("t" 0 1 (face py-builtins-face fontified t match-data (0 3 0 1 1 2 2 3))) . -976) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (#("," 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -977) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (#("i" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -978) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t match-data (0 3 0 1 1 2 2 3))) . -979) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (#("t" 0 1 (face py-builtins-face fontified t match-data (0 3 0 1 1 2 2 3))) . -980) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t match-data (0 3 0 1 1 2 2 3))) . -981) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (#("," 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -982) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) 983 (t 26369 3356 758784 987000)) nil (26369 3387 56354 775000) 0 nil])
([nil nil ((968 . 972)) nil (26369 3387 56339 405000) 0 nil])
([nil nil ((#("T" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -962) (undo-tree-id1294 . -1) 963) nil (26369 3387 56338 744000) 0 nil])
([nil nil ((962 . 963)) nil (26369 3387 56337 331000) 0 nil])
([nil nil ((962 . 965)) nil (26369 3387 56336 980000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -964) (undo-tree-id1293 . -1) 965) nil (26369 3387 56336 359000) 0 nil])
([nil nil ((964 . 968)) nil (26369 3387 56334 866000) 0 nil])
([nil nil ((#("," 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -967) (undo-tree-id1292 . -1) 968) nil (26369 3387 56334 215000) 0 nil])
([nil nil ((967 . 968)) nil (26369 3387 56325 759000) 0 nil])
([nil nil ((983 . 984)) nil (26369 3387 56324 917000) 0 nil])
([nil nil ((984 . 989)) nil (26369 3387 56320 8000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -985) (undo-tree-id1471 . -1) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t match-data (0 3 0 1 1 2 2 3))) . -986) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (#("t" 0 1 (face py-builtins-face fontified t match-data (0 3 0 1 1 2 2 3))) . -987) (undo-tree-id1479 . -1) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t match-data (0 3 0 1 1 2 2 3))) . -988) (undo-tree-id1483 . -1) 989 (t 26369 3387 60292 704000)) nil (26369 3538 975563 374000) 0 nil])
([nil nil ((#("," 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -983) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (#(" " 0 1 (fontified nil)) . 984) (984 . 985) (#(" " 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . 984) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) 985) nil (26369 3538 975547 885000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -962) (undo-tree-id1455 . -1) (#("u" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -963) (undo-tree-id1456 . -1) (#("p" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -964) (undo-tree-id1457 . -1) (#("l" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -965) (undo-tree-id1458 . -1) (#("e" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -966) (undo-tree-id1459 . -1) (#("[" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t match-data (0 3 0 1 1 2 2 3))) . -967) (undo-tree-id1460 . -1) 968) nil (26369 3538 975543 798000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1062) (undo-tree-id1450 . -1) (#("t" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1063) (undo-tree-id1451 . -1) (#("a" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1064) (undo-tree-id1452 . -1) (#("t" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1065) (undo-tree-id1453 . -1) (#("e" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1066) (undo-tree-id1454 . -1) 1067) nil (26369 3538 975541 223000) 0 nil])
([nil nil ((#("t" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1057) (undo-tree-id1445 . -1) (#("h" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1058) (undo-tree-id1446 . -1) (#("a" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1059) (undo-tree-id1447 . -1) (#("t" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1060) (undo-tree-id1448 . -1) (#(" " 0 1 (fontified nil)) . 1061) (1061 . 1062) (#(" " 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . 1061) (undo-tree-id1449 . -1) 1062) nil (26369 3538 975538 838000) 0 nil])
([nil nil ((#("f" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1053) (undo-tree-id1441 . -1) (#("o" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1054) (undo-tree-id1442 . -1) (#("r" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1055) (undo-tree-id1443 . -1) (#(" " 0 1 (fontified nil)) . 1056) (1056 . 1057) (#(" " 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . 1056) (undo-tree-id1444 . -1) 1057) nil (26369 3538 975536 133000) 0 nil])
([nil nil ((#("r" 0 1 (face font-lock-string-face fontified nil match-data (0 3 0 1 1 2 2 3))) . -1046) (undo-tree-id1434 . -1) (#("e" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1047) (undo-tree-id1435 . -1) (#("w" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1048) (undo-tree-id1436 . -1) (#("a" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1049) (undo-tree-id1437 . -1) (#("r" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1050) (undo-tree-id1438 . -1) (#("d" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1051) (undo-tree-id1439 . -1) (#(" " 0 1 (fontified nil)) . 1052) (1052 . 1053) (#(" " 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . 1052) (undo-tree-id1440 . -1) 1053) nil (26369 3538 975531 996000) 0 nil])
([nil nil ((#("t" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1042) (undo-tree-id1430 . -1) (#("h" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1043) (undo-tree-id1431 . -1) (#("e" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1044) (undo-tree-id1432 . -1) (#(" " 0 1 (fontified nil)) . 1045) (1045 . 1046) (#(" " 0 1 (face font-lock-string-face fontified nil match-data (0 3 0 1 1 2 2 3))) . 1045) (undo-tree-id1433 . -1) 1046) nil (26369 3538 975529 200000) 0 nil])
([nil nil ((#("n" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1039) (undo-tree-id1427 . -1) (#("d" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1040) (undo-tree-id1428 . -1) (#(" " 0 1 (fontified nil)) . 1041) (1041 . 1042) (#(" " 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . 1041) (undo-tree-id1429 . -1) 1042) nil (26369 3538 975527 197000) 0 nil])
([nil nil ((#("a" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1038) (undo-tree-id1426 . -1) 1039) nil (26369 3538 975525 924000) 0 nil])
([nil nil ((#("," 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1036) (undo-tree-id1424 . -1) (#(" " 0 1 (fontified nil)) . 1037) (1037 . 1038) (#(" " 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . 1037) (undo-tree-id1425 . -1) 1038) nil (26369 3538 975525 203000) 0 nil])
([nil nil ((1036 . 1057)) nil (26369 3538 975524 401000) 0 nil])
([nil nil ((1057 . 1073)) nil (26369 3538 975524 181000) 0 nil])
([nil nil ((1090 . 1099)) nil (26369 3538 975523 930000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t match-data (0 3 0 1 1 2 2 3))) . 1095) (undo-tree-id1423 . -4) 1099) nil (26369 3538 975523 740000) 0 nil])
([nil nil ((1095 . 1108)) nil (26369 3538 975523 179000) 0 nil])
([nil nil ((1108 . 1123)) nil (26369 3538 975522 888000) 0 nil])
([nil nil ((1123 . 1124)) nil (26369 3538 975522 628000) 0 nil])
([nil nil ((1124 . 1131)) nil (26369 3538 975522 498000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1127) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (#("p" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1128) (undo-tree-id1420 . -1) (#("l" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1129) (undo-tree-id1421 . -1) (#("e" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1130) (undo-tree-id1422 . -1) 1131) nil (26369 3538 975521 887000) 0 nil])
([nil nil ((1127 . 1133)) nil (26369 3538 975518 500000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1130) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (#("i" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1131) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1132) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) 1133) nil (26369 3538 975517 879000) 0 nil])
([nil nil ((1130 . 1134)) nil (26369 3538 975513 811000) 0 nil])
([nil nil ((1134 . 1140)) nil (26369 3538 975513 521000) 0 nil])
([nil nil ((1140 . 1141)) nil (26369 3538 975513 270000) 0 nil])
([nil nil ((1141 . 1150)) nil (26369 3538 975513 30000) 0 nil])
([nil nil ((1150 . 1171)) nil (26369 3538 975512 790000) 0 nil])
([nil nil ((1171 . 1178)) nil (26369 3538 975512 539000) 0 nil])
([nil nil ((1178 . 1197)) nil (26369 3538 975512 228000) 0 nil])
([nil nil ((1197 . 1206)) nil (26369 3538 975511 978000) 0 nil])
([nil nil ((1206 . 1223)) nil (26369 3538 975511 718000) 0 nil])
([nil nil ((1223 . 1226)) nil (26369 3538 975511 437000) 0 nil])
([nil nil ((#("w" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1224) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (undo-tree-id1398 . -1) (#("e" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1225) (undo-tree-id1399 . -1) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (undo-tree-id1402 . -1) 1226) nil (26369 3538 975510 986000) 0 nil])
([nil nil ((1224 . 1228)) nil (26369 3538 975508 141000) 0 nil])
([nil nil ((1198 . 1199)) nil (26369 3538 975507 890000) 0 nil])
([nil nil ((1198 . 1206)) nil (26369 3538 975507 600000) 0 nil])
([nil nil ((1206 . 1209)) nil (26369 3538 975507 349000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . 1208) (undo-tree-id1394 . -1) 1209) nil (26369 3538 975506 949000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1206) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (#("f" 0 1 (face font-lock-keyword-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1207) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) 1208) nil (26369 3538 975505 917000) 0 nil])
([nil nil ((1206 . 1213)) nil (26369 3538 975502 891000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . 1212) (undo-tree-id1385 . -1) 1213) nil (26369 3538 975502 520000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1206) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (#("n" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1207) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (#("l" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1208) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (#("e" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1209) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (#("s" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1210) (undo-tree-id1383 . -1) (#("s" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1211) (undo-tree-id1384 . -1) 1212) nil (26369 3538 975501 48000) 0 nil])
([nil nil ((1206 . 1217)) nil (26369 3538 975494 285000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1213) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (#("e" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1214) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (#("w" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1215) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (#("a" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1216) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) 1217) nil (26369 3538 975493 163000) 0 nil])
([nil nil ((1213 . 1223)) nil (26369 3538 975487 913000) 0 nil])
([nil nil ((1223 . 1234) (#("rewards_set" 0 11 (fontified nil)) . -1223) (1223 . 1234)) nil (26369 3538 975487 482000) 0 nil])
([nil nil ((1234 . 1235)) nil (26369 3538 975487 161000) 0 nil])
([nil nil ((1235 . 1248)) nil (26369 3538 975486 921000) 0 nil])
([nil nil ((1248 . 1259)) nil (26369 3538 975486 681000) 0 nil])
([nil nil ((1254 . 1264) (#("Val" 0 3 (fontified nil)) . -1254) (1254 . 1257) (#("ValueError" 0 10 (fontified nil)) . -1254) (1254 . 1264) (#("Value" 0 5 (fontified t match-data (0 0))) . -1254) (undo-tree-id1347 . -5) (undo-tree-id1348 . -5) (undo-tree-id1349 . -5) (undo-tree-id1350 . -5) 1259) nil (26369 3538 975485 959000) 0 nil])
([nil nil ((1264 . 1266)) nil (26369 3538 975484 26000) 0 nil])
([nil nil ((1266 . 1287)) nil (26369 3538 975483 775000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-string-face fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . 1286) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) 1287) nil (26369 3538 975483 394000) 0 nil])
([nil nil ((#("y" 0 1 (face font-lock-string-face fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -1283) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (#("e" 0 1 (face font-lock-string-face fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -1284) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (#("t" 0 1 (face font-lock-string-face fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -1285) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) 1286) nil (26369 3538 975482 12000) 0 nil])
([nil nil ((1283 . 1304)) nil (26369 3538 975479 738000) 0 nil])
([nil nil ((1304 . 1316)) nil (26369 3538 975479 607000) 0 nil])
([nil nil ((1316 . 1329)) nil (26369 3538 975479 367000) 0 nil])
([nil nil ((1329 . 1330)) nil (26369 3538 975479 66000) 0 nil])
([nil nil ((#("w" 0 1 (fontified t match-data (0 0))) . -1252) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) 1253) nil (26369 3538 975478 625000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t match-data (0 0))) . -1248) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (#("h" 0 1 (fontified t match-data (0 0))) . -1249) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (#("r" 0 1 (fontified t match-data (0 0))) . -1250) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (#("o" 0 1 (fontified t match-data (0 0))) . -1251) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) 1252) nil (26369 3538 975476 532000) 0 nil])
([nil nil ((1248 . 1253)) nil (26369 3538 975470 701000) 0 nil])
([nil nil ((1248 . 1253) (#("rai" 0 3 (fontified nil)) . -1248) (1248 . 1251) (#("raise" 0 5 (face font-lock-keyword-face fontified t match-data (0 0))) . -1248) (undo-tree-id1325 . -5) (undo-tree-id1326 . -5) (undo-tree-id1327 . -5) (undo-tree-id1328 . -5) 1253) nil (26369 3538 975469 889000) 0 nil])
([nil nil ((1361 . 1382)) nil (26369 3538 975460 471000) 0 nil])
([nil nil ((1382 . 1388)) nil (26369 3538 975456 354000) 0 nil])
([nil nil ((#("," 0 1 (fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -673) (undo-tree-id1508 . -1) (#("R" 0 1 (face py-variable-name-face fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -674) (undo-tree-id1509 . -1) 675 (t 26369 3538 978667 87000)) nil (26369 3558 959595 716000) 0 nil])
([nil nil ((719 . 740)) nil (26369 3558 959593 743000) 0 nil])
([nil nil ((740 . 758)) nil (26369 3558 959593 442000) 0 nil])
([nil nil ((758 . 765)) nil (26369 3558 959592 771000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -764) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (undo-tree-id1507 . -1) 765) nil (26369 3558 959591 398000) 0 nil])
([nil nil ((764 . 769)) nil (26369 3558 959567 153000) 0 nil])
([nil nil ((#("," 0 1 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -763) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) 764 (t 26369 3558 963720 868000)) nil (26369 3571 150610 890000) 0 nil])
([nil nil ((763 . 764)) nil (26369 3571 150601 593000) 0 nil])
([nil nil ((759 . 760)) nil (26369 3571 150600 791000) 0 nil])
([nil nil ((769 . 770)) nil (26369 3571 150596 133000) 0 nil])
([nil nil ((377 . 385) (#("        " 0 8 (fontified nil match-data (0 3 0 1 1 2 2 3))) . 376) (undo-tree-id1525 . -8) (375 . 385) (t 26369 3571 153812 853000)) nil (26369 3640 511460 758000) 0 nil])
([nil nil ((385 . 406)) nil (26369 3640 511459 786000) 0 nil])
([nil nil ((406 . 416)) nil (26369 3640 511459 636000) 0 nil])
([nil nil ((#("." 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -415) (undo-tree-id1524 . -1) 416) nil (26369 3640 511459 185000) 0 nil])
([nil nil ((415 . 416)) nil (26369 3640 511458 143000) 0 nil])
([nil nil ((416 . 429)) nil (26369 3640 511457 852000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -417) (undo-tree-id1512 . -1) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (undo-tree-id1519 . -1) (undo-tree-id1520 . -1) (undo-tree-id1521 . -1) (undo-tree-id1522 . -1) (undo-tree-id1523 . -1) 418) nil (26369 3640 511457 51000) 0 nil])
([nil nil ((417 . 418)) nil (26369 3640 511439 397000) 0 nil])
([nil nil ((1 . 2) (t 26369 3640 513996 178000)) nil (26369 3648 168938 160000) 0 nil])
([nil nil ((1 . 19)) nil (26369 3648 168934 603000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . 395) (t 26369 3648 172181 312000)) nil (26369 3656 852161 640000) 0 nil])
([nil nil ((974 . 994) (#("                    " 0 20 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . 974) (t 26369 3656 855401 620000)) nil (26369 3715 657859 791000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . 990) (undo-tree-id1571 . -4) 994) nil (26369 3715 657859 330000) 0 nil])
([nil nil ((974 . 994) (#("                " 0 16 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . 974) (undo-tree-id1570 . -16) 990) nil (26369 3715 657858 568000) 0 nil])
([nil nil ((994 . 999)) nil (26369 3715 657857 536000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -997) (undo-tree-id1562 . -1) (undo-tree-id1563 . -1) (undo-tree-id1564 . -1) (undo-tree-id1565 . -1) (#("l" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -998) (undo-tree-id1566 . -1) (undo-tree-id1567 . -1) (undo-tree-id1568 . -1) (undo-tree-id1569 . -1) 999) nil (26369 3715 657856 895000) 0 nil])
([nil nil ((997 . 999)) nil (26369 3715 657850 764000) 0 nil])
([nil nil ((994 . 1011) (#("tot" 0 3 (fontified nil)) . -994) (994 . 997) (#("total_state_value" 0 17 (fontified nil)) . -994) (994 . 1011) (#("total" 0 5 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -994) (undo-tree-id1558 . -5) (undo-tree-id1559 . -5) (undo-tree-id1560 . -5) (undo-tree-id1561 . -5) 999) nil (26369 3715 657849 261000) 0 nil])
([nil nil ((1011 . 1018)) nil (26369 3715 657846 786000) 0 nil])
([nil nil ((1018 . 1026)) nil (26369 3715 657846 405000) 0 nil])
([nil nil ((1015 . 1033) (#("sta" 0 3 (fontified nil)) . -1015) (1015 . 1018) (#("state_action_value" 0 18 (fontified nil)) . -1015) (1015 . 1033) (#("state_actio" 0 11 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -1015) (undo-tree-id1554 . -11) (undo-tree-id1555 . -11) (undo-tree-id1556 . -11) (undo-tree-id1557 . -11) 1026) nil (26369 3715 657845 133000) 0 nil])
([nil nil ((1033 . 1054)) nil (26369 3715 657842 868000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t match-data (0 11 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10 11))) . 1050) (undo-tree-id1553 . -4) 1054) nil (26369 3715 657841 987000) 0 nil])
([nil nil ((1050 . 1060)) nil (26369 3715 657841 356000) 0 nil])
([nil nil ((1050 . 1066) (#("new" 0 3 (fontified nil)) . -1050) (1050 . 1053) (#("new_state_values" 0 16 (fontified nil)) . -1050) (1050 . 1066) (#("new_values" 0 10 (fontified t match-data (0 11 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10 11))) . -1050) (undo-tree-id1549 . -10) (undo-tree-id1550 . -10) (undo-tree-id1551 . -10) (undo-tree-id1552 . -10) 1060) nil (26369 3715 657840 594000) 0 nil])
([nil nil ((1066 . 1067)) nil (26369 3715 657838 330000) 0 nil])
([nil nil ((1067 . 1071)) nil (26369 3715 657837 959000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t match-data (0 16 0 1 1 2 2 3 3 4 10 11 11 12 12 13 13 14 14 15 15 16))) . -1069) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (undo-tree-id1546 . -1) (undo-tree-id1547 . -1) (#("j" 0 1 (fontified t match-data (0 16 0 1 1 2 2 3 3 4 10 11 11 12 12 13 13 14 14 15 15 16))) . -1070) (undo-tree-id1548 . -1) 1071) nil (26369 3715 657837 188000) 0 nil])
([nil nil ((1069 . 1077)) nil (26369 3715 657834 232000) 0 nil])
([nil nil ((1072 . 1089) (#("tot" 0 3 (fontified nil)) . -1072) (1072 . 1075) (#("total_state_value" 0 17 (fontified nil)) . -1072) (1072 . 1089) (#("total" 0 5 (fontified t match-data (0 16 0 1 1 2 2 3 3 4 10 11 11 12 12 13 13 14 14 15 15 16))) . -1072) (undo-tree-id1526 . -5) (undo-tree-id1527 . -5) (undo-tree-id1528 . -5) (undo-tree-id1529 . -5) (undo-tree-id1530 . -5) (undo-tree-id1531 . -5) (undo-tree-id1532 . -5) (undo-tree-id1533 . -5) (undo-tree-id1534 . -5) (undo-tree-id1535 . -5) (undo-tree-id1536 . -5) (undo-tree-id1537 . -5) (undo-tree-id1538 . -5) (undo-tree-id1539 . -5) (undo-tree-id1540 . -5) (undo-tree-id1541 . -5) (undo-tree-id1542 . -5) (undo-tree-id1543 . -5) 1077) nil (26369 3715 657829 713000) 0 nil])
([nil nil ((1089 . 1106) (t 26369 3715 661133 743000)) nil (26369 3733 891756 770000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . 1102) (undo-tree-id1694 . -4) 1106) nil (26369 3733 891756 320000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . 1098) (undo-tree-id1693 . -4) 1102) nil (26369 3733 891755 578000) 0 nil])
([nil nil ((1098 . 1117)) nil (26369 3733 891754 135000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . 1116) (undo-tree-id1692 . -1) 1117) nil (26369 3733 891753 765000) 0 nil])
([nil nil ((#("=" 0 1 (face font-lock-operator-face fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -1115) (undo-tree-id1691 . -1) 1116) nil (26369 3733 891753 133000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . 1114) (undo-tree-id1690 . -1) 1115) nil (26369 3733 891752 522000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -1103) (undo-tree-id1667 . -1) (undo-tree-id1668 . -1) (undo-tree-id1669 . -1) (undo-tree-id1670 . -1) (#("r" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -1104) (undo-tree-id1671 . -1) (undo-tree-id1672 . -1) (undo-tree-id1673 . -1) (undo-tree-id1674 . -1) (#("i" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -1105) (undo-tree-id1675 . -1) (undo-tree-id1676 . -1) (undo-tree-id1677 . -1) (undo-tree-id1678 . -1) (#("d" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -1106) (undo-tree-id1679 . -1) (undo-tree-id1680 . -1) (undo-tree-id1681 . -1) (undo-tree-id1682 . -1) (#("." 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -1107) (undo-tree-id1683 . -1) (#("s" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -1108) (undo-tree-id1684 . -1) (#("t" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -1109) (undo-tree-id1685 . -1) (#("a" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -1110) (undo-tree-id1686 . -1) (#("t" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -1111) (undo-tree-id1687 . -1) (#("e" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -1112) (undo-tree-id1688 . -1) (#("s" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -1113) (undo-tree-id1689 . -1) 1114) nil (26369 3733 891750 418000) 0 nil])
([nil nil ((1103 . 1114)) nil (26369 3733 891743 194000) 0 nil])
([nil nil ((1114 . 1121)) nil (26369 3733 891742 563000) 0 nil])
([nil nil ((1117 . 1133) (#("new" 0 3 (fontified nil)) . -1117) (1117 . 1120) (#("new_state_values" 0 16 (fontified nil)) . -1117) (1117 . 1133) (#("new_" 0 4 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -1117) (undo-tree-id1572 . -4) (undo-tree-id1573 . -4) (undo-tree-id1574 . -2) (undo-tree-id1575 . -2) (undo-tree-id1576 . -2) (undo-tree-id1577 . -2) (undo-tree-id1578 . -2) (undo-tree-id1579 . -2) (undo-tree-id1580 . -2) (undo-tree-id1581 . -2) (undo-tree-id1582 . -2) (undo-tree-id1583 . -2) (undo-tree-id1584 . -2) (undo-tree-id1585 . -2) (undo-tree-id1586 . -2) (undo-tree-id1587 . -3) (undo-tree-id1588 . -3) (undo-tree-id1589 . -3) (undo-tree-id1590 . -3) (undo-tree-id1591 . -3) (undo-tree-id1592 . -3) (undo-tree-id1593 . -3) (undo-tree-id1594 . -3) (undo-tree-id1595 . -3) (undo-tree-id1596 . -3) (undo-tree-id1597 . -3) (undo-tree-id1598 . -3) (undo-tree-id1599 . -3) (undo-tree-id1600 . -3) (undo-tree-id1601 . -3) (undo-tree-id1602 . -3) (undo-tree-id1603 . -3) (undo-tree-id1604 . -3) (undo-tree-id1605 . -3) (undo-tree-id1606 . -3) (undo-tree-id1607 . -3) (undo-tree-id1608 . -3) (undo-tree-id1609 . -3) (undo-tree-id1610 . -3) (undo-tree-id1611 . -3) (undo-tree-id1612 . -3) (undo-tree-id1613 . -3) (undo-tree-id1614 . -3) (undo-tree-id1615 . -3) (undo-tree-id1616 . -3) (undo-tree-id1617 . -3) (undo-tree-id1618 . -3) (undo-tree-id1619 . -3) (undo-tree-id1620 . -3) (undo-tree-id1621 . -3) (undo-tree-id1622 . -3) (undo-tree-id1623 . -3) (undo-tree-id1624 . -3) (undo-tree-id1625 . -3) (undo-tree-id1626 . -4) (undo-tree-id1627 . -4) (undo-tree-id1628 . -4) (undo-tree-id1629 . -4) (undo-tree-id1630 . -4) (undo-tree-id1631 . -4) (undo-tree-id1632 . -4) (undo-tree-id1633 . -4) (undo-tree-id1634 . -4) (undo-tree-id1635 . -4) (undo-tree-id1636 . -4) (undo-tree-id1637 . -4) (undo-tree-id1638 . -4) (undo-tree-id1639 . -4) (undo-tree-id1640 . -4) (undo-tree-id1641 . -4) (undo-tree-id1642 . -4) (undo-tree-id1643 . -4) (undo-tree-id1644 . -4) (undo-tree-id1645 . -4) (undo-tree-id1646 . -4) (undo-tree-id1647 . -4) (undo-tree-id1648 . -4) (undo-tree-id1649 . -4) (undo-tree-id1650 . -4) (undo-tree-id1651 . -4) (undo-tree-id1652 . -4) (undo-tree-id1653 . -4) (undo-tree-id1654 . -4) (undo-tree-id1655 . -4) (undo-tree-id1656 . -4) (undo-tree-id1657 . -4) (undo-tree-id1658 . -4) (undo-tree-id1659 . -4) (undo-tree-id1660 . -4) (undo-tree-id1661 . -4) (undo-tree-id1662 . -4) (undo-tree-id1663 . -4) (undo-tree-id1664 . -4) (undo-tree-id1665 . -4) (undo-tree-id1666 . -4) 1121) nil (26369 3733 891738 215000) 0 nil])
([nil nil ((334 . 338) (t 26369 3733 895738 884000)) nil (26369 3752 849941 846000) 0 nil])
([nil nil ((338 . 342)) nil (26369 3752 849937 347000) 0 nil])
([nil nil ((1765 . 1773) (#("        " 0 8 (fontified nil)) . 1764) (undo-tree-id1922 . -8) (1763 . 1773) (t 26369 3752 853394 422000)) nil (26369 3810 296124 678000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . 1769) (undo-tree-id1921 . -4) 1773) nil (26369 3810 296123 897000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1765) (undo-tree-id1920 . -4) 1769) nil (26369 3810 296123 246000) 0 nil])
([nil nil ((1765 . 1766)) nil (26369 3810 296122 735000) 0 nil])
([nil nil ((#("\\" 0 1 (fontified t)) . -1765) (undo-tree-id1919 . -1) 1766) nil (26369 3810 296122 344000) 0 nil])
([nil nil ((1765 . 1781)) nil (26369 3810 296121 793000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -1780) (undo-tree-id1918 . -1) 1781) nil (26369 3810 296121 492000) 0 nil])
([nil nil ((1780 . 1783)) nil (26369 3810 296120 891000) 0 nil])
([nil nil ((#("+" 0 1 (face font-lock-string-face fontified t)) . -1781) (undo-tree-id1916 . -1) (#("+" 0 1 (face font-lock-string-face fontified t)) . -1782) (undo-tree-id1917 . -1) 1783) nil (26369 3810 296120 450000) 0 nil])
([nil nil ((1781 . 1788)) nil (26369 3810 296119 649000) 0 nil])
([nil nil ((#("o" 0 1 (face font-lock-string-face fontified t)) . -1786) (undo-tree-id1914 . -1) (#("n" 0 1 (face font-lock-string-face fontified t)) . -1787) (undo-tree-id1915 . -1) 1788) nil (26369 3810 296119 328000) 0 nil])
([nil nil ((1786 . 1790)) nil (26369 3810 296118 366000) 0 nil])
([nil nil ((1790 . 1791)) nil (26369 3810 296118 116000) 0 nil])
([nil nil ((1791 . 1796)) nil (26369 3810 296117 865000) 0 nil])
([nil nil ((1796 . 1799)) nil (26369 3810 296117 545000) 0 nil])
([nil nil ((#("." 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1355) (undo-tree-id1908 . -1) (undo-tree-id1909 . -1) (#("." 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1356) (undo-tree-id1910 . -1) (undo-tree-id1911 . -1) (#("." 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1357) (undo-tree-id1912 . -1) (undo-tree-id1913 . -1) 1358) nil (26369 3810 296116 723000) 0 nil])
([nil nil ((1355 . 1370)) nil (26369 3810 296113 918000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1359) (undo-tree-id1861 . -1) (undo-tree-id1862 . -1) (undo-tree-id1863 . -1) (undo-tree-id1864 . -1) (undo-tree-id1865 . -1) (#("o" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1360) (undo-tree-id1866 . -1) (undo-tree-id1867 . -1) (undo-tree-id1868 . -1) (undo-tree-id1869 . -1) (undo-tree-id1870 . -1) (#("s" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1361) (undo-tree-id1871 . -1) (undo-tree-id1872 . -1) (undo-tree-id1873 . -1) (undo-tree-id1874 . -1) (undo-tree-id1875 . -1) (#("i" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1362) (undo-tree-id1876 . -1) (undo-tree-id1877 . -1) (undo-tree-id1878 . -1) (undo-tree-id1879 . -1) (undo-tree-id1880 . -1) (#("t" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1363) (undo-tree-id1881 . -1) (undo-tree-id1882 . -1) (undo-tree-id1883 . -1) (undo-tree-id1884 . -1) (undo-tree-id1885 . -1) (#("i" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1364) (undo-tree-id1886 . -1) (undo-tree-id1887 . -1) (undo-tree-id1888 . -1) (undo-tree-id1889 . -1) (undo-tree-id1890 . -1) (#("o" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1365) (undo-tree-id1891 . -1) (undo-tree-id1892 . -1) (undo-tree-id1893 . -1) (undo-tree-id1894 . -1) (undo-tree-id1895 . -1) (#("n" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1366) (undo-tree-id1896 . -1) (undo-tree-id1897 . -1) (undo-tree-id1898 . -1) (undo-tree-id1899 . -1) (undo-tree-id1900 . -1) (#("[" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t match-data (0 3 0 1 1 2 2 3))) . -1367) (undo-tree-id1901 . -1) (undo-tree-id1902 . -1) (undo-tree-id1903 . -1) (undo-tree-id1904 . -1) (undo-tree-id1905 . -1) (#("0" 0 1 (face py-number-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1368) (undo-tree-id1906 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t match-data (0 3 0 1 1 2 2 3))) . -1369) (undo-tree-id1907 . -1) 1370) nil (26369 3810 296111 934000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . 1358) (undo-tree-id1856 . -1) (undo-tree-id1857 . -1) (undo-tree-id1858 . -1) (undo-tree-id1859 . -1) (undo-tree-id1860 . -1) 1359) nil (26369 3810 295912 622000) 0 nil])
([nil nil ((#("=" 0 1 (face font-lock-operator-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1357) (undo-tree-id1851 . -1) (undo-tree-id1852 . -1) (undo-tree-id1853 . -1) (undo-tree-id1854 . -1) (undo-tree-id1855 . -1) 1358) nil (26369 3810 295910 549000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . 1356) (undo-tree-id1846 . -1) (undo-tree-id1847 . -1) (undo-tree-id1848 . -1) (undo-tree-id1849 . -1) (undo-tree-id1850 . -1) 1357) nil (26369 3810 295908 14000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1355) (undo-tree-id1841 . -1) (undo-tree-id1842 . -1) (undo-tree-id1843 . -1) (undo-tree-id1844 . -1) (undo-tree-id1845 . -1) 1356) nil (26369 3810 295906 270000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t match-data (0 3 0 1 1 2 2 3))) . 1351) (undo-tree-id1835 . -4) (undo-tree-id1836 . -4) (undo-tree-id1837 . -4) (undo-tree-id1838 . -4) (undo-tree-id1839 . -4) (undo-tree-id1840 . -4) 1355) nil (26369 3810 295904 216000) 0 nil])
([nil nil ((1347 . 1355) (#("    " 0 4 (fontified t match-data (0 3 0 1 1 2 2 3))) . 1347) (undo-tree-id1829 . -4) (undo-tree-id1830 . -4) (undo-tree-id1831 . -4) (undo-tree-id1832 . -4) (undo-tree-id1833 . -4) (undo-tree-id1834 . -4) 1351) nil (26369 3810 295901 191000) 0 nil])
([nil nil ((1355 . 1375)) nil (26369 3810 295899 197000) 0 nil])
([nil nil ((1370 . 1375) (#("va" 0 2 (fontified nil)) . -1370) (1370 . 1372) (#("value" 0 5 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1370) (undo-tree-id1695 . -5) (undo-tree-id1696 . -5) (undo-tree-id1697 . -1) (undo-tree-id1698 . -1) (undo-tree-id1699 . -1) (undo-tree-id1700 . -1) (undo-tree-id1701 . -1) (undo-tree-id1702 . -1) (undo-tree-id1703 . -1) (undo-tree-id1704 . -1) (undo-tree-id1705 . -1) (undo-tree-id1706 . -1) (undo-tree-id1707 . -1) (undo-tree-id1708 . -1) (undo-tree-id1709 . -1) (undo-tree-id1710 . -1) (undo-tree-id1711 . -1) (undo-tree-id1712 . -1) (undo-tree-id1713 . -1) (undo-tree-id1714 . -1) (undo-tree-id1715 . -1) (undo-tree-id1716 . -1) (undo-tree-id1717 . -1) (undo-tree-id1718 . -1) (undo-tree-id1719 . -1) (undo-tree-id1720 . -1) (undo-tree-id1721 . -1) (undo-tree-id1722 . -1) (undo-tree-id1723 . -1) (undo-tree-id1724 . -1) (undo-tree-id1725 . -1) (undo-tree-id1726 . -1) (undo-tree-id1727 . -1) (undo-tree-id1728 . -1) (undo-tree-id1729 . -1) (undo-tree-id1730 . -1) (undo-tree-id1731 . -2) (undo-tree-id1732 . -2) (undo-tree-id1733 . -2) (undo-tree-id1734 . -2) (undo-tree-id1735 . -2) (undo-tree-id1736 . -2) (undo-tree-id1737 . -2) (undo-tree-id1738 . -2) (undo-tree-id1739 . -2) (undo-tree-id1740 . -2) (undo-tree-id1741 . -2) (undo-tree-id1742 . -2) (undo-tree-id1743 . -2) (undo-tree-id1744 . -2) (undo-tree-id1745 . -2) (undo-tree-id1746 . -2) (undo-tree-id1747 . -2) (undo-tree-id1748 . -2) (undo-tree-id1749 . -2) (undo-tree-id1750 . -2) (undo-tree-id1751 . -2) (undo-tree-id1752 . -2) (undo-tree-id1753 . -2) (undo-tree-id1754 . -2) (undo-tree-id1755 . -2) (undo-tree-id1756 . -2) (undo-tree-id1757 . -2) (undo-tree-id1758 . -2) (undo-tree-id1759 . -2) (undo-tree-id1760 . -3) (undo-tree-id1761 . -3) (undo-tree-id1762 . -3) (undo-tree-id1763 . -3) (undo-tree-id1764 . -3) (undo-tree-id1765 . -3) (undo-tree-id1766 . -3) (undo-tree-id1767 . -3) (undo-tree-id1768 . -3) (undo-tree-id1769 . -3) (undo-tree-id1770 . -3) (undo-tree-id1771 . -3) (undo-tree-id1772 . -3) (undo-tree-id1773 . -3) (undo-tree-id1774 . -3) (undo-tree-id1775 . -3) (undo-tree-id1776 . -3) (undo-tree-id1777 . -3) (undo-tree-id1778 . -3) (undo-tree-id1779 . -3) (undo-tree-id1780 . -3) (undo-tree-id1781 . -3) (undo-tree-id1782 . -4) (undo-tree-id1783 . -4) (undo-tree-id1784 . -4) (undo-tree-id1785 . -4) (undo-tree-id1786 . -4) (undo-tree-id1787 . -4) (undo-tree-id1788 . -4) (undo-tree-id1789 . -4) (undo-tree-id1790 . -4) (undo-tree-id1791 . -4) (undo-tree-id1792 . -4) (undo-tree-id1793 . -4) (undo-tree-id1794 . -4) (undo-tree-id1795 . -4) (undo-tree-id1796 . -4) (undo-tree-id1797 . -4) (undo-tree-id1798 . -4) (undo-tree-id1799 . -5) (undo-tree-id1800 . -5) (undo-tree-id1801 . -5) (undo-tree-id1802 . -5) (undo-tree-id1803 . -5) (undo-tree-id1804 . -5) (undo-tree-id1805 . -5) (undo-tree-id1806 . -5) (undo-tree-id1807 . -5) (undo-tree-id1808 . -5) (undo-tree-id1809 . -5) (undo-tree-id1810 . -5) (undo-tree-id1811 . -5) (undo-tree-id1812 . -5) (undo-tree-id1813 . -5) (undo-tree-id1814 . -5) (undo-tree-id1815 . -5) (undo-tree-id1816 . -5) (undo-tree-id1817 . -5) (undo-tree-id1818 . -5) (undo-tree-id1819 . -5) (undo-tree-id1820 . -5) (undo-tree-id1821 . -5) (undo-tree-id1822 . -5) (undo-tree-id1823 . -5) (undo-tree-id1824 . -5) (undo-tree-id1825 . -5) (undo-tree-id1826 . -5) (undo-tree-id1827 . -5) (undo-tree-id1828 . -5) 1375) nil (26369 3810 295896 752000) 0 nil])
([nil nil ((1816 . 1817) 1375) nil (26369 3810 295828 461000) 0 nil])
([nil nil ((1375 . 1384) (t 26369 3810 299509 976000)) nil (26369 3844 101969 674000) 0 nil])
([nil nil ((1384 . 1390)) nil (26369 3844 101969 203000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . 1389) (undo-tree-id1937 . -1) 1390) nil (26369 3844 101968 822000) 0 nil])
([nil nil ((#("=" 0 1 (face font-lock-operator-face fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -1388) (undo-tree-id1936 . -1) 1389) nil (26369 3844 101967 870000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . 1387) (undo-tree-id1935 . -1) 1388) nil (26369 3844 101967 299000) 0 nil])
([nil nil ((1387 . 1408)) nil (26369 3844 101966 367000) 0 nil])
([nil nil ((1408 . 1411)) nil (26369 3844 101966 107000) 0 nil])
([nil nil ((1411 . 1428)) nil (26369 3844 101965 926000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -1425) (undo-tree-id1923 . -1) (undo-tree-id1924 . -1) (undo-tree-id1925 . -1) (undo-tree-id1926 . -1) (#("c" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -1426) (undo-tree-id1927 . -1) (undo-tree-id1928 . -1) (undo-tree-id1929 . -1) (undo-tree-id1930 . -1) (#("t" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -1427) (undo-tree-id1931 . -1) (undo-tree-id1932 . -1) (undo-tree-id1933 . -1) (undo-tree-id1934 . -1) 1428) nil (26369 3844 101965 285000) 0 nil])
([nil nil ((1425 . 1434)) nil (26369 3844 101952 30000) 0 nil])
([nil nil ((#("        new" 0 8 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5)) 8 11 (face py-variable-name-face fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . 1376)) nil (26369 3844 101951 529000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . 1376)) nil (26369 3844 101951 148000) 0 nil])
([nil nil ((1376 . 1384)) nil (26369 3844 101950 847000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . 1384)) nil (26369 3844 101949 966000) 0 nil])
([nil nil ((1384 . 1390)) nil (26369 3844 101945 898000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1873) (undo-tree-id1966 . -1) (undo-tree-id1967 . -1) (#("." 0 1 (fontified t)) . -1874) (undo-tree-id1968 . -1) (undo-tree-id1969 . -1) (#("." 0 1 (fontified t)) . -1875) (undo-tree-id1970 . -1) (undo-tree-id1971 . -1) 1876 (t 26369 3844 105823 148000)) nil (26369 3927 417784 778000) 0 nil])
([nil nil ((1873 . 1891)) nil (26369 3927 417780 99000) 0 nil])
([nil nil ((#("2" 0 1 (face py-number-face fontified t)) . -1890) (undo-tree-id1964 . -1) (undo-tree-id1965 . -1) 1891) nil (26369 3927 417779 798000) 0 nil])
([nil nil ((1890 . 1892)) nil (26369 3927 417778 987000) 0 nil])
([nil nil ((1892 . 1897)) nil (26369 3927 417778 756000) 0 nil])
([nil nil ((1897 . 1917)) nil (26369 3927 417778 426000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . 1916)) nil (26369 3927 417778 95000) 0 nil])
([nil nil ((1916 . 1923)) nil (26369 3927 417777 854000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -1922) (undo-tree-id1963 . -1) 1923) nil (26369 3927 417777 464000) 0 nil])
([nil nil ((1922 . 1926)) nil (26369 3927 417776 742000) 0 nil])
([nil nil ((1926 . 1931)) nil (26369 3927 417776 472000) 0 nil])
([nil nil ((1931 . 1940)) nil (26369 3927 417776 191000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -1938) (undo-tree-id1961 . -1) (#("a" 0 1 (fontified t)) . -1939) (undo-tree-id1962 . -1) 1940) nil (26369 3927 417775 851000) 0 nil])
([nil nil ((1938 . 1950)) nil (26369 3927 417774 939000) 0 nil])
([nil nil ((1950 . 1955)) nil (26369 3927 417774 578000) 0 nil])
([nil nil ((1950 . 1960) (#("tes" 0 3 (fontified nil)) . -1950) (1950 . 1953) (#("test_agent" 0 10 (fontified nil)) . -1950) (1950 . 1960) (#("test_" 0 5 (fontified t)) . -1950) (undo-tree-id1957 . -5) (undo-tree-id1958 . -5) (undo-tree-id1959 . -5) (undo-tree-id1960 . -5) 1955) nil (26369 3927 417773 807000) 0 nil])
([nil nil ((1960 . 1972)) nil (26369 3927 417771 623000) 0 nil])
([nil nil ((1974 . 1978) (#("    " 0 4 (fontified nil match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . 1973) (undo-tree-id1938 . -4) (undo-tree-id1939 . -4) (undo-tree-id1940 . -4) (undo-tree-id1941 . -4) (undo-tree-id1942 . -4) (undo-tree-id1943 . -4) (undo-tree-id1944 . -4) (undo-tree-id1945 . -4) (undo-tree-id1946 . -4) (undo-tree-id1947 . -4) (undo-tree-id1948 . -4) (undo-tree-id1949 . -4) (undo-tree-id1950 . -4) (undo-tree-id1951 . -4) (undo-tree-id1952 . -4) (undo-tree-id1953 . -4) (undo-tree-id1954 . -4) (undo-tree-id1955 . -4) (undo-tree-id1956 . -4) (1972 . 1978)) nil (26369 3927 417768 346000) 0 nil])
([nil nil ((1978 . 1985) (t 26369 3927 752210 883000)) nil (26369 3951 500217 409000) 0 nil])
([nil nil ((1978 . 1988) (#("tes" 0 3 (fontified nil)) . -1978) (1978 . 1981) (#("test_brain" 0 10 (fontified nil)) . -1978) (1978 . 1988) (#("test_br" 0 7 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -1978) (undo-tree-id2023 . -7) (undo-tree-id2024 . -7) (undo-tree-id2025 . -7) (undo-tree-id2026 . -7) 1985) nil (26369 3951 500216 567000) 0 nil])
([nil nil ((1988 . 1995)) nil (26369 3951 500214 443000) 0 nil])
([nil nil ((1989 . 2006) (#("up" 0 2 (fontified nil)) . -1989) (1989 . 1991) (#("updateStateValues" 0 17 (fontified nil)) . -1989) (1989 . 2006) (#("update" 0 6 (fontified t match-data (0 7 0 1 1 2 2 3 3 4 4 5 5 6 6 7))) . -1989) (undo-tree-id1972 . -6) (undo-tree-id1973 . -6) (undo-tree-id1974 . -6) (undo-tree-id1975 . -6) (undo-tree-id1976 . -6) (undo-tree-id1977 . -6) (undo-tree-id1978 . -6) (undo-tree-id1979 . -6) (undo-tree-id1980 . -6) (undo-tree-id1981 . -6) (undo-tree-id1982 . -6) (undo-tree-id1983 . -6) (undo-tree-id1984 . -6) (undo-tree-id1985 . -6) (undo-tree-id1986 . -6) (undo-tree-id1987 . -6) (undo-tree-id1988 . -6) (undo-tree-id1989 . -6) (undo-tree-id1990 . -6) (undo-tree-id1991 . -6) (undo-tree-id1992 . -6) (undo-tree-id1993 . -6) (undo-tree-id1994 . -6) (undo-tree-id1995 . -6) (undo-tree-id1996 . -6) (undo-tree-id1997 . -6) (undo-tree-id1998 . -6) (undo-tree-id1999 . -6) (undo-tree-id2000 . -6) (undo-tree-id2001 . -6) (undo-tree-id2002 . -6) (undo-tree-id2003 . -6) (undo-tree-id2004 . -6) (undo-tree-id2005 . -6) (undo-tree-id2006 . -6) (undo-tree-id2007 . -6) (undo-tree-id2008 . -6) (undo-tree-id2009 . -6) (undo-tree-id2010 . -6) (undo-tree-id2011 . -6) (undo-tree-id2012 . -6) (undo-tree-id2013 . -6) (undo-tree-id2014 . -6) (undo-tree-id2015 . -6) (undo-tree-id2016 . -6) (undo-tree-id2017 . -6) (undo-tree-id2018 . -6) (undo-tree-id2019 . -6) (undo-tree-id2020 . -6) (undo-tree-id2021 . -6) (undo-tree-id2022 . -6) 1995) nil (26369 3951 500212 950000) 0 nil])
([nil nil ((2006 . 2008)) nil (26369 3951 500178 174000) 0 nil])
([nil nil ((1926 . 1931) (t 26369 3951 503197 659000)) nil (26370 62258 506421 711000) 0 nil])
([nil nil ((1931 . 1944)) nil (26370 62258 506420 780000) 0 nil])
([nil nil ((1941 . 1951) (#("se" 0 2 (fontified nil)) . -1941) (1941 . 1943) (#("setRewards" 0 10 (fontified nil)) . -1941) (1941 . 1951) (#("set" 0 3 (fontified t)) . -1941) (undo-tree-id30 . -3) (undo-tree-id31 . -3) (undo-tree-id32 . -3) (undo-tree-id33 . -3) 1944) nil (26370 62258 506419 628000) 0 nil])
([nil nil ((1951 . 1952)) nil (26370 62258 506387 347000) 0 nil])
([nil nil ((1952 . 1960)) nil (26370 62258 506386 866000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1958) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (#("e" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1959) (undo-tree-id28 . -1) (undo-tree-id29 . -1) 1960) nil (26370 62258 506385 583000) 0 nil])
([nil nil ((1958 . 1963)) nil (26370 62258 506383 750000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t match-data (0 3 0 1 1 2 2 3))) . -1962) (undo-tree-id24 . -1) (undo-tree-id25 . -1) 1963) nil (26370 62258 506382 507000) 0 nil])
([nil nil ((1962 . 1964)) nil (26370 62258 506381 95000) 0 nil])
([nil nil ((1964 . 1968)) nil (26370 62258 506380 474000) 0 nil])
([nil nil ((1968 . 1970)) nil (26370 62258 506379 862000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1955) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (#("d" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1956) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (#("a" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1957) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (#("r" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1958) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (#("r" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1959) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (#("a" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1960) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (#("y" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1961) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t match-data (0 3 0 1 1 2 2 3))) . -1962) (undo-tree-id16 . -1) (#("[" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t match-data (0 3 0 1 1 2 2 3))) . -1963) (undo-tree-id17 . -1) (#("0" 0 1 (face py-number-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1964) (undo-tree-id18 . -1) (#("," 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1965) (undo-tree-id19 . -1) (#("0" 0 1 (face py-number-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1966) (undo-tree-id20 . -1) (#("," 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1967) (undo-tree-id21 . -1) (#("5" 0 1 (face py-number-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1968) (undo-tree-id22 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-3-face) fontified t match-data (0 3 0 1 1 2 2 3))) . -1969) (undo-tree-id23 . -1) 1970) nil (26370 62258 506376 556000) 0 nil])
([nil nil ((1955 . 1961)) nil (26370 62258 506365 95000) 0 nil])
([nil nil ((#("9" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1960) (undo-tree-id1 . -1) 1961) nil (26370 62258 506364 213000) 0 nil])
([nil nil ((1960 . 1971)) nil (26370 62258 506362 289000) 0 nil])
([nil nil ((1971 . 1978)) nil (26370 62258 506361 648000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . 1977) (undo-tree-id0 . -1) 1978) nil (26370 62258 506360 576000) 0 nil])
([nil nil ((1977 . 1988)) nil (26370 62258 506330 519000) 0 nil])
([nil nil ((#("?" 0 1 (face font-lock-string-face fontified t)) . -1670) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (#("?" 0 1 (face font-lock-string-face fontified t)) . -1671) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (#("?" 0 1 (face font-lock-string-face fontified t)) . -1672) (undo-tree-id98 . -1) (undo-tree-id99 . -1) 1673 (t 26370 62258 646941 558000)) nil (26370 62653 290321 113000) 0 nil])
([nil nil ((1670 . 1680)) nil (26370 62653 290040 709000) 0 nil])
([nil nil ((#("]" 0 1 (face font-lock-string-face fontified t)) . -1675) (undo-tree-id89 . -1) (#("." 0 1 (face font-lock-string-face fontified t)) . -1676) (undo-tree-id90 . -1) (#("s" 0 1 (face font-lock-string-face fontified t)) . -1677) (undo-tree-id91 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -1678) (undo-tree-id92 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -1679) (undo-tree-id93 . -1) 1680) nil (26370 62653 290040 38000) 0 nil])
([nil nil ((1675 . 1684)) nil (26370 62653 290037 443000) 0 nil])
([nil nil ((1684 . 1692)) nil (26370 62653 290036 572000) 0 nil])
([nil nil ((#("w" 0 1 (face font-lock-string-face fontified t)) . -1690) (undo-tree-id87 . -1) (#("a" 0 1 (face font-lock-string-face fontified t)) . -1691) (undo-tree-id88 . -1) 1692) nil (26370 62653 290035 830000) 0 nil])
([nil nil ((1690 . 1699)) nil (26370 62653 290034 738000) 0 nil])
([nil nil ((1699 . 1706)) nil (26370 62653 290034 217000) 0 nil])
([nil nil ((#(")" 0 1 (face font-lock-string-face fontified t)) . -1705) (undo-tree-id85 . -1) (undo-tree-id86 . -1) 1706) nil (26370 62653 290033 756000) 0 nil])
([nil nil ((#("n" 0 1 (face font-lock-string-face fontified t)) . -1697) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (#("p" 0 1 (face font-lock-string-face fontified t)) . -1698) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (#("." 0 1 (face font-lock-string-face fontified t)) . -1699) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (#("a" 0 1 (face font-lock-string-face fontified t)) . -1700) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (#("r" 0 1 (face font-lock-string-face fontified t)) . -1701) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (#("r" 0 1 (face font-lock-string-face fontified t)) . -1702) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (#("a" 0 1 (face font-lock-string-face fontified t)) . -1703) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (#("y" 0 1 (face font-lock-string-face fontified t)) . -1704) (undo-tree-id83 . -1) (undo-tree-id84 . -1) 1705) nil (26370 62653 290031 572000) 0 nil])
([nil nil ((1697 . 1711)) nil (26370 62653 290025 571000) 0 nil])
([nil nil ((1716 . 1724) (#("        " 0 8 (fontified nil)) . 1715) (undo-tree-id68 . -8) (1714 . 1724)) nil (26370 62653 290024 950000) 0 nil])
([nil nil ((1724 . 1725)) nil (26370 62653 290024 188000) 0 nil])
([nil nil ((1725 . 1735)) nil (26370 62653 290023 968000) 0 nil])
([nil nil ((1735 . 1756)) nil (26370 62653 290023 497000) 0 nil])
([nil nil ((1756 . 1758)) nil (26370 62653 290023 96000) 0 nil])
([nil nil ((1758 . 1767)) nil (26370 62653 290022 726000) 0 nil])
([nil nil ((1767 . 1784)) nil (26370 62653 290022 425000) 0 nil])
([nil nil ((1784 . 1798)) nil (26370 62653 290022 185000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 1797) (undo-tree-id67 . -1) 1798) nil (26370 62653 290021 624000) 0 nil])
([nil nil ((1797 . 1809)) nil (26370 62653 290021 93000) 0 nil])
([nil nil ((1809 . 1830)) nil (26370 62653 290020 842000) 0 nil])
([nil nil ((1830 . 1834)) nil (26370 62653 290020 572000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 1833) (undo-tree-id66 . -1) 1834) nil (26370 62653 290019 951000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -1831) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (#("r" 0 1 (face font-lock-keyword-face fontified t)) . -1832) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) 1833) nil (26370 62653 290018 688000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 1830) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) 1831) nil (26370 62653 290014 741000) 0 nil])
([nil nil ((1778 . 1779)) nil (26370 62653 290011 635000) 0 nil])
([nil nil ((1831 . 1846)) nil (26370 62653 290011 395000) 0 nil])
([nil nil ((1846 . 1867)) nil (26370 62653 290011 54000) 0 nil])
([nil nil ((1867 . 1873)) nil (26370 62653 290010 803000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1872) (undo-tree-id52 . -1) 1873) nil (26370 62653 290010 162000) 0 nil])
([nil nil ((1872 . 1879)) nil (26370 62653 290009 491000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . -1874) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (#("r" 0 1 (fontified t)) . -1875) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (#("i" 0 1 (fontified t)) . -1876) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (#("d" 0 1 (fontified t)) . -1877) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (#("." 0 1 (fontified t)) . -1878) (undo-tree-id51 . -1) 1879) nil (26370 62653 290008 58000) 0 nil])
([nil nil ((1874 . 1876)) nil (26370 62653 290000 324000) 0 nil])
([nil nil ((#("F" 0 1 (fontified t)) . -1875) (undo-tree-id34 . -1) 1876) nil (26370 62653 289999 703000) 0 nil])
([nil nil ((1875 . 1896)) nil (26370 62653 289991 928000) 0 nil])
([nil nil ((1896 . 1897)) nil (26370 62653 289991 307000) 0 nil])
([nil nil ((1897 . 1910)) nil (26370 62653 289990 836000) 0 nil])
([nil nil ((1910 . 1919)) nil (26370 62653 289986 909000) 0 nil])
([nil nil ((1919 . 1928) (t 26370 62653 294381 431000)) nil (26370 62681 46282 773000) 0 nil])
([nil nil ((498 . 500) (t 26370 62681 60219 576000)) nil (26370 62987 464821 379000) 0 nil])
([nil nil ((549 . 551)) nil (26370 62987 464816 570000) 0 nil])
([nil nil ((2326 . 2331) (t 26370 62987 468735 910000)) nil (26370 63152 194069 456000) 0 nil])
([nil nil ((2331 . 2352)) nil (26370 63152 194068 314000) 0 nil])
([nil nil ((2352 . 2355)) nil (26370 63152 194063 185000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -2347) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (#("e" 0 1 (fontified t)) . -2348) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (#("w" 0 1 (fontified t)) . -2349) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (#("a" 0 1 (fontified t)) . -2350) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (#("r" 0 1 (fontified t)) . -2351) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (#("d" 0 1 (fontified t)) . -2352) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (#("s" 0 1 (fontified t)) . -2353) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) 2354 (t 26370 63152 198194 676000)) nil (26370 63164 290128 299000) 0 nil])
([nil nil ((#("    print(test_grid.)" 0 4 (fontified t) 4 9 (face py-builtins-face fontified t) 9 10 (face (rainbow-delimiters-depth-1-face) fontified t) 10 20 (fontified t) 20 21 (face (rainbow-delimiters-depth-1-face) fontified t)) . 2327) (undo-tree-id100 . -20) (undo-tree-id101 . -20) (undo-tree-id102 . -20) (undo-tree-id103 . -10) (undo-tree-id104 . -20)) nil (26370 63164 290110 335000) 0 nil])
([nil nil ((2327 . 2331)) nil (26370 63164 290097 390000) 0 nil])
([nil nil ((2331 . 2348)) nil (26370 63164 290092 301000) 0 nil])
([nil nil ((1101 . 1118) (t 26370 63164 294242 596000)) nil (26370 63836 601002 452000) 0 nil])
([nil nil ((1118 . 1124)) nil (26370 63836 601001 641000) 0 nil])
([nil nil ((1124 . 1125)) nil (26370 63836 601000 979000) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-string-face fontified t)) . -1124) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) 1125) nil (26370 63836 601000 158000) 0 nil])
([nil nil ((1124 . 1125)) nil (26370 63836 600997 793000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -1124) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) 1125) nil (26370 63836 600997 12000) 0 nil])
([nil nil ((1124 . 1127)) nil (26370 63836 600994 357000) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-string-face fontified t)) . -1126) (undo-tree-id181 . -1) (undo-tree-id182 . -1) 1127) nil (26370 63836 600993 686000) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-string-face fontified t)) . -1124) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (#("[" 0 1 (face font-lock-string-face fontified t)) . -1125) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) 1126) nil (26370 63836 600991 181000) 0 nil])
([nil nil ((1124 . 1131)) nil (26370 63836 600984 839000) 0 nil])
([nil nil ((#("]" 0 1 (face font-lock-string-face fontified t)) . -1130) (undo-tree-id169 . -1) (undo-tree-id170 . -1) 1131) nil (26370 63836 600983 977000) 0 nil])
([nil nil ((1130 . 1132)) nil (26370 63836 600982 354000) 0 nil])
([nil nil ((#("[" 0 1 (face font-lock-string-face fontified t)) . -1131) (undo-tree-id167 . -1) (undo-tree-id168 . -1) 1132) nil (26370 63836 600981 452000) 0 nil])
([nil nil ((1131 . 1136)) nil (26370 63836 600979 849000) 0 nil])
([nil nil ((#("\\" 0 1 (face font-lock-string-face fontified t)) . -1135) (undo-tree-id165 . -1) (undo-tree-id166 . -1) 1136) nil (26370 63836 600978 858000) 0 nil])
([nil nil ((1135 . 1156)) nil (26370 63836 600977 204000) 0 nil])
([nil nil ((1156 . 1158)) nil (26370 63836 600976 533000) 0 nil])
([nil nil ((#("]" 0 1 (face font-lock-string-face fontified t)) . -1157) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) 1158) nil (26370 63836 600974 980000) 0 nil])
([nil nil ((1157 . 1158)) nil (26370 63836 600667 30000) 0 nil])
([nil nil ((1157 . 1158) (t 26370 63836 604744 333000)) nil (26370 63838 428995 645000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . -498) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (#("1" 0 1 (face py-number-face fontified t)) . -499) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) 500 (t 26370 63838 432759 737000)) nil (26370 63864 72552 216000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . -547) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (#("1" 0 1 (face py-number-face fontified t)) . -548) (undo-tree-id195 . -1) (undo-tree-id196 . -1) 549) nil (26370 63864 72545 72000) 0 nil])
([nil nil ((892 . 913) (t 26370 63864 76976 924000)) nil (26370 63912 510800 898000) 0 nil])
([nil nil ((913 . 920)) nil (26370 63912 510799 906000) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-string-face fontified t)) . -919) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) 920) nil (26370 63912 510799 65000) 0 nil])
([nil nil ((919 . 926)) nil (26370 63912 510795 318000) 0 nil])
([nil nil ((#("n" 0 1 (face font-lock-string-face fontified t)) . -924) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (#("}" 0 1 (face font-lock-string-face fontified t)) . -925) (undo-tree-id211 . -1) (undo-tree-id212 . -1) 926) nil (26370 63912 510794 396000) 0 nil])
([nil nil ((924 . 936)) nil (26370 63912 510789 667000) 0 nil])
([nil nil ((936 . 939)) nil (26370 63912 510788 876000) 0 nil])
([nil nil ((#("O" 0 1 (face font-lock-string-face fontified t)) . -938) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) 939) nil (26370 63912 510787 703000) 0 nil])
([nil nil ((938 . 942)) nil (26370 63912 510772 334000) 0 nil])
([nil nil ((1483 . 1484) (t 26370 63912 522392 455000)) nil (26370 64061 902221 806000) 0 nil])
([nil nil ((1484 . 1493)) nil (26370 64061 902220 784000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . 1489) (undo-tree-id387 . -4) 1493) nil (26370 64061 902220 52000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1485) (undo-tree-id386 . -4) 1489) nil (26370 64061 902219 100000) 0 nil])
([nil nil ((#("\\" 0 1 (fontified t)) . -1483) (undo-tree-id384 . -1) (#("
" 0 1 (fontified t)) . -1484) (undo-tree-id385 . -1) 1485) nil (26370 64061 902218 89000) 0 nil])
([nil nil ((1483 . 1492)) nil (26370 64061 902217 267000) 0 nil])
([nil nil ((1492 . 1513)) nil (26370 64061 902217 7000) 0 nil])
([nil nil ((1513 . 1534)) nil (26370 64061 902216 756000) 0 nil])
([nil nil ((1534 . 1538)) nil (26370 64061 902216 385000) 0 nil])
([nil nil ((1538 . 1540)) nil (26370 64061 902215 904000) 0 nil])
([nil nil ((#("]" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -1539) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) 1540) nil (26370 64061 902215 123000) 0 nil])
([nil nil ((1539 . 1545)) nil (26370 64061 902213 901000) 0 nil])
([nil nil ((1545 . 1551)) nil (26370 64061 902213 159000) 0 nil])
([nil nil ((1551 . 1560)) nil (26370 64061 902212 348000) 0 nil])
([nil nil ((1560 . 1579)) nil (26370 64061 902211 977000) 0 nil])
([nil nil ((1579 . 1588)) nil (26370 64061 902211 416000) 0 nil])
([nil nil ((1588 . 1590)) nil (26370 64061 902210 985000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -1589) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) 1590) nil (26370 64061 902210 144000) 0 nil])
([nil nil ((1589 . 1591)) nil (26370 64061 902208 210000) 0 nil])
([nil nil ((1591 . 1609)) nil (26370 64061 902207 489000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 1608) (undo-tree-id376 . -1) 1609) nil (26370 64061 902206 567000) 0 nil])
([nil nil ((1608 . 1614)) nil (26370 64061 902205 304000) 0 nil])
([nil nil ((1591 . 1592)) nil (26370 64061 902204 824000) 0 nil])
([nil nil ((1615 . 1636)) nil (26370 64061 902204 583000) 0 nil])
([nil nil ((1636 . 1637)) nil (26370 64061 902204 252000) 0 nil])
([nil nil ((1637 . 1638)) nil (26370 64061 902203 922000) 0 nil])
([nil nil ((1638 . 1651)) nil (26370 64061 902203 481000) 0 nil])
([nil nil ((1651 . 1656)) nil (26370 64061 902203 30000) 0 nil])
([nil nil ((1656 . 1658)) nil (26370 64061 902202 569000) 0 nil])
([nil nil ((#("v" 0 1 (fontified t)) . -1657) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) 1658) nil (26370 64061 902201 988000) 0 nil])
([nil nil ((1657 . 1659)) nil (26370 64061 902200 115000) 0 nil])
([nil nil ((1657 . 1667) (#("Va" 0 2 (fontified nil)) . -1657) (1657 . 1659) (#("ValueError" 0 10 (fontified nil)) . -1657) (1657 . 1667) (#("Va" 0 2 (fontified t)) . -1657) (undo-tree-id368 . -2) (undo-tree-id369 . -2) (undo-tree-id370 . -2) (undo-tree-id371 . -2) 1659) nil (26370 64061 902198 912000) 0 nil])
([nil nil ((1667 . 1679)) nil (26370 64061 902194 394000) 0 nil])
([nil nil ((#("a" 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . -1676) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (#("t" 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . -1677) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (#("e" 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . -1678) (undo-tree-id366 . -1) (undo-tree-id367 . -1) 1679) nil (26370 64061 902192 811000) 0 nil])
([nil nil ((#("S" 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . -1674) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (#("t" 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . -1675) (undo-tree-id360 . -1) (undo-tree-id361 . -1) 1676) nil (26370 64061 902189 615000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . 1673) (undo-tree-id356 . -1) (undo-tree-id357 . -1) 1674) nil (26370 64061 902187 701000) 0 nil])
([nil nil ((#("N" 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . -1669) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (#("e" 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . -1670) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (#("x" 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . -1671) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (#("t" 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . -1672) (undo-tree-id354 . -1) (undo-tree-id355 . -1) 1673) nil (26370 64061 902177 442000) 0 nil])
([nil nil ((1669 . 1670)) nil (26370 64061 902173 925000) 0 nil])
([nil nil ((#("[" 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . -1669) (undo-tree-id346 . -1) (undo-tree-id347 . -1) 1670) nil (26370 64061 902173 174000) 0 nil])
([nil nil ((1669 . 1671)) nil (26370 64061 902170 188000) 0 nil])
([nil nil ((1671 . 1684)) nil (26370 64061 902169 657000) 0 nil])
([nil nil ((1668 . 1669)) nil (26370 64061 902168 996000) 0 nil])
([nil nil ((1685 . 1706)) nil (26370 64061 902168 315000) 0 nil])
([nil nil ((1706 . 1710)) nil (26370 64061 902167 603000) 0 nil])
([nil nil ((#("n" 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . -1703) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (#("e" 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . -1704) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (#("w" 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . -1705) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (#("p" 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . -1706) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (#("o" 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . -1707) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (#("s" 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . -1708) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (#("i" 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . -1709) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) 1710) nil (26370 64061 902165 950000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . 1702) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) 1703) nil (26370 64061 902155 230000) 0 nil])
([nil nil ((#("(" 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . -1684) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (#("{" 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . -1685) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (#("n" 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . -1686) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (#("e" 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . -1687) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (#("w" 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . -1688) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (#("_" 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . -1689) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (#("p" 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . -1690) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (#("o" 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . -1691) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (#("s" 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . -1692) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (#("i" 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . -1693) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (#("t" 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . -1694) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (#("i" 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . -1695) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (#("o" 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . -1696) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (#("n" 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . -1697) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (#("[" 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . -1698) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (#("0" 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . -1699) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (#("]" 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . -1700) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (#("," 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . -1701) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) 1702) nil (26370 64061 902149 319000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2))) . 1683) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) 1684) nil (26370 64061 901735 38000) 0 nil])
([nil nil ((1683 . 1684)) nil (26370 64061 901721 703000) 0 nil])
([nil nil ((1684 . 1705)) nil (26370 64061 901720 270000) 0 nil])
([nil nil ((1705 . 1717)) nil (26370 64061 901715 752000) 0 nil])
([nil nil ((#("                    print(f\"N={N}, R={R}, P={P}\")" 0 20 (fontified t) 20 25 (face py-builtins-face fontified t) 25 26 (face (rainbow-delimiters-depth-1-face) fontified t) 26 27 (fontified t) 27 48 (face font-lock-string-face fontified t) 48 49 (face (rainbow-delimiters-depth-1-face) fontified t)) . 893) (undo-tree-id388 . -49) (t 26370 64061 905711 479000)) nil (26370 64080 256223 547000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 893)) nil (26370 64080 256210 322000) 0 nil])
([nil nil ((1516 . 1523) (t 26370 64080 260876 978000)) nil (26370 64229 14934 212000) 0 nil])
([nil nil ((1523 . 1544)) nil (26370 64229 14933 621000) 0 nil])
([nil nil ((1544 . 1546)) nil (26370 64229 14933 260000) 0 nil])
([nil nil ((1546 . 1547)) nil (26370 64229 14932 849000) 0 nil])
([nil nil ((1547 . 1549)) nil (26370 64229 14932 298000) 0 nil])
([nil nil ((#("[" 0 1 (face font-lock-string-face fontified t)) . -1548) (undo-tree-id389 . -1) 1549) nil (26370 64229 14931 286000) 0 nil])
([nil nil ((1548 . 1549)) nil (26370 64229 14921 678000) 0 nil])
([nil nil ((1561 . 1563)) nil (26370 64229 14916 28000) 0 nil])
([nil nil ((1501 . 1510) (t 26370 64229 23240 626000)) nil (26370 64295 819677 859000) 0 nil])
([nil nil ((1510 . 1531)) nil (26370 64295 819676 426000) 0 nil])
([nil nil ((1531 . 1540)) nil (26370 64295 819675 655000) 0 nil])
([nil nil ((#("n" 0 1 (face font-lock-string-face fontified t)) . -1539) (undo-tree-id428 . -1) (undo-tree-id429 . -1) 1540) nil (26370 64295 819674 603000) 0 nil])
([nil nil ((#("t" 0 1 (face font-lock-string-face fontified t)) . -1536) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (#("i" 0 1 (face font-lock-string-face fontified t)) . -1537) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -1538) (undo-tree-id426 . -1) (undo-tree-id427 . -1) 1539) nil (26370 64295 819672 689000) 0 nil])
([nil nil ((#("L" 0 1 (face font-lock-string-face fontified t)) . -1532) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -1533) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (#("c" 0 1 (face font-lock-string-face fontified t)) . -1534) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (#("a" 0 1 (face font-lock-string-face fontified t)) . -1535) (undo-tree-id420 . -1) (undo-tree-id421 . -1) 1536) nil (26370 64295 819669 223000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-string-face fontified t)) . 1531) (undo-tree-id412 . -1) (undo-tree-id413 . -1) 1532) nil (26370 64295 819664 814000) 0 nil])
([nil nil ((#("u" 0 1 (face font-lock-string-face fontified t)) . -1525) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (#("r" 0 1 (face font-lock-string-face fontified t)) . -1526) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (#("r" 0 1 (face font-lock-string-face fontified t)) . -1527) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -1528) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (#("n" 0 1 (face font-lock-string-face fontified t)) . -1529) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -1530) (undo-tree-id410 . -1) (undo-tree-id411 . -1) 1531) nil (26370 64295 819662 119000) 0 nil])
([nil nil ((1525 . 1541)) nil (26370 64295 819653 22000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-string-face fontified t)) . -1540) (undo-tree-id398 . -1) (undo-tree-id399 . -1) 1541) nil (26370 64295 819652 181000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-string-face fontified t)) . -1536) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -1537) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (#("a" 0 1 (face font-lock-string-face fontified t)) . -1538) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -1539) (undo-tree-id396 . -1) (undo-tree-id397 . -1) 1540) nil (26370 64295 819649 546000) 0 nil])
([nil nil ((1536 . 1551)) nil (26370 64295 819636 130000) 0 nil])
([nil nil ((1551 . 1564)) nil (26370 64295 819631 502000) 0 nil])
([nil nil ((#("[" 0 1 (face font-lock-string-face fontified t)) . -1122) (undo-tree-id471 . -1) (undo-tree-id472 . -1) 1123 (t 26370 64295 823864 120000)) nil (26370 64417 112791 912000) 0 nil])
([nil nil ((1122 . 1128)) nil (26370 64417 112790 820000) 0 nil])
([nil nil ((1128 . 1144)) nil (26370 64417 112790 469000) 0 nil])
([nil nil ((#("]" 0 1 (face font-lock-string-face fontified t)) . -1151) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) 1152) nil (26370 64417 112789 187000) 0 nil])
([nil nil ((1151 . 1152)) nil (26370 64417 112413 909000) 0 nil])
([nil nil ((1144 . 1145)) nil (26370 64417 112409 271000) 0 nil])
([nil nil ((#("        print(f\"[LOG] Calculating value for state {position}\")" 0 8 (fontified t) 8 13 (face py-builtins-face fontified t) 13 14 (face (rainbow-delimiters-depth-1-face) fontified t) 14 15 (fontified t) 15 61 (face font-lock-string-face fontified t) 61 62 (face (rainbow-delimiters-depth-1-face) fontified t)) . 1524) (undo-tree-id474 . -51) (undo-tree-id475 . -59) (undo-tree-id476 . -59) (undo-tree-id477 . -22) (undo-tree-id478 . -22) (undo-tree-id479 . -22) (undo-tree-id480 . -22) (undo-tree-id481 . -22) (undo-tree-id482 . -22) (undo-tree-id483 . -22) (undo-tree-id484 . -22) (undo-tree-id485 . -22) (undo-tree-id486 . -22) (undo-tree-id487 . -22) (undo-tree-id488 . -22) (undo-tree-id489 . -22) (undo-tree-id490 . -22) (undo-tree-id491 . -22) (undo-tree-id492 . -22) (undo-tree-id493 . -62) (t 26370 64417 117010 395000)) nil (26370 64543 420963 155000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1524) (undo-tree-id473 . -1)) nil (26370 64543 420948 528000) 0 nil])
([nil nil ((#("(" 0 1 (face font-lock-string-face fontified t)) . -1144) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (#("{" 0 1 (face font-lock-string-face fontified t)) . -1145) (undo-tree-id1145 . 1) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (undo-tree-id1176 . -1) (undo-tree-id1177 . -1) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (#("i" 0 1 (face font-lock-string-face fontified t)) . -1146) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (#("}" 0 1 (face font-lock-string-face fontified t)) . -1147) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (undo-tree-id1507 . -1) (undo-tree-id1508 . -1) (undo-tree-id1509 . -1) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (undo-tree-id1519 . -1) (undo-tree-id1520 . -1) (undo-tree-id1521 . -1) (undo-tree-id1522 . -1) (undo-tree-id1523 . -1) (undo-tree-id1524 . -1) (undo-tree-id1525 . -1) (undo-tree-id1526 . -1) (undo-tree-id1527 . -1) (undo-tree-id1528 . -1) (undo-tree-id1529 . -1) (undo-tree-id1530 . -1) (undo-tree-id1531 . -1) (undo-tree-id1532 . -1) (undo-tree-id1533 . -1) (undo-tree-id1534 . -1) (undo-tree-id1535 . -1) (undo-tree-id1536 . -1) (undo-tree-id1537 . -1) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) (#("," 0 1 (face font-lock-string-face fontified t)) . -1148) (undo-tree-id1542 . -1) (undo-tree-id1543 . -1) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (undo-tree-id1546 . -1) (undo-tree-id1547 . -1) (undo-tree-id1548 . -1) (undo-tree-id1549 . -1) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) (undo-tree-id1552 . -1) (undo-tree-id1553 . -1) (undo-tree-id1554 . -1) (undo-tree-id1555 . -1) (undo-tree-id1556 . -1) (undo-tree-id1557 . -1) (undo-tree-id1558 . -1) (undo-tree-id1559 . -1) (undo-tree-id1560 . -1) (undo-tree-id1561 . -1) (undo-tree-id1562 . -1) (undo-tree-id1563 . -1) (undo-tree-id1564 . -1) (undo-tree-id1565 . -1) (undo-tree-id1566 . -1) (undo-tree-id1567 . -1) (undo-tree-id1568 . -1) (undo-tree-id1569 . -1) (undo-tree-id1570 . -1) (undo-tree-id1571 . -1) (undo-tree-id1572 . -1) (undo-tree-id1573 . -1) (undo-tree-id1574 . -1) (undo-tree-id1575 . -1) (undo-tree-id1576 . -1) (undo-tree-id1577 . -1) (undo-tree-id1578 . -1) (undo-tree-id1579 . -1) (undo-tree-id1580 . -1) (undo-tree-id1581 . -1) (undo-tree-id1582 . -1) (undo-tree-id1583 . -1) (undo-tree-id1584 . -1) (undo-tree-id1585 . -1) (undo-tree-id1586 . -1) (undo-tree-id1587 . -1) (undo-tree-id1588 . -1) (undo-tree-id1589 . -1) (undo-tree-id1590 . -1) (undo-tree-id1591 . -1) (undo-tree-id1592 . -1) (undo-tree-id1593 . -1) (undo-tree-id1594 . -1) (undo-tree-id1595 . -1) (undo-tree-id1596 . -1) (undo-tree-id1597 . -1) (undo-tree-id1598 . -1) (undo-tree-id1599 . -1) (undo-tree-id1600 . -1) (undo-tree-id1601 . -1) (undo-tree-id1602 . -1) (undo-tree-id1603 . -1) (undo-tree-id1604 . -1) (undo-tree-id1605 . -1) (undo-tree-id1606 . -1) (undo-tree-id1607 . -1) (undo-tree-id1608 . -1) (undo-tree-id1609 . -1) (undo-tree-id1610 . -1) (undo-tree-id1611 . -1) (undo-tree-id1612 . -1) (undo-tree-id1613 . -1) (undo-tree-id1614 . -1) (undo-tree-id1615 . -1) (undo-tree-id1616 . -1) (undo-tree-id1617 . -1) (undo-tree-id1618 . -1) (undo-tree-id1619 . -1) (undo-tree-id1620 . -1) (undo-tree-id1621 . -1) (undo-tree-id1622 . -1) (undo-tree-id1623 . -1) (undo-tree-id1624 . -1) (undo-tree-id1625 . -1) (undo-tree-id1626 . -1) (undo-tree-id1627 . -1) (undo-tree-id1628 . -1) (undo-tree-id1629 . -1) (undo-tree-id1630 . -1) (undo-tree-id1631 . -1) (undo-tree-id1632 . -1) (undo-tree-id1633 . -1) (undo-tree-id1634 . -1) (undo-tree-id1635 . -1) (undo-tree-id1636 . -1) (undo-tree-id1637 . -1) (undo-tree-id1638 . -1) (undo-tree-id1639 . -1) (undo-tree-id1640 . -1) (undo-tree-id1641 . -1) (undo-tree-id1642 . -1) (undo-tree-id1643 . -1) (undo-tree-id1644 . -1) (undo-tree-id1645 . -1) (undo-tree-id1646 . -1) (undo-tree-id1647 . -1) (undo-tree-id1648 . -1) (undo-tree-id1649 . -1) (undo-tree-id1650 . -1) (undo-tree-id1651 . -1) (undo-tree-id1652 . -1) (undo-tree-id1653 . -1) (undo-tree-id1654 . -1) (undo-tree-id1655 . -1) (undo-tree-id1656 . -1) (undo-tree-id1657 . -1) (#("{" 0 1 (face font-lock-string-face fontified t)) . -1149) (undo-tree-id1658 . -1) (undo-tree-id1659 . -1) (undo-tree-id1660 . -1) (undo-tree-id1661 . -1) (undo-tree-id1662 . -1) (undo-tree-id1663 . -1) (undo-tree-id1664 . -1) (undo-tree-id1665 . -1) (undo-tree-id1666 . -1) (undo-tree-id1667 . -1) (undo-tree-id1668 . -1) (undo-tree-id1669 . -1) (undo-tree-id1670 . -1) (undo-tree-id1671 . -1) (undo-tree-id1672 . -1) (undo-tree-id1673 . -1) (undo-tree-id1674 . -1) (undo-tree-id1675 . -1) (undo-tree-id1676 . -1) (undo-tree-id1677 . -1) (undo-tree-id1678 . -1) (undo-tree-id1679 . -1) (undo-tree-id1680 . -1) (undo-tree-id1681 . -1) (undo-tree-id1682 . -1) (undo-tree-id1683 . -1) (undo-tree-id1684 . -1) (undo-tree-id1685 . -1) (undo-tree-id1686 . -1) (undo-tree-id1687 . -1) (undo-tree-id1688 . -1) (undo-tree-id1689 . -1) (undo-tree-id1690 . -1) (undo-tree-id1691 . -1) (undo-tree-id1692 . -1) (undo-tree-id1693 . -1) (undo-tree-id1694 . -1) (undo-tree-id1695 . -1) (undo-tree-id1696 . -1) (undo-tree-id1697 . -1) (undo-tree-id1698 . -1) (undo-tree-id1699 . -1) (undo-tree-id1700 . -1) (undo-tree-id1701 . -1) (undo-tree-id1702 . -1) (undo-tree-id1703 . -1) (undo-tree-id1704 . -1) (undo-tree-id1705 . -1) (undo-tree-id1706 . -1) (undo-tree-id1707 . -1) (undo-tree-id1708 . -1) (undo-tree-id1709 . -1) (undo-tree-id1710 . -1) (undo-tree-id1711 . -1) (undo-tree-id1712 . -1) (undo-tree-id1713 . -1) (undo-tree-id1714 . -1) (undo-tree-id1715 . -1) (undo-tree-id1716 . -1) (undo-tree-id1717 . -1) (undo-tree-id1718 . -1) (undo-tree-id1719 . -1) (undo-tree-id1720 . -1) (undo-tree-id1721 . -1) (undo-tree-id1722 . -1) (undo-tree-id1723 . -1) (undo-tree-id1724 . -1) (undo-tree-id1725 . -1) (undo-tree-id1726 . -1) (undo-tree-id1727 . -1) (undo-tree-id1728 . -1) (undo-tree-id1729 . -1) (undo-tree-id1730 . -1) (undo-tree-id1731 . -1) (undo-tree-id1732 . -1) (undo-tree-id1733 . -1) (undo-tree-id1734 . -1) (undo-tree-id1735 . -1) (undo-tree-id1736 . -1) (undo-tree-id1737 . -1) (undo-tree-id1738 . -1) (undo-tree-id1739 . -1) (undo-tree-id1740 . -1) (undo-tree-id1741 . -1) (undo-tree-id1742 . -1) (undo-tree-id1743 . -1) (undo-tree-id1744 . -1) (undo-tree-id1745 . -1) (undo-tree-id1746 . -1) (undo-tree-id1747 . -1) (undo-tree-id1748 . -1) (undo-tree-id1749 . -1) (undo-tree-id1750 . -1) (undo-tree-id1751 . -1) (undo-tree-id1752 . -1) (undo-tree-id1753 . -1) (undo-tree-id1754 . -1) (undo-tree-id1755 . -1) (undo-tree-id1756 . -1) (undo-tree-id1757 . -1) (undo-tree-id1758 . -1) (undo-tree-id1759 . -1) (undo-tree-id1760 . -1) (undo-tree-id1761 . -1) (undo-tree-id1762 . -1) (undo-tree-id1763 . -1) (undo-tree-id1764 . -1) (undo-tree-id1765 . -1) (#("j" 0 1 (face font-lock-string-face fontified t)) . -1150) (undo-tree-id1766 . -1) (undo-tree-id1767 . -1) (undo-tree-id1768 . -1) (undo-tree-id1769 . -1) (undo-tree-id1770 . -1) (undo-tree-id1771 . -1) (undo-tree-id1772 . -1) (undo-tree-id1773 . -1) (undo-tree-id1774 . -1) (undo-tree-id1775 . -1) (undo-tree-id1776 . -1) (undo-tree-id1777 . -1) (undo-tree-id1778 . -1) (undo-tree-id1779 . -1) (undo-tree-id1780 . -1) (undo-tree-id1781 . -1) (undo-tree-id1782 . -1) (undo-tree-id1783 . -1) (undo-tree-id1784 . -1) (undo-tree-id1785 . -1) (undo-tree-id1786 . -1) (undo-tree-id1787 . -1) (undo-tree-id1788 . -1) (undo-tree-id1789 . -1) (undo-tree-id1790 . -1) (undo-tree-id1791 . -1) (undo-tree-id1792 . -1) (undo-tree-id1793 . -1) (undo-tree-id1794 . -1) (undo-tree-id1795 . -1) (undo-tree-id1796 . -1) (undo-tree-id1797 . -1) (undo-tree-id1798 . -1) (undo-tree-id1799 . -1) (undo-tree-id1800 . -1) (undo-tree-id1801 . -1) (undo-tree-id1802 . -1) (undo-tree-id1803 . -1) (undo-tree-id1804 . -1) (undo-tree-id1805 . -1) (undo-tree-id1806 . -1) (undo-tree-id1807 . -1) (undo-tree-id1808 . -1) (undo-tree-id1809 . -1) (undo-tree-id1810 . -1) (undo-tree-id1811 . -1) (undo-tree-id1812 . -1) (undo-tree-id1813 . -1) (undo-tree-id1814 . -1) (undo-tree-id1815 . -1) (undo-tree-id1816 . -1) (undo-tree-id1817 . -1) (undo-tree-id1818 . -1) (undo-tree-id1819 . -1) (undo-tree-id1820 . -1) (undo-tree-id1821 . -1) (undo-tree-id1822 . -1) (undo-tree-id1823 . -1) (undo-tree-id1824 . -1) (undo-tree-id1825 . -1) (undo-tree-id1826 . -1) (undo-tree-id1827 . -1) (undo-tree-id1828 . -1) (undo-tree-id1829 . -1) (undo-tree-id1830 . -1) (undo-tree-id1831 . -1) (undo-tree-id1832 . -1) (undo-tree-id1833 . -1) (undo-tree-id1834 . -1) (undo-tree-id1835 . -1) (undo-tree-id1836 . -1) (undo-tree-id1837 . -1) (undo-tree-id1838 . -1) (undo-tree-id1839 . -1) (undo-tree-id1840 . -1) (undo-tree-id1841 . -1) (undo-tree-id1842 . -1) (undo-tree-id1843 . -1) (undo-tree-id1844 . -1) (undo-tree-id1845 . -1) (undo-tree-id1846 . -1) (undo-tree-id1847 . -1) (undo-tree-id1848 . -1) (undo-tree-id1849 . -1) (undo-tree-id1850 . -1) (undo-tree-id1851 . -1) (undo-tree-id1852 . -1) (undo-tree-id1853 . -1) (undo-tree-id1854 . -1) (undo-tree-id1855 . -1) (undo-tree-id1856 . -1) (undo-tree-id1857 . -1) (undo-tree-id1858 . -1) (undo-tree-id1859 . -1) (undo-tree-id1860 . -1) (undo-tree-id1861 . -1) (undo-tree-id1862 . -1) (undo-tree-id1863 . -1) (undo-tree-id1864 . -1) (undo-tree-id1865 . -1) (#("}" 0 1 (face font-lock-string-face fontified t)) . -1151) (undo-tree-id1866 . -1) (undo-tree-id1867 . -1) (undo-tree-id1868 . -1) (undo-tree-id1869 . -1) (undo-tree-id1870 . -1) (undo-tree-id1871 . -1) (undo-tree-id1872 . -1) (undo-tree-id1873 . -1) (undo-tree-id1874 . -1) (undo-tree-id1875 . -1) (undo-tree-id1876 . -1) (undo-tree-id1877 . -1) (undo-tree-id1878 . -1) (undo-tree-id1879 . -1) (undo-tree-id1880 . -1) (undo-tree-id1881 . -1) (undo-tree-id1882 . -1) (undo-tree-id1883 . -1) (undo-tree-id1884 . -1) (undo-tree-id1885 . -1) (undo-tree-id1886 . -1) (undo-tree-id1887 . -1) (undo-tree-id1888 . -1) (undo-tree-id1889 . -1) (undo-tree-id1890 . -1) (undo-tree-id1891 . -1) (undo-tree-id1892 . -1) (undo-tree-id1893 . -1) (undo-tree-id1894 . -1) (undo-tree-id1895 . -1) (undo-tree-id1896 . -1) (undo-tree-id1897 . -1) (undo-tree-id1898 . -1) (undo-tree-id1899 . -1) (undo-tree-id1900 . -1) (undo-tree-id1901 . -1) (undo-tree-id1902 . -1) (undo-tree-id1903 . -1) (undo-tree-id1904 . -1) (undo-tree-id1905 . -1) (undo-tree-id1906 . -1) (undo-tree-id1907 . -1) (undo-tree-id1908 . -1) (undo-tree-id1909 . -1) (undo-tree-id1910 . -1) (undo-tree-id1911 . -1) (undo-tree-id1912 . -1) (undo-tree-id1913 . -1) (undo-tree-id1914 . -1) (undo-tree-id1915 . -1) (undo-tree-id1916 . -1) (undo-tree-id1917 . -1) (undo-tree-id1918 . -1) (undo-tree-id1919 . -1) (undo-tree-id1920 . -1) (undo-tree-id1921 . -1) (undo-tree-id1922 . -1) (undo-tree-id1923 . -1) (undo-tree-id1924 . -1) (undo-tree-id1925 . -1) (undo-tree-id1926 . -1) (undo-tree-id1927 . -1) (undo-tree-id1928 . -1) (undo-tree-id1929 . -1) (undo-tree-id1930 . -1) (undo-tree-id1931 . -1) (undo-tree-id1932 . -1) (undo-tree-id1933 . -1) (undo-tree-id1934 . -1) (undo-tree-id1935 . -1) (undo-tree-id1936 . -1) (undo-tree-id1937 . -1) (undo-tree-id1938 . -1) (undo-tree-id1939 . -1) (undo-tree-id1940 . -1) (undo-tree-id1941 . -1) (undo-tree-id1942 . -1) (undo-tree-id1943 . -1) (undo-tree-id1944 . -1) (undo-tree-id1945 . -1) (undo-tree-id1946 . -1) (undo-tree-id1947 . -1) (undo-tree-id1948 . -1) (undo-tree-id1949 . -1) (undo-tree-id1950 . -1) (#(")" 0 1 (face font-lock-string-face fontified t)) . -1152) (undo-tree-id1951 . -1) (undo-tree-id1952 . -1) (undo-tree-id1953 . -1) (undo-tree-id1954 . -1) (undo-tree-id1955 . -1) (undo-tree-id1956 . -1) (undo-tree-id1957 . -1) (undo-tree-id1958 . -1) (undo-tree-id1959 . -1) (undo-tree-id1960 . -1) (undo-tree-id1961 . -1) (undo-tree-id1962 . -1) (undo-tree-id1963 . -1) (undo-tree-id1964 . -1) (undo-tree-id1965 . -1) (undo-tree-id1966 . -1) (undo-tree-id1967 . -1) (undo-tree-id1968 . -1) (undo-tree-id1969 . -1) (undo-tree-id1970 . -1) (undo-tree-id1971 . -1) (undo-tree-id1972 . -1) (undo-tree-id1973 . -1) (undo-tree-id1974 . -1) (undo-tree-id1975 . -1) (undo-tree-id1976 . -1) (undo-tree-id1977 . -1) (undo-tree-id1978 . -1) (undo-tree-id1979 . -1) (undo-tree-id1980 . -1) (undo-tree-id1981 . -1) (undo-tree-id1982 . -1) (undo-tree-id1983 . -1) (undo-tree-id1984 . -1) (undo-tree-id1985 . -1) (undo-tree-id1986 . -1) (undo-tree-id1987 . -1) (undo-tree-id1988 . -1) (undo-tree-id1989 . -1) (undo-tree-id1990 . -1) (undo-tree-id1991 . -1) (undo-tree-id1992 . -1) (undo-tree-id1993 . -1) (undo-tree-id1994 . -1) (undo-tree-id1995 . -1) (undo-tree-id1996 . -1) (undo-tree-id1997 . -1) (undo-tree-id1998 . -1) (undo-tree-id1999 . -1) (undo-tree-id2000 . -1) (undo-tree-id2001 . -1) (undo-tree-id2002 . -1) (undo-tree-id2003 . -1) (undo-tree-id2004 . -1) (undo-tree-id2005 . -1) (undo-tree-id2006 . -1) 1153 (t 26370 64543 428371 418000)) nil (26370 64595 483174 657000) 0 nil])
([nil nil ((1144 . 1153)) nil (26370 64595 482832 337000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-string-face fontified t)) . -1148) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (#("r" 0 1 (face font-lock-string-face fontified t)) . -1149) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (#("n" 0 1 (face font-lock-string-face fontified t)) . -1150) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -1151) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (#("_" 0 1 (face font-lock-string-face fontified t)) . -1152) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) 1153) nil (26370 64595 482828 850000) 0 nil])
([nil nil ((1148 . 1153)) nil (26370 64595 482749 389000) 0 nil])
([nil nil ((1145 . 1161) (#("curren" 0 6 (fontified nil)) . -1145) (1145 . 1151) (#("current_position" 0 16 (fontified nil)) . -1145) (1145 . 1161) (#("current_" 0 8 (face font-lock-string-face fontified t)) . -1145) (undo-tree-id494 . -8) (undo-tree-id495 . -8) (undo-tree-id496 . -3) (undo-tree-id497 . -3) (undo-tree-id498 . -3) (undo-tree-id499 . -3) (undo-tree-id500 . -3) (undo-tree-id501 . -3) (undo-tree-id502 . -3) (undo-tree-id503 . -3) (undo-tree-id504 . -3) (undo-tree-id505 . -3) (undo-tree-id506 . -3) (undo-tree-id507 . -3) (undo-tree-id508 . -3) (undo-tree-id509 . -3) (undo-tree-id510 . -3) (undo-tree-id511 . -3) (undo-tree-id512 . -3) (undo-tree-id513 . -3) (undo-tree-id514 . -3) (undo-tree-id515 . -3) (undo-tree-id516 . -3) (undo-tree-id517 . -3) (undo-tree-id518 . -3) (undo-tree-id519 . -3) (undo-tree-id520 . -3) (undo-tree-id521 . -3) (undo-tree-id522 . -3) (undo-tree-id523 . -3) (undo-tree-id524 . -3) (undo-tree-id525 . -3) (undo-tree-id526 . -3) (undo-tree-id527 . -3) (undo-tree-id528 . -3) (undo-tree-id529 . -3) (undo-tree-id530 . -3) (undo-tree-id531 . -3) (undo-tree-id532 . -3) (undo-tree-id533 . -3) (undo-tree-id534 . -3) (undo-tree-id535 . -3) (undo-tree-id536 . -3) (undo-tree-id537 . -3) (undo-tree-id538 . -3) (undo-tree-id539 . -3) (undo-tree-id540 . -3) (undo-tree-id541 . -3) (undo-tree-id542 . -3) (undo-tree-id543 . -3) (undo-tree-id544 . -3) (undo-tree-id545 . -3) (undo-tree-id546 . -3) (undo-tree-id547 . -3) (undo-tree-id548 . -3) (undo-tree-id549 . -3) (undo-tree-id550 . -3) (undo-tree-id551 . -3) (undo-tree-id552 . -3) (undo-tree-id553 . -3) (undo-tree-id554 . -3) (undo-tree-id555 . -3) (undo-tree-id556 . -3) (undo-tree-id557 . -3) (undo-tree-id558 . -3) (undo-tree-id559 . -3) (undo-tree-id560 . -3) (undo-tree-id561 . -3) (undo-tree-id562 . -3) (undo-tree-id563 . -3) (undo-tree-id564 . -3) (undo-tree-id565 . -3) (undo-tree-id566 . -3) (undo-tree-id567 . -3) (undo-tree-id568 . -3) (undo-tree-id569 . -3) (undo-tree-id570 . -3) (undo-tree-id571 . -3) (undo-tree-id572 . -3) (undo-tree-id573 . -3) (undo-tree-id574 . -3) (undo-tree-id575 . -3) (undo-tree-id576 . -3) (undo-tree-id577 . -3) (undo-tree-id578 . -3) (undo-tree-id579 . -3) (undo-tree-id580 . -3) (undo-tree-id581 . -4) (undo-tree-id582 . -4) (undo-tree-id583 . -4) (undo-tree-id584 . -4) (undo-tree-id585 . -4) (undo-tree-id586 . -4) (undo-tree-id587 . -4) (undo-tree-id588 . -4) (undo-tree-id589 . -4) (undo-tree-id590 . -4) (undo-tree-id591 . -4) (undo-tree-id592 . -4) (undo-tree-id593 . -4) (undo-tree-id594 . -4) (undo-tree-id595 . -4) (undo-tree-id596 . -4) (undo-tree-id597 . -4) (undo-tree-id598 . -4) (undo-tree-id599 . -4) (undo-tree-id600 . -4) (undo-tree-id601 . -4) (undo-tree-id602 . -4) (undo-tree-id603 . -4) (undo-tree-id604 . -4) (undo-tree-id605 . -4) (undo-tree-id606 . -4) (undo-tree-id607 . -4) (undo-tree-id608 . -4) (undo-tree-id609 . -4) (undo-tree-id610 . -4) (undo-tree-id611 . -4) (undo-tree-id612 . -4) (undo-tree-id613 . -4) (undo-tree-id614 . -4) (undo-tree-id615 . -4) (undo-tree-id616 . -4) (undo-tree-id617 . -4) (undo-tree-id618 . -4) (undo-tree-id619 . -4) (undo-tree-id620 . -4) (undo-tree-id621 . -4) (undo-tree-id622 . -4) (undo-tree-id623 . -4) (undo-tree-id624 . -4) (undo-tree-id625 . -4) (undo-tree-id626 . -4) (undo-tree-id627 . -4) (undo-tree-id628 . -4) (undo-tree-id629 . -4) (undo-tree-id630 . -4) (undo-tree-id631 . -4) (undo-tree-id632 . -4) (undo-tree-id633 . -5) (undo-tree-id634 . -5) (undo-tree-id635 . -5) (undo-tree-id636 . -5) (undo-tree-id637 . -5) (undo-tree-id638 . -5) (undo-tree-id639 . -5) (undo-tree-id640 . -5) (undo-tree-id641 . -5) (undo-tree-id642 . -5) (undo-tree-id643 . -5) (undo-tree-id644 . -5) (undo-tree-id645 . -5) (undo-tree-id646 . -5) (undo-tree-id647 . -5) (undo-tree-id648 . -5) (undo-tree-id649 . -5) (undo-tree-id650 . -5) (undo-tree-id651 . -5) (undo-tree-id652 . -5) (undo-tree-id653 . -5) (undo-tree-id654 . -5) (undo-tree-id655 . -5) (undo-tree-id656 . -5) (undo-tree-id657 . -5) (undo-tree-id658 . -5) (undo-tree-id659 . -5) (undo-tree-id660 . -5) (undo-tree-id661 . -5) (undo-tree-id662 . -5) (undo-tree-id663 . -5) (undo-tree-id664 . -6) (undo-tree-id665 . -6) (undo-tree-id666 . -6) (undo-tree-id667 . -6) (undo-tree-id668 . -6) (undo-tree-id669 . -6) (undo-tree-id670 . -6) (undo-tree-id671 . -6) (undo-tree-id672 . -6) (undo-tree-id673 . -6) (undo-tree-id674 . -6) (undo-tree-id675 . -6) (undo-tree-id676 . -6) (undo-tree-id677 . -6) (undo-tree-id678 . -6) (undo-tree-id679 . -6) (undo-tree-id680 . -6) (undo-tree-id681 . -6) (undo-tree-id682 . -6) (undo-tree-id683 . -6) (undo-tree-id684 . -6) (undo-tree-id685 . -6) (undo-tree-id686 . -6) (undo-tree-id687 . -7) (undo-tree-id688 . -7) (undo-tree-id689 . -7) (undo-tree-id690 . -7) (undo-tree-id691 . -7) (undo-tree-id692 . -7) (undo-tree-id693 . -7) (undo-tree-id694 . -7) (undo-tree-id695 . -7) (undo-tree-id696 . -7) (undo-tree-id697 . -7) (undo-tree-id698 . -7) (undo-tree-id699 . -7) (undo-tree-id700 . -7) (undo-tree-id701 . -7) (undo-tree-id702 . -7) (undo-tree-id703 . -7) (undo-tree-id704 . -7) (undo-tree-id705 . -7) (undo-tree-id706 . -7) (undo-tree-id707 . -7) (undo-tree-id708 . -7) (undo-tree-id709 . -7) (undo-tree-id710 . -7) (undo-tree-id711 . -7) (undo-tree-id712 . -7) (undo-tree-id713 . -7) (undo-tree-id714 . -7) (undo-tree-id715 . -7) (undo-tree-id716 . -7) (undo-tree-id717 . -7) (undo-tree-id718 . -7) (undo-tree-id719 . -7) (undo-tree-id720 . -7) (undo-tree-id721 . -7) (undo-tree-id722 . -7) (undo-tree-id723 . -7) (undo-tree-id724 . -8) (undo-tree-id725 . -8) (undo-tree-id726 . -8) (undo-tree-id727 . -8) (undo-tree-id728 . -8) (undo-tree-id729 . -8) (undo-tree-id730 . -8) (undo-tree-id731 . -8) (undo-tree-id732 . -8) (undo-tree-id733 . -8) (undo-tree-id734 . -8) (undo-tree-id735 . -8) (undo-tree-id736 . -8) (undo-tree-id737 . -8) (undo-tree-id738 . -8) (undo-tree-id739 . -8) (undo-tree-id740 . -8) (undo-tree-id741 . -8) (undo-tree-id742 . -8) (undo-tree-id743 . -8) (undo-tree-id744 . -8) (undo-tree-id745 . -8) (undo-tree-id746 . -8) (undo-tree-id747 . -8) (undo-tree-id748 . -8) (undo-tree-id749 . -8) (undo-tree-id750 . -8) (undo-tree-id751 . -8) (undo-tree-id752 . -8) (undo-tree-id753 . -8) (undo-tree-id754 . -8) (undo-tree-id755 . -8) 1153) nil (26370 64595 482745 472000) 0 nil])
([nil nil ((1161 . 1162)) nil (26370 64595 482345 473000) 0 nil])
([nil nil ((590 . 607) (t 26370 64595 488590 154000)) nil (26370 64626 789991 444000) 0 nil])
([nil nil ((607 . 623)) nil (26370 64626 789990 773000) 0 nil])
([nil nil ((623 . 631)) nil (26370 64626 789990 91000) 0 nil])
([nil nil ((#("c" 0 1 (face font-lock-string-face fontified t)) . -626) (undo-tree-id2184 . -1) (undo-tree-id2185 . -1) (#("u" 0 1 (face font-lock-string-face fontified t)) . -627) (undo-tree-id2186 . -1) (undo-tree-id2187 . -1) (#("l" 0 1 (face font-lock-string-face fontified t)) . -628) (undo-tree-id2188 . -1) (undo-tree-id2189 . -1) (#("a" 0 1 (face font-lock-string-face fontified t)) . -629) (undo-tree-id2190 . -1) (undo-tree-id2191 . -1) (#("t" 0 1 (face font-lock-string-face fontified t)) . -630) (undo-tree-id2192 . -1) (undo-tree-id2193 . -1) 631) nil (26370 64626 789988 769000) 0 nil])
([nil nil ((626 . 647)) nil (26370 64626 789984 461000) 0 nil])
([nil nil ((647 . 653)) nil (26370 64626 789984 50000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-string-face fontified t)) . -652) (undo-tree-id2180 . -1) (undo-tree-id2181 . -1) (undo-tree-id2182 . -1) (undo-tree-id2183 . -1) 653) nil (26370 64626 789983 178000) 0 nil])
([nil nil ((652 . 656)) nil (26370 64626 789980 683000) 0 nil])
([nil nil ((652 . 668) (#("curr" 0 4 (fontified nil)) . -652) (652 . 656) (#("current_position" 0 16 (fontified nil)) . -652) (652 . 668) (#("curr" 0 4 (face font-lock-string-face fontified t)) . -652) (undo-tree-id2072 . -4) (undo-tree-id2073 . -4) (undo-tree-id2074 . -1) (undo-tree-id2075 . -1) (undo-tree-id2076 . -1) (undo-tree-id2077 . -1) (undo-tree-id2078 . -2) (undo-tree-id2079 . -2) (undo-tree-id2080 . -2) (undo-tree-id2081 . -2) (undo-tree-id2082 . -2) (undo-tree-id2083 . -2) (undo-tree-id2084 . -2) (undo-tree-id2085 . -3) (undo-tree-id2086 . -3) (undo-tree-id2087 . -3) (undo-tree-id2088 . -3) (undo-tree-id2089 . -3) (undo-tree-id2090 . -3) (undo-tree-id2091 . -3) (undo-tree-id2092 . -3) (undo-tree-id2093 . -3) (undo-tree-id2094 . -3) (undo-tree-id2095 . -3) (undo-tree-id2096 . -3) (undo-tree-id2097 . -3) (undo-tree-id2098 . -3) (undo-tree-id2099 . -3) (undo-tree-id2100 . -3) (undo-tree-id2101 . -3) (undo-tree-id2102 . -3) (undo-tree-id2103 . -3) (undo-tree-id2104 . -3) (undo-tree-id2105 . -3) (undo-tree-id2106 . -3) (undo-tree-id2107 . -3) (undo-tree-id2108 . -3) (undo-tree-id2109 . -3) (undo-tree-id2110 . -3) (undo-tree-id2111 . -3) (undo-tree-id2112 . -3) (undo-tree-id2113 . -3) (undo-tree-id2114 . -3) (undo-tree-id2115 . -3) (undo-tree-id2116 . -3) (undo-tree-id2117 . -3) (undo-tree-id2118 . -3) (undo-tree-id2119 . -3) (undo-tree-id2120 . -3) (undo-tree-id2121 . -3) (undo-tree-id2122 . -3) (undo-tree-id2123 . -3) (undo-tree-id2124 . -3) (undo-tree-id2125 . -4) (undo-tree-id2126 . -4) (undo-tree-id2127 . -4) (undo-tree-id2128 . -4) (undo-tree-id2129 . -4) (undo-tree-id2130 . -4) (undo-tree-id2131 . -4) (undo-tree-id2132 . -4) (undo-tree-id2133 . -4) (undo-tree-id2134 . -4) (undo-tree-id2135 . -4) (undo-tree-id2136 . -4) (undo-tree-id2137 . -4) (undo-tree-id2138 . -4) (undo-tree-id2139 . -4) (undo-tree-id2140 . -4) (undo-tree-id2141 . -4) (undo-tree-id2142 . -4) (undo-tree-id2143 . -4) (undo-tree-id2144 . -4) (undo-tree-id2145 . -4) (undo-tree-id2146 . -4) (undo-tree-id2147 . -4) (undo-tree-id2148 . -4) (undo-tree-id2149 . -4) (undo-tree-id2150 . -4) (undo-tree-id2151 . -4) (undo-tree-id2152 . -4) (undo-tree-id2153 . -4) (undo-tree-id2154 . -4) (undo-tree-id2155 . -4) (undo-tree-id2156 . -4) (undo-tree-id2157 . -4) (undo-tree-id2158 . -4) (undo-tree-id2159 . -4) (undo-tree-id2160 . -4) (undo-tree-id2161 . -4) (undo-tree-id2162 . -4) (undo-tree-id2163 . -4) (undo-tree-id2164 . -4) (undo-tree-id2165 . -4) (undo-tree-id2166 . -4) (undo-tree-id2167 . -4) (undo-tree-id2168 . -4) (undo-tree-id2169 . -4) (undo-tree-id2170 . -4) (undo-tree-id2171 . -4) (undo-tree-id2172 . -4) (undo-tree-id2173 . -4) (undo-tree-id2174 . -4) (undo-tree-id2175 . -4) (undo-tree-id2176 . -4) (undo-tree-id2177 . -4) (undo-tree-id2178 . -4) (undo-tree-id2179 . -4) 656) nil (26370 64626 789978 499000) 0 nil])
([nil nil ((668 . 669)) nil (26370 64626 789654 214000) 0 nil])
([nil nil ((669 . 670)) nil (26370 64626 789653 352000) 0 nil])
([nil nil ((#(")" 0 1 (face font-lock-string-face fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -669) (undo-tree-id2007 . -1) (undo-tree-id2008 . -1) (undo-tree-id2009 . -1) (undo-tree-id2010 . -1) (undo-tree-id2011 . -1) (undo-tree-id2012 . -1) (undo-tree-id2013 . -1) (undo-tree-id2014 . -1) (undo-tree-id2015 . -1) (undo-tree-id2016 . -1) (undo-tree-id2017 . -1) (undo-tree-id2018 . -1) (undo-tree-id2019 . -1) (undo-tree-id2020 . -1) (undo-tree-id2021 . -1) (undo-tree-id2022 . -1) (undo-tree-id2023 . -1) (undo-tree-id2024 . -1) (undo-tree-id2025 . -1) (undo-tree-id2026 . -1) (undo-tree-id2027 . -1) (undo-tree-id2028 . -1) (undo-tree-id2029 . -1) (undo-tree-id2030 . -1) (undo-tree-id2031 . -1) (undo-tree-id2032 . -1) (undo-tree-id2033 . -1) (undo-tree-id2034 . -1) (undo-tree-id2035 . -1) (undo-tree-id2036 . -1) (undo-tree-id2037 . -1) (undo-tree-id2038 . -1) (undo-tree-id2039 . -1) (undo-tree-id2040 . -1) (undo-tree-id2041 . -1) (undo-tree-id2042 . -1) (undo-tree-id2043 . -1) (undo-tree-id2044 . -1) (undo-tree-id2045 . -1) (undo-tree-id2046 . -1) (undo-tree-id2047 . -1) (undo-tree-id2048 . -1) (undo-tree-id2049 . -1) (undo-tree-id2050 . -1) (undo-tree-id2051 . -1) (undo-tree-id2052 . -1) (undo-tree-id2053 . -1) (undo-tree-id2054 . -1) (undo-tree-id2055 . -1) (undo-tree-id2056 . -1) (undo-tree-id2057 . -1) (undo-tree-id2058 . -1) (undo-tree-id2059 . -1) (undo-tree-id2060 . -1) (undo-tree-id2061 . -1) (undo-tree-id2062 . -1) (undo-tree-id2063 . -1) (undo-tree-id2064 . -1) (undo-tree-id2065 . -1) (undo-tree-id2066 . -1) (undo-tree-id2067 . -1) (undo-tree-id2068 . -1) (undo-tree-id2069 . -1) (undo-tree-id2070 . -1) (undo-tree-id2071 . -1) 670) nil (26370 64626 789651 188000) 0 nil])
([nil nil ((669 . 671)) nil (26370 64626 789601 294000) 0 nil])
([nil nil ((#("3" 0 1 (face py-number-face fontified t)) . -2581) (undo-tree-id2194 . -1) (undo-tree-id2195 . -1) 2582 (t 26370 64626 797294 99000)) nil (26370 65497 554751 97000) 0 nil])
([nil nil ((2581 . 2582)) nil (26370 65497 554737 291000) 0 nil])
([nil nil ((2618 . 2622) (#("    " 0 4 (fontified t)) . 2618) (t 26370 65497 559817 31000)) nil (26370 65528 982504 110000) 0 nil])
([nil nil ((2622 . 2623)) nil (26370 65528 982503 128000) 0 nil])
([nil nil ((2623 . 2624)) nil (26370 65528 982502 628000) 0 nil])
([nil nil ((2617 . 2622)) nil (26370 65528 982502 277000) 0 nil])
([nil nil ((2622 . 2634)) nil (26370 65528 982501 616000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -2632) (undo-tree-id2278 . -1) (undo-tree-id2279 . -1) (undo-tree-id2280 . -1) (undo-tree-id2281 . -1) (#("e" 0 1 (fontified t)) . -2633) (undo-tree-id2282 . -1) (undo-tree-id2283 . -1) (undo-tree-id2284 . -1) (undo-tree-id2285 . -1) 2634) nil (26370 65528 982500 373000) 0 nil])
([nil nil ((2632 . 2633)) nil (26370 65528 982495 875000) 0 nil])
([nil nil ((2632 . 2642) (#("s" 0 1 (fontified nil)) . -2632) (2632 . 2633) (#("setRewards" 0 10 (fontified nil)) . -2632) (2632 . 2642) (#("s" 0 1 (fontified t)) . -2632) (undo-tree-id2274 . -1) (undo-tree-id2275 . -1) (undo-tree-id2276 . -1) (undo-tree-id2277 . -1) 2633) nil (26370 65528 982495 93000) 0 nil])
([nil nil ((2642 . 2648)) nil (26370 65528 982492 528000) 0 nil])
([nil nil ((2648 . 2667)) nil (26370 65528 982491 957000) 0 nil])
([nil nil ((#("_" 0 1 (face py-builtins-face fontified t match-data (0 1 0 1))) . -2666) (undo-tree-id2196 . -1) (undo-tree-id2197 . -1) (undo-tree-id2198 . -1) (undo-tree-id2199 . -1) (undo-tree-id2200 . -1) (undo-tree-id2201 . -1) (undo-tree-id2202 . -1) (undo-tree-id2203 . -1) (undo-tree-id2204 . -1) (undo-tree-id2205 . -1) (undo-tree-id2206 . -1) (undo-tree-id2207 . -1) (undo-tree-id2208 . -1) (undo-tree-id2209 . -1) (undo-tree-id2210 . -1) (undo-tree-id2211 . -1) (undo-tree-id2212 . -1) (undo-tree-id2213 . -1) (undo-tree-id2214 . -1) (undo-tree-id2215 . -1) (undo-tree-id2216 . -1) (undo-tree-id2217 . -1) (undo-tree-id2218 . -1) (undo-tree-id2219 . -1) (undo-tree-id2220 . -1) (undo-tree-id2221 . -1) (undo-tree-id2222 . -1) (undo-tree-id2223 . -1) (undo-tree-id2224 . -1) (undo-tree-id2225 . -1) (undo-tree-id2226 . -1) (undo-tree-id2227 . -1) (undo-tree-id2228 . -1) (undo-tree-id2229 . -1) (undo-tree-id2230 . -1) (undo-tree-id2231 . -1) (undo-tree-id2232 . -1) (undo-tree-id2233 . -1) (undo-tree-id2234 . -1) (undo-tree-id2235 . -1) (undo-tree-id2236 . -1) (undo-tree-id2237 . -1) (undo-tree-id2238 . -1) (undo-tree-id2239 . -1) (undo-tree-id2240 . -1) (undo-tree-id2241 . -1) (undo-tree-id2242 . -1) (undo-tree-id2243 . -1) (undo-tree-id2244 . -1) (undo-tree-id2245 . -1) (undo-tree-id2246 . -1) (undo-tree-id2247 . -1) (undo-tree-id2248 . -1) (undo-tree-id2249 . -1) (undo-tree-id2250 . -1) (undo-tree-id2251 . -1) (undo-tree-id2252 . -1) (undo-tree-id2253 . -1) (undo-tree-id2254 . -1) (undo-tree-id2255 . -1) (undo-tree-id2256 . -1) (undo-tree-id2257 . -1) (undo-tree-id2258 . -1) (undo-tree-id2259 . -1) (undo-tree-id2260 . -1) (undo-tree-id2261 . -1) (undo-tree-id2262 . -1) (undo-tree-id2263 . -1) (undo-tree-id2264 . -1) (undo-tree-id2265 . -1) (undo-tree-id2266 . -1) (undo-tree-id2267 . -1) (undo-tree-id2268 . -1) (undo-tree-id2269 . -1) (undo-tree-id2270 . -1) (undo-tree-id2271 . -1) (undo-tree-id2272 . -1) (undo-tree-id2273 . -1) 2667) nil (26370 65528 982490 104000) 0 nil])
([nil nil ((2666 . 2667)) nil (26370 65528 982443 686000) 0 nil])
([nil nil ((498 . 500) (t 26370 65528 987240 656000)) nil (26371 10 198332 935000) 0 nil])
([nil nil ((549 . 551)) nil (26371 10 198328 136000) 0 nil])
([nil nil ((301 . 3803) (#("

    def updateStateValues(self) -> None:
        \"\"\"Update state values using Bellman's Equation\"\"\"
        new_state_values = np.copy(self.Grid.states)
        for i in range(self.Grid.DIMENSION-1):
            for j in range(self.Grid.DIMENSION-1):
                current_position = (i,j)
                print(f\"[*LOG*] Calculating value for state {current_position}\")
                total_state_value = 0

                for action in Direction:
                    # Get next state (N) and probability (P)
                    N = self.getNextState(current_position, action)
                    R = self.getReward((N[0],N[1]))
                    P = self.getPolicy()
                    state_action_value = P*(R+(self.Gamma*self.Grid.states[N[0], N[1]]))
                    total_state_value += state_action_value
                new_state_values[i,j]=total_state_value
                print(f\"[LOG] State Value for {current_position} = {total_state_value}\")
        self.Grid.states = new_state_values
            

    def getNextState(self, position: tuple[int,int], action: Direction) -> tuple[int, int]:
        \"\"\"Returns the next state (as a tuple coordinate) based on current position and action.\"\"\"
        delta = action.value
        new_position = (position[0]+delta[0], position[1]+delta[1])
        print(f\"[LOG] Next State at Position: {new_position}\")
        if (new_position[0] >= 3 or new_position[1] >= 3):
            raise ValueError(f\"[ERROR] State {new_position} is out of bounds\")
        return (position[0]+delta[0], position[1]+delta[1])

    def getReward(self, position: tuple[int,int]):
        \"\"\"Returns the reward for a given coordinate\"\"\"
        if not self.Grid.rewards_set:
            raise ValueError(\"Rewards have not been specified. Please initialize using '[grid_variable].setRewards([numpy array])'\")

        # Check if the agent will \"bounce\"
        if (position[0] < 0 or position[0] >= self.Grid.rewards.shape[0] or position[1] < 0 or position[1] >= self.Grid.rewards.shape[1]):
            return -1
        
        return self.Grid.rewards[position[0],position[1]]

    def getPolicy(self) -> float:
        return 0.25

    def updatePolicy(self) -> None:
        ... 


if __name__ == \"__main__\":
    test_grid = Grid(2)
    test_agent = Agent(test_grid)
    test_grid.setRewards(np.array([[0,5],[0,0]]))
    # test_grid.setRewards(np.array([[0,0,5],[0,0,0],[0,0,0]]))
    test_brain = Brain(test_agent, test_grid)

    test_brain.updateStateValues" 0 6 (fontified t) 6 9 (face py-def-class-face fontified t) 9 10 (fontified t) 10 27 (face py-def-face fontified t) 27 28 (face (rainbow-delimiters-depth-1-face) fontified t) 28 32 (face py-object-reference-face fontified t) 32 33 (face (rainbow-delimiters-depth-1-face) fontified t) 33 37 (fontified t) 37 41 (face py-pseudo-keyword-face fontified t) 41 51 (fontified t) 51 52 (face font-lock-string-face syntax-table (15) fontified t) 52 53 (face font-lock-string-face syntax-table nil fontified t) 53 54 (face font-lock-string-face syntax-table nil fontified t) 54 98 (face font-lock-string-face fontified t) 98 99 (face font-lock-string-face syntax-table nil fontified t) 99 100 (face font-lock-string-face syntax-table nil fontified t) 100 101 (face font-lock-string-face syntax-table (15) fontified t) 101 110 (fontified t) 110 126 (face py-variable-name-face fontified t) 126 127 (fontified t) 127 128 (face font-lock-operator-face fontified t) 128 136 (fontified t) 136 137 (face (rainbow-delimiters-depth-1-face) fontified t) 137 141 (face py-object-reference-face fontified t) 141 153 (fontified t) 153 154 (face (rainbow-delimiters-depth-1-face) fontified t) 154 155 (fontified t) 155 163 (fontified t) 163 166 (face font-lock-keyword-face fontified t) 166 169 (fontified t) 169 171 (face font-lock-keyword-face fontified t) 171 172 (fontified t) 172 177 (face py-builtins-face fontified t) 177 178 (face (rainbow-delimiters-depth-1-face) fontified t) 178 182 (face py-object-reference-face fontified t) 182 198 (fontified t) 198 199 (face py-number-face fontified t) 199 200 (face (rainbow-delimiters-depth-1-face) fontified t) 200 202 (fontified t) 202 214 (fontified t) 214 217 (face font-lock-keyword-face fontified t) 217 220 (fontified t) 220 222 (face font-lock-keyword-face fontified t) 222 223 (fontified t) 223 228 (face py-builtins-face fontified t) 228 229 (face (rainbow-delimiters-depth-1-face) fontified t) 229 233 (face py-object-reference-face fontified t) 233 249 (fontified t) 249 250 (face py-number-face fontified t) 250 251 (face (rainbow-delimiters-depth-1-face) fontified t) 251 253 (fontified t) 253 269 (fontified t) 269 285 (face py-variable-name-face fontified t) 285 286 (fontified t) 286 287 (face font-lock-operator-face fontified t) 287 288 (fontified t) 288 289 (face (rainbow-delimiters-depth-1-face) fontified t) 289 292 (fontified t) 292 293 (face (rainbow-delimiters-depth-1-face) fontified t) 293 294 (fontified t) 294 310 (fontified t) 310 315 (face py-builtins-face fontified t) 315 316 (face (rainbow-delimiters-depth-1-face) fontified t) 316 317 (fontified t) 317 355 (face font-lock-string-face fontified t) 355 373 (face font-lock-string-face fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 373 374 (face (rainbow-delimiters-depth-1-face) fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 374 375 (fontified t) 375 391 (fontified t) 391 408 (face py-variable-name-face fontified t) 408 409 (fontified t) 409 410 (face font-lock-operator-face fontified t) 410 411 (fontified t) 411 412 (face py-number-face fontified t) 412 430 (fontified t) 430 433 (face font-lock-keyword-face fontified t) 433 441 (fontified t) 441 443 (face font-lock-keyword-face fontified t) 443 475 (fontified t) 475 516 (face font-lock-comment-face fontified t) 516 536 (fontified t) 536 537 (face py-variable-name-face fontified t) 537 538 (fontified t) 538 539 (face font-lock-operator-face fontified t) 539 540 (fontified t) 540 544 (face py-object-reference-face fontified t) 544 557 (fontified t) 557 558 (face (rainbow-delimiters-depth-1-face) fontified t) 558 582 (fontified t) 582 583 (face (rainbow-delimiters-depth-1-face) fontified t) 583 604 (fontified t) 604 605 (face py-variable-name-face fontified t) 605 606 (fontified t) 606 607 (face font-lock-operator-face fontified t) 607 608 (fontified t) 608 612 (face py-object-reference-face fontified t) 612 622 (fontified t) 622 623 (face (rainbow-delimiters-depth-1-face) fontified t) 623 624 (face (rainbow-delimiters-depth-2-face) fontified t) 624 625 (fontified t) 625 626 (face (rainbow-delimiters-depth-3-face) fontified t) 626 627 (face py-number-face fontified t) 627 628 (face (rainbow-delimiters-depth-3-face) fontified t) 628 630 (fontified t) 630 631 (face (rainbow-delimiters-depth-3-face) fontified t) 631 632 (face py-number-face fontified t) 632 633 (face (rainbow-delimiters-depth-3-face) fontified t) 633 634 (face (rainbow-delimiters-depth-2-face) fontified t) 634 635 (face (rainbow-delimiters-depth-1-face) fontified t) 635 636 (fontified t) 636 656 (fontified t) 656 657 (face py-variable-name-face fontified t) 657 658 (fontified t) 658 659 (face font-lock-operator-face fontified t) 659 660 (fontified t) 660 664 (face py-object-reference-face fontified t) 664 674 (fontified t) 674 675 (face (rainbow-delimiters-depth-1-face) fontified t) 675 676 (face (rainbow-delimiters-depth-1-face) fontified t) 676 677 (fontified t) 677 697 (fontified t) 697 715 (face py-variable-name-face fontified t) 715 716 (fontified t) 716 717 (face font-lock-operator-face fontified t) 717 720 (fontified t) 720 721 (face (rainbow-delimiters-depth-1-face) fontified t) 721 723 (fontified t) 723 724 (face (rainbow-delimiters-depth-2-face) fontified t) 724 728 (face py-object-reference-face fontified t) 728 735 (fontified t) 735 739 (face py-object-reference-face fontified t) 739 751 (fontified t) 751 752 (face (rainbow-delimiters-depth-3-face) fontified t) 752 753 (fontified t) 753 754 (face (rainbow-delimiters-depth-4-face) fontified t) 754 755 (face py-number-face fontified t) 755 756 (face (rainbow-delimiters-depth-4-face) fontified t) 756 759 (fontified t) 759 760 (face (rainbow-delimiters-depth-4-face) fontified t) 760 761 (face py-number-face fontified t) 761 762 (face (rainbow-delimiters-depth-4-face) fontified t) 762 763 (face (rainbow-delimiters-depth-3-face) fontified t) 763 764 (face (rainbow-delimiters-depth-2-face) fontified t) 764 765 (face (rainbow-delimiters-depth-1-face) fontified t) 765 766 (fontified t) 766 786 (fontified t) 786 803 (face py-variable-name-face fontified t) 803 804 (fontified t) 804 806 (face font-lock-operator-face fontified t) 806 826 (fontified t) 826 842 (fontified t) 842 858 (face py-variable-name-face fontified t) 858 859 (face (rainbow-delimiters-depth-1-face) fontified t) 859 860 (face py-variable-name-face fontified t) 860 861 (fontified t) 861 862 (face py-variable-name-face fontified t) 862 863 (face (rainbow-delimiters-depth-1-face) fontified t) 863 864 (face font-lock-operator-face fontified t) 864 882 (fontified t) 882 898 (fontified t) 898 903 (face py-builtins-face fontified t) 903 904 (face (rainbow-delimiters-depth-1-face) fontified t) 904 905 (fontified t) 905 929 (face font-lock-string-face fontified t) 929 946 (face font-lock-string-face fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8)) 946 969 (face font-lock-string-face fontified t) 969 970 (face (rainbow-delimiters-depth-1-face) fontified t) 970 971 (fontified t) 971 979 (fontified t) 979 983 (face py-object-reference-face fontified t) 983 989 (fontified t) 989 995 (face py-variable-name-face fontified t) 995 996 (fontified t) 996 997 (face font-lock-operator-face fontified t) 997 1033 (fontified t) 1033 1036 (face py-def-class-face fontified t) 1036 1037 (fontified t) 1037 1049 (face py-def-face fontified t) 1049 1050 (face (rainbow-delimiters-depth-1-face) fontified t) 1050 1054 (face py-object-reference-face fontified t) 1054 1066 (fontified t) 1066 1071 (face py-builtins-face fontified t) 1071 1072 (face (rainbow-delimiters-depth-2-face) fontified t) 1072 1075 (face py-builtins-face fontified t) 1075 1076 (fontified t) 1076 1079 (face py-builtins-face fontified t) 1079 1080 (face (rainbow-delimiters-depth-2-face) fontified t) 1080 1099 (fontified t) 1099 1100 (face (rainbow-delimiters-depth-1-face) fontified t) 1100 1104 (fontified t) 1104 1109 (face py-builtins-face fontified t) 1109 1110 (face (rainbow-delimiters-depth-1-face) fontified t) 1110 1113 (face py-builtins-face fontified t) 1113 1115 (fontified t) 1115 1118 (face py-builtins-face fontified t) 1118 1119 (face (rainbow-delimiters-depth-1-face) fontified t) 1119 1129 (fontified t) 1129 1130 (face font-lock-string-face syntax-table (15) fontified t) 1130 1131 (face font-lock-string-face syntax-table nil fontified t) 1131 1132 (face font-lock-string-face syntax-table nil fontified t) 1132 1216 (face font-lock-string-face fontified t) 1216 1217 (face font-lock-string-face syntax-table nil fontified t) 1217 1218 (face font-lock-string-face syntax-table nil fontified t) 1218 1219 (face font-lock-string-face syntax-table (15) fontified t) 1219 1220 (fontified t) 1220 1228 (fontified t) 1228 1233 (face py-variable-name-face fontified t) 1233 1234 (fontified t) 1234 1235 (face font-lock-operator-face fontified t) 1235 1249 (fontified t) 1249 1257 (fontified t) 1257 1269 (face py-variable-name-face fontified t) 1269 1270 (fontified t) 1270 1271 (face font-lock-operator-face fontified t) 1271 1272 (fontified t) 1272 1273 (face (rainbow-delimiters-depth-1-face) fontified t) 1273 1281 (fontified t) 1281 1282 (face (rainbow-delimiters-depth-2-face) fontified t) 1282 1283 (face py-number-face fontified t) 1283 1284 (face (rainbow-delimiters-depth-2-face) fontified t) 1284 1285 (fontified t) 1285 1290 (fontified t) 1290 1291 (face (rainbow-delimiters-depth-2-face) fontified t) 1291 1292 (face py-number-face fontified t) 1292 1293 (face (rainbow-delimiters-depth-2-face) fontified t) 1293 1303 (fontified t) 1303 1304 (face (rainbow-delimiters-depth-2-face) fontified t) 1304 1305 (face py-number-face fontified t) 1305 1306 (face (rainbow-delimiters-depth-2-face) fontified t) 1306 1307 (fontified t) 1307 1312 (fontified t) 1312 1313 (face (rainbow-delimiters-depth-2-face) fontified t) 1313 1314 (face py-number-face fontified t) 1314 1315 (face (rainbow-delimiters-depth-2-face) fontified t) 1315 1316 (face (rainbow-delimiters-depth-1-face) fontified t) 1316 1317 (fontified t) 1317 1325 (fontified t) 1325 1330 (face py-builtins-face fontified t) 1330 1331 (face (rainbow-delimiters-depth-1-face) fontified t) 1331 1332 (fontified t) 1332 1364 (face font-lock-string-face fontified t) 1364 1378 (face font-lock-string-face fontified t) 1378 1379 (face (rainbow-delimiters-depth-1-face) fontified t) 1379 1380 (fontified t) 1380 1388 (fontified t) 1388 1390 (face font-lock-keyword-face fontified t) 1390 1391 (fontified t) 1391 1392 (face (rainbow-delimiters-depth-1-face) fontified t) 1392 1404 (fontified t) 1404 1405 (face (rainbow-delimiters-depth-2-face) fontified t) 1405 1406 (face py-number-face fontified t) 1406 1407 (face (rainbow-delimiters-depth-2-face) fontified t) 1407 1411 (fontified t) 1411 1412 (face py-number-face fontified t) 1412 1413 (fontified t) 1413 1415 (face font-lock-keyword-face fontified t) 1415 1428 (fontified t) 1428 1429 (face (rainbow-delimiters-depth-2-face) fontified t) 1429 1430 (face py-number-face fontified t) 1430 1431 (face (rainbow-delimiters-depth-2-face) fontified t) 1431 1435 (fontified t) 1435 1436 (face py-number-face fontified t) 1436 1437 (face (rainbow-delimiters-depth-1-face) fontified t) 1437 1439 (fontified t) 1439 1451 (fontified t) 1451 1456 (face font-lock-keyword-face fontified t) 1456 1457 (fontified t) 1457 1467 (face py-exception-name-face fontified t match-data (0 2 0 1 1 2)) 1467 1468 (face (rainbow-delimiters-depth-1-face) fontified t match-data (0 2 0 1 1 2)) 1468 1469 (fontified t match-data (0 2 0 1 1 2)) 1469 1470 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2)) 1470 1471 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2)) 1471 1476 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2)) 1476 1477 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2)) 1477 1484 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2)) 1484 1485 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2)) 1485 1497 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2)) 1497 1498 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2)) 1498 1499 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2)) 1499 1501 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2)) 1501 1515 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2)) 1515 1516 (face font-lock-string-face fontified t match-data (0 2 0 1 1 2)) 1516 1517 (face (rainbow-delimiters-depth-1-face) fontified t match-data (0 2 0 1 1 2)) 1517 1518 (fontified t) 1518 1526 (fontified t) 1526 1532 (face font-lock-keyword-face fontified t) 1532 1533 (fontified t) 1533 1534 (face (rainbow-delimiters-depth-1-face) fontified t) 1534 1542 (fontified t) 1542 1543 (face (rainbow-delimiters-depth-2-face) fontified t) 1543 1544 (face py-number-face fontified t) 1544 1545 (face (rainbow-delimiters-depth-2-face) fontified t) 1545 1551 (fontified t) 1551 1552 (face (rainbow-delimiters-depth-2-face) fontified t) 1552 1553 (face py-number-face fontified t) 1553 1554 (face (rainbow-delimiters-depth-2-face) fontified t) 1554 1564 (fontified t) 1564 1565 (face (rainbow-delimiters-depth-2-face) fontified t) 1565 1566 (face py-number-face fontified t) 1566 1567 (face (rainbow-delimiters-depth-2-face) fontified t) 1567 1573 (fontified t) 1573 1574 (face (rainbow-delimiters-depth-2-face) fontified t) 1574 1575 (face py-number-face fontified t) 1575 1576 (face (rainbow-delimiters-depth-2-face) fontified t) 1576 1577 (face (rainbow-delimiters-depth-1-face) fontified t) 1577 1583 (fontified t) 1583 1586 (face py-def-class-face fontified t) 1586 1587 (fontified t) 1587 1596 (face py-def-face fontified t) 1596 1597 (face (rainbow-delimiters-depth-1-face) fontified t) 1597 1601 (face py-object-reference-face fontified t) 1601 1613 (fontified t) 1613 1618 (face py-builtins-face fontified t) 1618 1619 (face (rainbow-delimiters-depth-2-face) fontified t) 1619 1622 (face py-builtins-face fontified t) 1622 1623 (fontified t) 1623 1626 (face py-builtins-face fontified t) 1626 1627 (face (rainbow-delimiters-depth-2-face) fontified t) 1627 1628 (face (rainbow-delimiters-depth-1-face) fontified t) 1628 1638 (fontified t) 1638 1639 (face font-lock-string-face syntax-table (15) fontified t) 1639 1640 (face font-lock-string-face syntax-table nil fontified t) 1640 1641 (face font-lock-string-face syntax-table nil fontified t) 1641 1643 (face font-lock-string-face fontified t) 1643 1660 (face font-lock-string-face fontified t) 1660 1663 (face font-lock-string-face fontified t) 1663 1682 (face font-lock-string-face fontified t) 1682 1683 (face font-lock-string-face syntax-table nil fontified t) 1683 1684 (face font-lock-string-face syntax-table nil fontified t) 1684 1685 (face font-lock-string-face syntax-table (15) fontified t) 1685 1686 (fontified t) 1686 1694 (fontified t) 1694 1696 (face font-lock-keyword-face fontified t) 1696 1697 (fontified t) 1697 1700 (face font-lock-keyword-face fontified t) 1700 1701 (fontified t) 1701 1704 (face py-object-reference-face fontified t) 1704 1705 (face py-object-reference-face fontified t) 1705 1724 (fontified t) 1724 1736 (fontified t) 1736 1741 (face font-lock-keyword-face fontified t) 1741 1742 (fontified t) 1742 1752 (face py-exception-name-face fontified t) 1752 1753 (face (rainbow-delimiters-depth-1-face) fontified t) 1753 1855 (fontified t face font-lock-string-face) 1855 1856 (fontified t face (rainbow-delimiters-depth-1-face)) 1856 1857 (fontified t) 1857 1858 (fontified t) 1858 1866 (fontified t) 1866 1875 (face font-lock-comment-face fontified t) 1875 1901 (face font-lock-comment-face fontified t) 1901 1909 (fontified t) 1909 1911 (face font-lock-keyword-face fontified t) 1911 1912 (fontified t) 1912 1913 (face (rainbow-delimiters-depth-1-face) fontified t) 1913 1921 (fontified t) 1921 1922 (face (rainbow-delimiters-depth-2-face) fontified t) 1922 1923 (face py-number-face fontified t) 1923 1924 (face (rainbow-delimiters-depth-2-face) fontified t) 1924 1927 (fontified t) 1927 1928 (face py-number-face fontified t) 1928 1929 (fontified t) 1929 1931 (face font-lock-keyword-face fontified t) 1931 1940 (fontified t) 1940 1941 (face (rainbow-delimiters-depth-2-face) fontified t) 1941 1942 (face py-number-face fontified t) 1942 1943 (face (rainbow-delimiters-depth-2-face) fontified t) 1943 1947 (fontified t) 1947 1951 (face py-object-reference-face fontified t) 1951 1970 (fontified t) 1970 1971 (face (rainbow-delimiters-depth-2-face) fontified t) 1971 1972 (face py-number-face fontified t) 1972 1973 (face (rainbow-delimiters-depth-2-face) fontified t) 1973 1974 (fontified t) 1974 1976 (face font-lock-keyword-face fontified t) 1976 1985 (fontified t) 1985 1986 (face (rainbow-delimiters-depth-2-face) fontified t) 1986 1987 (face py-number-face fontified t) 1987 1988 (face (rainbow-delimiters-depth-2-face) fontified t) 1988 1991 (fontified t) 1991 1992 (face py-number-face fontified t) 1992 1993 (fontified t) 1993 1995 (face font-lock-keyword-face fontified t) 1995 2004 (fontified t) 2004 2005 (face (rainbow-delimiters-depth-2-face) fontified t) 2005 2006 (face py-number-face fontified t) 2006 2007 (face (rainbow-delimiters-depth-2-face) fontified t) 2007 2011 (fontified t) 2011 2015 (face py-object-reference-face fontified t) 2015 2034 (fontified t) 2034 2035 (face (rainbow-delimiters-depth-2-face) fontified t) 2035 2036 (face py-number-face fontified t) 2036 2037 (face (rainbow-delimiters-depth-2-face) fontified t) 2037 2038 (face (rainbow-delimiters-depth-1-face) fontified t) 2038 2040 (fontified t) 2040 2052 (fontified t) 2052 2058 (face font-lock-keyword-face fontified t) 2058 2060 (fontified t) 2060 2061 (face py-number-face fontified t) 2061 2070 (fontified t) 2070 2071 (fontified t) 2071 2079 (fontified t) 2079 2083 (face font-lock-keyword-face fontified t) 2083 2085 (face font-lock-keyword-face fontified t) 2085 2086 (fontified t) 2086 2090 (face py-object-reference-face fontified t) 2090 2103 (fontified t) 2103 2104 (face (rainbow-delimiters-depth-1-face) fontified t) 2104 2112 (fontified t) 2112 2113 (face (rainbow-delimiters-depth-2-face) fontified t) 2113 2114 (face py-number-face fontified t) 2114 2115 (face (rainbow-delimiters-depth-2-face) fontified t) 2115 2124 (fontified t) 2124 2125 (face (rainbow-delimiters-depth-2-face) fontified t) 2125 2126 (face py-number-face fontified t) 2126 2127 (face (rainbow-delimiters-depth-2-face) fontified t) 2127 2128 (face (rainbow-delimiters-depth-1-face) fontified t) 2128 2129 (fontified t) 2129 2134 (fontified t) 2134 2137 (face py-def-class-face fontified t) 2137 2138 (fontified t) 2138 2143 (face py-def-face fontified t) 2143 2147 (face py-def-face fontified t) 2147 2148 (face (rainbow-delimiters-depth-1-face) fontified t) 2148 2152 (face py-object-reference-face fontified t) 2152 2153 (face (rainbow-delimiters-depth-1-face) fontified t) 2153 2157 (fontified t) 2157 2162 (face py-builtins-face fontified t) 2162 2164 (fontified t) 2164 2172 (fontified t) 2172 2178 (face font-lock-keyword-face fontified t) 2178 2179 (fontified t) 2179 2180 (face py-number-face fontified t) 2180 2181 (fontified t) 2181 2183 (face py-number-face fontified t) 2183 2189 (fontified t) 2189 2192 (face py-def-class-face fontified t) 2192 2193 (fontified t) 2193 2205 (face py-def-face fontified t) 2205 2206 (face (rainbow-delimiters-depth-1-face) fontified t) 2206 2210 (face py-object-reference-face fontified t) 2210 2211 (face (rainbow-delimiters-depth-1-face) fontified t) 2211 2215 (fontified t) 2215 2219 (face py-pseudo-keyword-face fontified t) 2219 2221 (fontified t) 2221 2236 (fontified t) 2236 2238 (face font-lock-keyword-face fontified t) 2238 2239 (fontified t) 2239 2247 (face py-builtins-face fontified t) 2247 2251 (fontified t) 2251 2261 (face font-lock-string-face fontified t) 2261 2263 (fontified t) 2263 2267 (fontified t) 2267 2276 (face py-variable-name-face fontified t) 2276 2277 (fontified t) 2277 2278 (face font-lock-operator-face fontified t) 2278 2283 (fontified t) 2283 2284 (face (rainbow-delimiters-depth-1-face) fontified t) 2284 2285 (face py-number-face fontified t) 2285 2286 (face (rainbow-delimiters-depth-1-face) fontified t) 2286 2287 (fontified t) 2287 2291 (fontified t) 2291 2301 (face py-variable-name-face fontified t) 2301 2302 (fontified t) 2302 2303 (face font-lock-operator-face fontified t) 2303 2309 (fontified t) 2309 2310 (face (rainbow-delimiters-depth-1-face) fontified t) 2310 2319 (fontified t) 2319 2320 (face (rainbow-delimiters-depth-1-face) fontified t) 2320 2321 (fontified t) 2321 2335 (fontified t) 2335 2345 (fontified t match-data (0 1 0 1)) 2345 2346 (face (rainbow-delimiters-depth-1-face) fontified t match-data (0 1 0 1)) 2346 2354 (fontified t match-data (0 1 0 1)) 2354 2355 (face (rainbow-delimiters-depth-2-face) fontified t match-data (0 1 0 1)) 2355 2356 (face (rainbow-delimiters-depth-3-face) fontified t match-data (0 1 0 1)) 2356 2357 (face (rainbow-delimiters-depth-4-face) fontified t match-data (0 1 0 1)) 2357 2358 (face py-number-face fontified t match-data (0 1 0 1)) 2358 2359 (fontified t match-data (0 1 0 1)) 2359 2360 (face py-number-face fontified t match-data (0 1 0 1)) 2360 2361 (face (rainbow-delimiters-depth-4-face) fontified t match-data (0 1 0 1)) 2361 2362 (fontified t match-data (0 1 0 1)) 2362 2363 (face (rainbow-delimiters-depth-4-face) fontified t match-data (0 1 0 1)) 2363 2364 (face py-number-face fontified t match-data (0 1 0 1)) 2364 2365 (fontified t match-data (0 1 0 1)) 2365 2366 (face py-number-face fontified t match-data (0 1 0 1)) 2366 2367 (face (rainbow-delimiters-depth-4-face) fontified t match-data (0 1 0 1)) 2367 2368 (face (rainbow-delimiters-depth-3-face) fontified t match-data (0 1 0 1)) 2368 2369 (face (rainbow-delimiters-depth-2-face) fontified t match-data (0 1 0 1)) 2369 2370 (face (rainbow-delimiters-depth-1-face) fontified t match-data (0 1 0 1)) 2370 2371 (fontified t) 2371 2375 (fontified t) 2375 2377 (face font-lock-comment-face fontified t) 2377 2384 (face font-lock-comment-face fontified t) 2384 2387 (face font-lock-comment-face fontified t) 2387 2397 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 2397 2398 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 2398 2406 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 2406 2407 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 2407 2408 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 2408 2409 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 2409 2410 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 2410 2411 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 2411 2412 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 2412 2413 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 2413 2414 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 2414 2415 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 2415 2416 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 2416 2417 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 2417 2418 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 2418 2419 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 2419 2420 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 2420 2421 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 2421 2422 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 2422 2423 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 2423 2424 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 2424 2425 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 2425 2426 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 2426 2427 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 2427 2428 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 2428 2429 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 2429 2430 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 2430 2431 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 2431 2432 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 2432 2433 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 2433 2434 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 2434 2435 (face font-lock-comment-face fontified t) 2435 2439 (fontified t) 2439 2449 (face py-variable-name-face fontified t) 2449 2450 (fontified t) 2450 2451 (face font-lock-operator-face fontified t) 2451 2457 (fontified t) 2457 2458 (face (rainbow-delimiters-depth-1-face) fontified t) 2458 2460 (fontified t) 2460 2467 (fontified t) 2467 2479 (fontified t) 2479 2480 (face (rainbow-delimiters-depth-1-face) fontified t) 2480 2481 (fontified t) 2481 2482 (fontified t) 2482 2514 (fontified t)) . 301) (undo-tree-id200 . -2128) (undo-tree-id201 . -2320) (undo-tree-id202 . -1858) (undo-tree-id203 . -2369) (undo-tree-id204 . -2128) (undo-tree-id205 . -2320) (undo-tree-id206 . -1579) (undo-tree-id207 . -1856) (undo-tree-id208 . -1812) (undo-tree-id209 . -1856) (undo-tree-id210 . -1868) (undo-tree-id211 . -1868) (undo-tree-id212 . -413) (undo-tree-id213 . -1868) (undo-tree-id214 . -1868) (undo-tree-id215 . -1868) (undo-tree-id216 . -413) (undo-tree-id217 . -1919) (undo-tree-id218 . -197) (undo-tree-id219 . -881) (undo-tree-id220 . -197) (undo-tree-id221 . -248) (undo-tree-id222 . -583) (undo-tree-id223 . -676) (undo-tree-id224 . -1248) (undo-tree-id225 . -677) (undo-tree-id226 . -197) (undo-tree-id227 . 2264) (t 26371 10 203471 219000)) nil (26373 5372 990912 699000) 0 nil])
([nil nil ((3775 . 3776) (#("     " 0 5 (face font-lock-comment-delimiter-face fontified t)) . 3775) (undo-tree-id110 . -5) (undo-tree-id111 . -5) (undo-tree-id112 . -5) (undo-tree-id113 . -5) (undo-tree-id114 . -5) (undo-tree-id115 . -5) (undo-tree-id116 . -5) (undo-tree-id117 . -5) (undo-tree-id118 . -5) (undo-tree-id119 . -5) (undo-tree-id120 . -5) (undo-tree-id121 . -5) (undo-tree-id122 . -5) (undo-tree-id123 . -5) (undo-tree-id124 . -5) (undo-tree-id125 . -5) (undo-tree-id126 . -5) (undo-tree-id127 . -5) (undo-tree-id128 . -5) (undo-tree-id129 . -5) (undo-tree-id130 . -5) (undo-tree-id131 . -5) (undo-tree-id132 . -5) (undo-tree-id133 . -5) (undo-tree-id134 . -5) (undo-tree-id135 . -5) (undo-tree-id136 . -5) (undo-tree-id137 . -5) (undo-tree-id138 . -5) (undo-tree-id139 . -5) (undo-tree-id140 . -5) (undo-tree-id141 . -5) (undo-tree-id142 . -5) (undo-tree-id143 . -5) (undo-tree-id144 . -5) (undo-tree-id145 . -5) (undo-tree-id146 . -5) (undo-tree-id147 . -5) (undo-tree-id148 . -5) (undo-tree-id149 . -5) (undo-tree-id150 . -5) (undo-tree-id151 . -5) (undo-tree-id152 . -5) (undo-tree-id153 . -5) (undo-tree-id154 . -5) (undo-tree-id155 . -5) (undo-tree-id156 . -5) (undo-tree-id157 . -5) (undo-tree-id158 . -5) (undo-tree-id159 . -5) (undo-tree-id160 . -5) (undo-tree-id161 . -5) (undo-tree-id162 . -5) (undo-tree-id163 . -5) (undo-tree-id164 . -5) (undo-tree-id165 . -5) (undo-tree-id166 . -5) (undo-tree-id167 . -5) (undo-tree-id168 . -5) (undo-tree-id169 . -5) (undo-tree-id170 . -5) (undo-tree-id171 . -5) (undo-tree-id172 . -5) (undo-tree-id173 . -5) (undo-tree-id174 . -5) (undo-tree-id175 . -5) (undo-tree-id176 . -5) (undo-tree-id177 . -5) (undo-tree-id178 . -5) (undo-tree-id179 . -5) (undo-tree-id180 . -5) (undo-tree-id181 . -5) (undo-tree-id182 . -5) (undo-tree-id183 . -5) (undo-tree-id184 . -5) (undo-tree-id185 . -5) (undo-tree-id186 . -5) (undo-tree-id187 . -5) (undo-tree-id188 . -5) (undo-tree-id189 . -5) (undo-tree-id190 . -5) (undo-tree-id191 . -5) (undo-tree-id192 . -5) (undo-tree-id193 . -5) (undo-tree-id194 . -5) (undo-tree-id195 . -5) (undo-tree-id196 . -5) (undo-tree-id197 . -5) (undo-tree-id198 . -5) (undo-tree-id199 . -5) 3780 (t 26373 5258 144998 834000)) nil (26373 5372 990897 741000) 0 nil])
([nil nil ((#("#" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -3774) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) 3775) nil (26373 5372 990718 152000) 0 nil])
([nil nil ((3774 . 3778) (#(" " 0 1 (fontified t)) . 3774)) nil (26373 5372 990635 196000) 0 nil])
([nil nil ((2773 . 2775) (t 26373 5372 998111 574000)) nil (26373 5404 209548 915000) 0 nil])
([nil nil ((2824 . 2826)) nil (26373 5404 209543 836000) 0 nil])
([nil nil ((3829 . 3834) (t 26373 5404 216412 182000)) nil (26373 5489 238414 392000) 0 nil])
([nil nil ((3834 . 3838)) nil (26373 5489 238413 520000) 0 nil])
([nil nil ((3834 . 3844) (#("tes" 0 3 (fontified nil)) . -3834) (3834 . 3837) (#("test_brain" 0 10 (fontified nil)) . -3834) (3834 . 3844) (#("test" 0 4 (fontified t)) . -3834) (undo-tree-id237 . -4) (undo-tree-id238 . -4) (undo-tree-id239 . -4) (undo-tree-id240 . -4) 3838) nil (26373 5489 238412 338000) 0 nil])
([nil nil ((3844 . 3851)) nil (26373 5489 238408 691000) 0 nil])
([nil nil ((3845 . 3862) (#("up" 0 2 (fontified nil)) . -3845) (3845 . 3847) (#("updateStateValues" 0 17 (fontified nil)) . -3845) (3845 . 3862) (#("update" 0 6 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -3845) (undo-tree-id233 . -6) (undo-tree-id234 . -6) (undo-tree-id235 . -6) (undo-tree-id236 . -6) 3851) nil (26373 5489 238407 358000) 0 nil])
([nil nil ((3862 . 3864)) nil (26373 5489 238403 952000) 0 nil])
([nil nil ((3864 . 3869)) nil (26373 5489 238403 200000) 0 nil])
([nil nil ((3869 . 3873)) nil (26373 5489 238402 108000) 0 nil])
([nil nil ((#("." 0 1 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -3872) (undo-tree-id232 . -1) 3873) nil (26373 5489 238401 167000) 0 nil])
([nil nil ((3872 . 3873)) nil (26373 5489 238399 734000) 0 nil])
([nil nil ((3869 . 3879) (#("test" 0 4 (fontified nil)) . -3869) (3869 . 3873) (#("test_brain" 0 10 (fontified nil)) . -3869) (3869 . 3879) (#("test" 0 4 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -3869) (undo-tree-id228 . -4) (undo-tree-id229 . -4) (undo-tree-id230 . -4) (undo-tree-id231 . -4) 3873) nil (26373 5489 238398 391000) 0 nil])
([nil nil ((3879 . 3881)) nil (26373 5489 238387 651000) 0 nil])
([nil nil ((3881 . 3887)) nil (26373 5489 238382 642000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -3874) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (#("r" 0 1 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -3875) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (#("a" 0 1 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -3876) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (#("i" 0 1 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -3877) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (#("n" 0 1 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -3878) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) 3879 (t 26373 5489 245210 893000)) nil (26373 5493 892936 582000) 0 nil])
([nil nil ((3874 . 3878)) nil (26373 5493 892839 48000) 0 nil])
([nil nil ((3869 . 3878) (#("test_gri" 0 8 (fontified nil)) . -3869) (3869 . 3877) (#("test_grid" 0 9 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -3869) (undo-tree-id241 . -9) (undo-tree-id242 . -9) (undo-tree-id243 . -5) (undo-tree-id244 . -5) (undo-tree-id245 . -5) (undo-tree-id246 . -5) (undo-tree-id247 . -5) (undo-tree-id248 . -5) (undo-tree-id249 . -5) (undo-tree-id250 . -5) (undo-tree-id251 . -5) (undo-tree-id252 . -5) (undo-tree-id253 . -5) (undo-tree-id254 . -5) (undo-tree-id255 . -5) (undo-tree-id256 . -5) (undo-tree-id257 . -5) (undo-tree-id258 . -5) (undo-tree-id259 . -5) (undo-tree-id260 . -5) (undo-tree-id261 . -5) (undo-tree-id262 . -5) (undo-tree-id263 . -5) (undo-tree-id264 . -5) (undo-tree-id265 . -5) (undo-tree-id266 . -5) (undo-tree-id267 . -5) (undo-tree-id268 . -5) (undo-tree-id269 . -5) (undo-tree-id270 . -5) (undo-tree-id271 . -5) (undo-tree-id272 . -5) (undo-tree-id273 . -5) (undo-tree-id274 . -5) (undo-tree-id275 . -5) (undo-tree-id276 . -5) (undo-tree-id277 . -5) (undo-tree-id278 . -5) (undo-tree-id279 . -5) (undo-tree-id280 . -5) (undo-tree-id281 . -5) (undo-tree-id282 . -5) (undo-tree-id283 . -5) (undo-tree-id284 . -5) (undo-tree-id285 . -5) (undo-tree-id286 . -5) (undo-tree-id287 . -5) (undo-tree-id288 . -5) (undo-tree-id289 . -5) (undo-tree-id290 . -5) (undo-tree-id291 . -5) (undo-tree-id292 . -5) (undo-tree-id293 . -5) (undo-tree-id294 . -5) (undo-tree-id295 . -5) (undo-tree-id296 . -5) (undo-tree-id297 . -5) (undo-tree-id298 . -5) (undo-tree-id299 . -5) (undo-tree-id300 . -5) (undo-tree-id301 . -5) (undo-tree-id302 . -5) (undo-tree-id303 . -5) (undo-tree-id304 . -5) (undo-tree-id305 . -5) (undo-tree-id306 . -5) (undo-tree-id307 . -5) (undo-tree-id308 . -5) (undo-tree-id309 . -5) (undo-tree-id310 . -5) (undo-tree-id311 . -5) (undo-tree-id312 . -5) (undo-tree-id313 . -5) (undo-tree-id314 . -5) (undo-tree-id315 . -5) (undo-tree-id316 . -5) (undo-tree-id317 . -5) (undo-tree-id318 . -5) (undo-tree-id319 . -5) (undo-tree-id320 . -5) (undo-tree-id321 . -6) (undo-tree-id322 . -6) (undo-tree-id323 . -6) (undo-tree-id324 . -6) (undo-tree-id325 . -6) (undo-tree-id326 . -6) (undo-tree-id327 . -6) (undo-tree-id328 . -6) (undo-tree-id329 . -6) (undo-tree-id330 . -6) (undo-tree-id331 . -6) (undo-tree-id332 . -6) (undo-tree-id333 . -6) (undo-tree-id334 . -6) (undo-tree-id335 . -6) (undo-tree-id336 . -6) (undo-tree-id337 . -6) (undo-tree-id338 . -6) (undo-tree-id339 . -6) (undo-tree-id340 . -6) (undo-tree-id341 . -6) (undo-tree-id342 . -6) (undo-tree-id343 . -6) (undo-tree-id344 . -6) (undo-tree-id345 . -6) (undo-tree-id346 . -6) (undo-tree-id347 . -6) (undo-tree-id348 . -6) (undo-tree-id349 . -6) (undo-tree-id350 . -6) (undo-tree-id351 . -6) (undo-tree-id352 . -6) (undo-tree-id353 . -6) (undo-tree-id354 . -6) (undo-tree-id355 . -6) (undo-tree-id356 . -6) (undo-tree-id357 . -6) (undo-tree-id358 . -6) (undo-tree-id359 . -6) (undo-tree-id360 . -6) (undo-tree-id361 . -6) (undo-tree-id362 . -6) (undo-tree-id363 . -6) (undo-tree-id364 . -6) (undo-tree-id365 . -6) (undo-tree-id366 . -6) (undo-tree-id367 . -6) (undo-tree-id368 . -6) (undo-tree-id369 . -6) (undo-tree-id370 . -7) (undo-tree-id371 . -7) (undo-tree-id372 . -7) (undo-tree-id373 . -7) (undo-tree-id374 . -7) (undo-tree-id375 . -7) (undo-tree-id376 . -7) (undo-tree-id377 . -7) (undo-tree-id378 . -7) (undo-tree-id379 . -7) (undo-tree-id380 . -7) (undo-tree-id381 . -7) (undo-tree-id382 . -7) (undo-tree-id383 . -7) (undo-tree-id384 . -7) (undo-tree-id385 . -7) (undo-tree-id386 . -7) (undo-tree-id387 . -7) (undo-tree-id388 . -7) (undo-tree-id389 . -7) (undo-tree-id390 . -7) (undo-tree-id391 . -7) (undo-tree-id392 . -7) (undo-tree-id393 . -8) (undo-tree-id394 . -8) (undo-tree-id395 . -8) (undo-tree-id396 . -8) (undo-tree-id397 . -8) (undo-tree-id398 . -8) (undo-tree-id399 . -8) (undo-tree-id400 . -8) (undo-tree-id401 . -8) (undo-tree-id402 . -8) (undo-tree-id403 . -8) (undo-tree-id404 . -8) (undo-tree-id405 . -8) (undo-tree-id406 . -8) (undo-tree-id407 . -8) (undo-tree-id408 . -8) (undo-tree-id409 . -8) (undo-tree-id410 . -9) (undo-tree-id411 . -9) (undo-tree-id412 . -9) (undo-tree-id413 . -9) (undo-tree-id414 . -9) (undo-tree-id415 . -9) (undo-tree-id416 . -9) (undo-tree-id417 . -9) (undo-tree-id418 . -9) (undo-tree-id419 . -9) (undo-tree-id420 . -9) (undo-tree-id421 . -9) (undo-tree-id422 . -9) (undo-tree-id423 . -9) (undo-tree-id424 . -9) (undo-tree-id425 . -9) (undo-tree-id426 . -9) (undo-tree-id427 . -9) (undo-tree-id428 . -9) (undo-tree-id429 . -9) (undo-tree-id430 . -9) (undo-tree-id431 . -9) (undo-tree-id432 . -9) (undo-tree-id433 . -9) (undo-tree-id434 . -9) (undo-tree-id435 . -9) (undo-tree-id436 . -9) (undo-tree-id437 . -9) (undo-tree-id438 . -9) (undo-tree-id439 . -9) (undo-tree-id440 . -9) (undo-tree-id441 . -9) (undo-tree-id442 . -9) (undo-tree-id443 . -9) (undo-tree-id444 . -9) (undo-tree-id445 . -9) (undo-tree-id446 . -9) 3878) nil (26373 5493 892832 686000) 0 nil])
([nil nil ((3864 . 3869) (t 26373 5493 899253 835000)) nil (26373 5525 99156 731000) 0 nil])
([nil nil ((3869 . 3886)) nil (26373 5525 99155 889000) 0 nil])
([nil nil ((3880 . 3892) (#("up" 0 2 (fontified nil)) . -3880) (3880 . 3882) (#("updatePolicy" 0 12 (fontified nil)) . -3880) (3880 . 3892) (#("update" 0 6 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -3880) (undo-tree-id618 . -6) (undo-tree-id619 . -6) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -2) (undo-tree-id650 . -2) (undo-tree-id651 . -2) (undo-tree-id652 . -2) (undo-tree-id653 . -2) (undo-tree-id654 . -2) (undo-tree-id655 . -2) (undo-tree-id656 . -2) (undo-tree-id657 . -2) (undo-tree-id658 . -2) (undo-tree-id659 . -2) (undo-tree-id660 . -2) (undo-tree-id661 . -2) (undo-tree-id662 . -2) (undo-tree-id663 . -2) (undo-tree-id664 . -2) (undo-tree-id665 . -2) (undo-tree-id666 . -2) (undo-tree-id667 . -2) (undo-tree-id668 . -2) (undo-tree-id669 . -2) (undo-tree-id670 . -2) (undo-tree-id671 . -2) (undo-tree-id672 . -2) (undo-tree-id673 . -2) (undo-tree-id674 . -2) (undo-tree-id675 . -2) (undo-tree-id676 . -2) (undo-tree-id677 . -2) (undo-tree-id678 . -3) (undo-tree-id679 . -3) (undo-tree-id680 . -3) (undo-tree-id681 . -3) (undo-tree-id682 . -3) (undo-tree-id683 . -3) (undo-tree-id684 . -3) (undo-tree-id685 . -3) (undo-tree-id686 . -3) (undo-tree-id687 . -3) (undo-tree-id688 . -3) (undo-tree-id689 . -3) (undo-tree-id690 . -3) (undo-tree-id691 . -3) (undo-tree-id692 . -3) (undo-tree-id693 . -3) (undo-tree-id694 . -3) (undo-tree-id695 . -4) (undo-tree-id696 . -4) (undo-tree-id697 . -4) (undo-tree-id698 . -4) (undo-tree-id699 . -4) (undo-tree-id700 . -4) (undo-tree-id701 . -4) (undo-tree-id702 . -4) (undo-tree-id703 . -4) (undo-tree-id704 . -4) (undo-tree-id705 . -4) (undo-tree-id706 . -4) (undo-tree-id707 . -4) (undo-tree-id708 . -4) (undo-tree-id709 . -4) (undo-tree-id710 . -4) (undo-tree-id711 . -4) (undo-tree-id712 . -5) (undo-tree-id713 . -5) (undo-tree-id714 . -5) (undo-tree-id715 . -5) (undo-tree-id716 . -5) (undo-tree-id717 . -5) (undo-tree-id718 . -5) (undo-tree-id719 . -5) (undo-tree-id720 . -5) (undo-tree-id721 . -5) (undo-tree-id722 . -5) (undo-tree-id723 . -5) (undo-tree-id724 . -5) (undo-tree-id725 . -5) (undo-tree-id726 . -5) (undo-tree-id727 . -5) (undo-tree-id728 . -5) (undo-tree-id729 . -6) (undo-tree-id730 . -6) (undo-tree-id731 . -6) (undo-tree-id732 . -6) (undo-tree-id733 . -6) (undo-tree-id734 . -6) (undo-tree-id735 . -6) (undo-tree-id736 . -6) (undo-tree-id737 . -6) (undo-tree-id738 . -6) (undo-tree-id739 . -6) (undo-tree-id740 . -6) (undo-tree-id741 . -6) (undo-tree-id742 . -6) (undo-tree-id743 . -6) (undo-tree-id744 . -6) (undo-tree-id745 . -6) (undo-tree-id746 . -6) (undo-tree-id747 . -6) (undo-tree-id748 . -6) (undo-tree-id749 . -6) (undo-tree-id750 . -6) (undo-tree-id751 . -6) (undo-tree-id752 . -6) (undo-tree-id753 . -6) (undo-tree-id754 . -6) (undo-tree-id755 . -6) (undo-tree-id756 . -6) (undo-tree-id757 . -6) (undo-tree-id758 . -6) (undo-tree-id759 . -6) (undo-tree-id760 . -6) (undo-tree-id761 . -6) (undo-tree-id762 . -6) (undo-tree-id763 . -6) (undo-tree-id764 . -6) (undo-tree-id765 . -6) (undo-tree-id766 . -6) (undo-tree-id767 . -6) (undo-tree-id768 . -6) (undo-tree-id769 . -6) (undo-tree-id770 . -6) (undo-tree-id771 . -6) (undo-tree-id772 . -6) (undo-tree-id773 . -6) (undo-tree-id774 . -6) (undo-tree-id775 . -6) (undo-tree-id776 . -6) (undo-tree-id777 . -6) (undo-tree-id778 . -6) (undo-tree-id779 . -6) (undo-tree-id780 . -6) (undo-tree-id781 . -6) (undo-tree-id782 . -6) (undo-tree-id783 . -6) (undo-tree-id784 . -6) (undo-tree-id785 . -6) 3886) nil (26373 5525 99152 793000) 0 nil])
([nil nil ((3892 . 3894)) nil (26373 5525 99065 178000) 0 nil])
([nil nil ((#("#" 0 1 (face font-lock-comment-face fontified t)) . -3198) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (#(" " 0 1 (fontified nil)) . 3199) (3199 . 3200) (#(" " 0 1 (face font-lock-comment-face fontified t)) . 3199) (undo-tree-id788 . -1) (undo-tree-id789 . -1) 3200 (t 26373 5525 106539 895000)) nil (26373 5620 666786 573000) 0 nil])
([nil nil ((3301 . 3302)) nil (26373 5620 666773 478000) 0 nil])
([nil nil ((3302 . 3303)) nil (26373 5620 666768 879000) 0 nil])
([nil nil ((apply -6 3830 3923 undo--wrap-and-run-primitive-undo 3830 3923 ((3903 . 3905) (3871 . 3873) (3834 . 3836)))) nil (26373 5640 129522 717000) 0 nil])
([nil nil ((#("#" 0 1 (face font-lock-comment-face fontified t)) . -3301) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (#(" " 0 1 (fontified nil)) . 3302) (3302 . 3303) (#(" " 0 1 (face font-lock-comment-face fontified t)) . 3302) (undo-tree-id792 . -1) (undo-tree-id793 . -1) 3303 (t 26373 5640 136567 746000)) nil (26373 5662 100233 598000) 0 nil])
([nil nil ((3142 . 3143)) nil (26373 5662 100222 497000) 0 nil])
([nil nil ((3143 . 3144)) nil (26373 5690 375046 299000) 0 nil])
([nil nil ((#("#" 0 1 (face font-lock-comment-face fontified t)) . -3903) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) 3904) nil (26373 5696 287276 232000) 0 nil] [nil nil ((apply -7 3830 3930 undo--wrap-and-run-primitive-undo 3830 3930 ((3907 . 3909) (3873 . 3875) (3834 . 3836) (3904 . 3905)))) ((apply 7 3830 3923 undo--wrap-and-run-primitive-undo 3830 3923 ((#("
" 0 1 (face font-lock-comment-face fontified t)) . 3904) (#("# " 0 2 (face font-lock-comment-face fontified t)) . 3834) (#("# " 0 2 (face font-lock-comment-face fontified t)) . 3873) (#("# " 0 2 (face font-lock-comment-face fontified t)) . 3907)))) (26373 5689 151859 4000) 0 nil])
([nil nil ((3899 . 3903) (#("     " 0 4 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6)) 4 5 (fontified t)) . -3899) (undo-tree-id794 . -4) (undo-tree-id795 . -4) (undo-tree-id796 . -4) (undo-tree-id797 . -4) (undo-tree-id798 . -4) (undo-tree-id799 . -4) (undo-tree-id800 . -4) (undo-tree-id801 . -4) (undo-tree-id802 . -4) (undo-tree-id803 . -4) (undo-tree-id804 . -4) (undo-tree-id805 . -4) (undo-tree-id806 . -4) (undo-tree-id807 . -4) (undo-tree-id808 . -4) (undo-tree-id809 . -4) (undo-tree-id810 . -4) (undo-tree-id811 . -4) (undo-tree-id812 . -4) (undo-tree-id813 . -4) (undo-tree-id814 . -4) (undo-tree-id815 . -4) (undo-tree-id816 . -4) (undo-tree-id817 . -4) (undo-tree-id818 . -4) (undo-tree-id819 . -4) (undo-tree-id820 . -4) (undo-tree-id821 . -4) (undo-tree-id822 . -4) (undo-tree-id823 . -4) (undo-tree-id824 . -4) (undo-tree-id825 . -4) (undo-tree-id826 . -4) (undo-tree-id827 . -4) (undo-tree-id828 . -4) (undo-tree-id829 . -4) (undo-tree-id830 . -4) (undo-tree-id831 . -4) (undo-tree-id832 . -4) (undo-tree-id833 . -4) (undo-tree-id834 . -4) (undo-tree-id835 . -4) (undo-tree-id836 . -4) (undo-tree-id837 . -4) (undo-tree-id838 . -4) (undo-tree-id839 . -4) (undo-tree-id840 . -4) (undo-tree-id841 . -4) (undo-tree-id842 . -4) (undo-tree-id843 . -4) (undo-tree-id844 . -4) (undo-tree-id845 . -4) (undo-tree-id846 . -4) (undo-tree-id847 . -4) (undo-tree-id848 . -4) (undo-tree-id849 . -4) (undo-tree-id850 . -4) (undo-tree-id851 . -4) (undo-tree-id852 . -4) (undo-tree-id853 . -4) (undo-tree-id854 . -4) (undo-tree-id855 . -4) (undo-tree-id856 . -4) (undo-tree-id857 . -4) (undo-tree-id858 . -4) (undo-tree-id859 . -4) (undo-tree-id860 . -4) (undo-tree-id861 . -4) (undo-tree-id862 . -4) (undo-tree-id863 . -4) (undo-tree-id864 . -4) (undo-tree-id865 . -4) (undo-tree-id866 . -4) (undo-tree-id867 . -4) (undo-tree-id868 . -4) (undo-tree-id869 . -4) (undo-tree-id870 . -4) (undo-tree-id871 . -4) (undo-tree-id872 . -4) (undo-tree-id873 . -4) (undo-tree-id874 . -4) (undo-tree-id875 . -4) (undo-tree-id876 . -4) (undo-tree-id877 . -4) (undo-tree-id878 . -4) (undo-tree-id879 . -4) (undo-tree-id880 . -4) (undo-tree-id881 . -4) (undo-tree-id882 . -4) (undo-tree-id883 . -4) (undo-tree-id884 . -4) (undo-tree-id885 . -4) (undo-tree-id886 . -4) (undo-tree-id887 . -4) (undo-tree-id888 . -4) (undo-tree-id889 . -4) (undo-tree-id890 . -4) (undo-tree-id891 . -4) (undo-tree-id892 . -4) (undo-tree-id893 . -4) (undo-tree-id894 . -4) 3903) nil (26373 5696 287256 635000) 0 nil])
nil
([nil nil ((#(" " 0 1 (fontified t)) . 3871) (#("#" 0 1 (face font-lock-comment-face fontified t)) . 3871)) nil (26373 5696 287195 681000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 3834) (#("#" 0 1 (face font-lock-comment-face fontified t)) . 3834)) nil (26373 5696 287190 110000) 0 nil])
([nil nil ((apply -6 3830 3923 undo--wrap-and-run-primitive-undo 3830 3923 ((3903 . 3905) (3871 . 3873) (3834 . 3836)))) nil (26373 6200 929355 814000) 0 nil])
([nil nil ((3638 . 3639) (t 26373 6200 938189 923000)) nil (26373 6209 874471 845000) 0 nil])
([nil nil ((3639 . 3640)) nil (26373 6209 874471 83000) 0 nil])
([nil nil ((#("#" 0 1 (face font-lock-comment-face fontified t)) . -3586) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (#(" " 0 1 (fontified nil)) . 3587) (3587 . 3588) (#(" " 0 1 (face font-lock-comment-face fontified t)) . 3587) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) 3588) nil (26373 6209 874467 336000) 0 nil])
([nil nil ((#("3" 0 1 (face py-number-face fontified t)) . -3545) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) 3546 (t 26373 6209 882260 310000)) nil (26373 6228 694456 259000) 0 nil])
([nil nil ((3545 . 3546)) nil (26373 6228 694438 777000) 0 nil])
([nil nil ((485 . 494) (t 26373 6228 702408 201000)) nil (26373 18816 782854 114000) 0 nil])
([nil nil ((494 . 505)) nil (26373 18816 782853 783000) 0 nil])
([nil nil ((#("R" 0 1 (face font-lock-string-face fontified t)) . -502) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (#("a" 0 1 (face font-lock-string-face fontified t)) . -503) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (#("n" 0 1 (face font-lock-string-face fontified t)) . -504) (undo-tree-id1042 . -1) 505) nil (26373 18816 782853 142000) 0 nil])
([nil nil ((502 . 509)) nil (26373 18816 782850 688000) 0 nil])
([nil nil ((509 . 510)) nil (26373 18816 782850 217000) 0 nil])
([nil nil ((510 . 511)) nil (26373 18816 782849 956000) 0 nil])
([nil nil ((511 . 518)) nil (26373 18816 782849 465000) 0 nil])
([nil nil ((#("f" 0 1 (face font-lock-string-face fontified t)) . -516) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -517) (undo-tree-id1037 . -1) 518) nil (26373 18816 782848 884000) 0 nil])
([nil nil ((516 . 524)) nil (26373 18816 782615 512000) 0 nil])
([nil nil ((#("g" 0 1 (face font-lock-string-face fontified t)) . -521) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (#("." 0 1 (face font-lock-string-face fontified t)) . -522) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (#("G" 0 1 (face font-lock-string-face fontified t)) . -523) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) 524) nil (26373 18816 782614 720000) 0 nil])
([nil nil ((521 . 540)) nil (26373 18816 782611 575000) 0 nil])
([nil nil ((540 . 543)) nil (26373 18816 782611 334000) 0 nil])
([nil nil ((543 . 552)) nil (26373 18816 782611 94000) 0 nil])
([nil nil ((552 . 561)) nil (26373 18816 782610 823000) 0 nil])
([nil nil ((#("K" 0 1 (face font-lock-string-face fontified t)) . -560) (undo-tree-id1024 . -1) 561) nil (26373 18816 782610 432000) 0 nil])
([nil nil ((560 . 567)) nil (26373 18816 782609 591000) 0 nil])
([nil nil ((567 . 568)) nil (26373 18816 782609 330000) 0 nil])
([nil nil ((568 . 569)) nil (26373 18816 782609 30000) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-string-face fontified t)) . -568) (undo-tree-id1023 . -1) 569) nil (26373 18816 782608 649000) 0 nil])
([nil nil ((568 . 576)) nil (26373 18816 782607 978000) 0 nil])
([nil nil ((576 . 581)) nil (26373 18816 782607 697000) 0 nil])
([nil nil ((#("g" 0 1 (face font-lock-string-face fontified t)) . -579) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (#("." 0 1 (face font-lock-string-face fontified t)) . -580) (undo-tree-id1022 . -1) 581) nil (26373 18816 782606 746000) 0 nil])
([nil nil ((579 . 598)) nil (26373 18816 782604 261000) 0 nil])
([nil nil ((#("1" 0 1 (face font-lock-string-face fontified t)) . -597) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) 598) nil (26373 18816 782602 929000) 0 nil])
([nil nil ((597 . 601)) nil (26373 18816 782577 752000) 0 nil])
([nil nil ((#("-" 0 1 (face font-lock-string-face fontified t)) . -537) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (#("1" 0 1 (face font-lock-string-face fontified t)) . -538) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) 539 (t 26373 18816 790684 206000)) nil (26373 18849 143058 714000) 0 nil])
([nil nil ((#("1" 0 1 (face font-lock-string-face fontified t)) . 593) (#("-" 0 1 (face font-lock-string-face fontified t)) . 593)) nil (26373 18849 143056 119000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . -640) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (#("1" 0 1 (face py-number-face fontified t)) . -641) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) 642) nil (26373 18849 143054 877000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . 689) (#("-" 0 1 (fontified t)) . 689)) nil (26373 18849 142865 533000) 0 nil])
([nil nil ((1022 . 1043) (t 26373 18849 151291 200000)) nil (26373 18912 544771 558000) 0 nil])
([nil nil ((1043 . 1052)) nil (26373 18912 544771 47000) 0 nil])
([nil nil ((1052 . 1053)) nil (26373 18912 544770 446000) 0 nil])
([nil nil ((1053 . 1055)) nil (26373 18912 544769 774000) 0 nil])
([nil nil ((#("P" 0 1 (face font-lock-string-face fontified t)) . -1054) (undo-tree-id1085 . -1) 1055) nil (26373 18912 544768 833000) 0 nil])
([nil nil ((1054 . 1059)) nil (26373 18912 544756 59000) 0 nil])
([nil nil ((1176 . 1197) (t 26373 18912 553294 820000)) nil (26373 19205 800303 992000) 0 nil])
([nil nil ((1197 . 1201)) nil (26373 19205 800303 642000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -1200) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) 1201) nil (26373 19205 800303 241000) 0 nil])
([nil nil ((1200 . 1211)) nil (26373 19205 800301 187000) 0 nil])
([nil nil ((1211 . 1226)) nil (26373 19205 800300 937000) 0 nil])
([nil nil ((1226 . 1227)) nil (26373 19205 800300 716000) 0 nil])
([nil nil ((1227 . 1252)) nil (26373 19205 800300 566000) 0 nil])
([nil nil ((1252 . 1253)) nil (26373 19205 800300 286000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -1252) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) 1253) nil (26373 19205 800299 905000) 0 nil])
([nil nil ((1252 . 1256)) nil (26373 19205 800298 723000) 0 nil])
([nil nil ((1206 . 1207)) nil (26373 19205 800298 482000) 0 nil])
([nil nil ((1257 . 1278)) nil (26373 19205 800298 92000) 0 nil])
([nil nil ((1278 . 1279)) nil (26373 19205 800297 761000) 0 nil])
([nil nil ((1279 . 1304)) nil (26373 19205 800297 521000) 0 nil])
([nil nil ((#("[" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -1254) (undo-tree-id1196 . -1) (#("0" 0 1 (face py-number-face fontified t)) . -1255) (undo-tree-id1197 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -1256) (undo-tree-id1198 . -1) 1257) nil (26373 19205 800296 929000) 0 nil])
([nil nil ((1255 . 1256)) nil (26373 19205 800295 447000) 0 nil])
([nil nil ((1277 . 1280)) nil (26373 19205 800295 166000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -1279) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) 1280) nil (26373 19205 800294 765000) 0 nil])
([nil nil ((1279 . 1284)) nil (26373 19205 800293 683000) 0 nil])
([nil nil ((1284 . 1309)) nil (26373 19205 800293 453000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . 1305) (undo-tree-id1192 . -4) 1309) nil (26373 19205 800293 82000) 0 nil])
([nil nil ((1305 . 1310)) nil (26373 19205 800292 271000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -1308) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (#("[" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -1309) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) 1310) nil (26373 19205 800291 780000) 0 nil])
([nil nil ((1308 . 1316)) nil (26373 19205 800288 614000) 0 nil])
([nil nil ((1316 . 1317)) nil (26373 19205 800288 354000) 0 nil])
([nil nil ((1317 . 1342)) nil (26373 19205 800288 113000) 0 nil])
([nil nil ((1342 . 1345)) nil (26373 19205 800287 873000) 0 nil])
([nil nil ((1345 . 1350)) nil (26373 19205 800287 602000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -1345) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (#("e" 0 1 (fontified t)) . -1346) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (#("l" 0 1 (fontified t)) . -1347) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (#("f" 0 1 (face py-object-reference-face fontified t)) . -1348) (undo-tree-id1176 . -1) (undo-tree-id1177 . -1) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (#("." 0 1 (fontified t)) . -1349) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) 1350) nil (26373 19205 800286 540000) 0 nil])
([nil nil ((1345 . 1352)) nil (26373 19205 800279 117000) 0 nil])
([nil nil ((1352 . 1377)) nil (26373 19205 800278 876000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . 1373) (undo-tree-id1163 . -4) 1377) nil (26373 19205 800278 576000) 0 nil])
([nil nil ((1373 . 1390)) nil (26373 19205 800277 935000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1389) (undo-tree-id1162 . -1) 1390) nil (26373 19205 800277 544000) 0 nil])
([nil nil ((#("f" 0 1 (face py-object-reference-face fontified t)) . -1387) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (#("g" 0 1 (fontified t)) . -1388) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) 1389) nil (26373 19205 800276 542000) 0 nil])
([nil nil ((1387 . 1399)) nil (26373 19205 800272 985000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -1397) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (#("n" 0 1 (fontified t)) . -1398) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) 1399) nil (26373 19205 800272 525000) 0 nil])
([nil nil ((1394 . 1403) (#("Di" 0 2 (fontified nil)) . -1394) (1394 . 1396) (#("DIMENSION" 0 9 (fontified nil)) . -1394) (1394 . 1403) (#("Dim" 0 3 (fontified t)) . -1394) (undo-tree-id1147 . -3) (undo-tree-id1148 . -3) (undo-tree-id1149 . -3) 1397) nil (26373 19205 800269 900000) 0 nil])
([nil nil ((1403 . 1404)) nil (26373 19205 800268 527000) 0 nil])
([nil nil ((1404 . 1429)) nil (26373 19205 800268 277000) 0 nil])
([nil nil ((1429 . 1434)) nil (26373 19205 800268 16000) 0 nil])
([nil nil ((1434 . 1443)) nil (26373 19205 800267 35000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1441) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (#("." 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1442) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) 1443) nil (26373 19205 800266 443000) 0 nil])
([nil nil ((1441 . 1446)) nil (26373 19205 800261 304000) 0 nil])
([nil nil ((1443 . 1447) (#("Gr" 0 2 (fontified nil)) . -1443) (1443 . 1445) (#("Grid" 0 4 (fontified nil)) . -1443) (1443 . 1447) (#("Gri" 0 3 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1443) (undo-tree-id1136 . -3) (undo-tree-id1137 . -3) (undo-tree-id1138 . -3) 1446) nil (26373 19205 800260 503000) 0 nil])
([nil nil ((1447 . 1451)) nil (26373 19205 800259 130000) 0 nil])
([nil nil ((#("D" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1448) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (#("i" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1449) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (#("m" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1450) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) 1451) nil (26373 19205 800258 68000) 0 nil])
([nil nil ((1448 . 1451)) nil (26373 19205 800254 1000) 0 nil])
([nil nil ((1451 . 1452)) nil (26373 19205 800253 730000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1451) (undo-tree-id1126 . -1) 1452) nil (26373 19205 800253 249000) 0 nil])
([nil nil ((1451 . 1460)) nil (26373 19205 800252 658000) 0 nil])
([nil nil ((1460 . 1485)) nil (26373 19205 800252 257000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t match-data (0 3 0 1 1 2 2 3))) . 1481) (undo-tree-id1125 . -4) 1485) nil (26373 19205 800251 746000) 0 nil])
([nil nil ((1481 . 1492)) nil (26373 19205 800250 855000) 0 nil])
([nil nil ((1492 . 1493)) nil (26373 19205 800250 554000) 0 nil])
([nil nil ((1493 . 1518)) nil (26373 19205 800250 324000) 0 nil])
([nil nil ((1518 . 1528)) nil (26373 19205 800250 164000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1527) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) 1528) nil (26373 19205 800249 783000) 0 nil])
([nil nil ((1527 . 1529)) nil (26373 19205 800248 460000) 0 nil])
([nil nil ((1529 . 1554)) nil (26373 19205 800248 220000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t match-data (0 3 0 1 1 2 2 3))) . 1550) (undo-tree-id1121 . -4) 1554) nil (26373 19205 800247 579000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t match-data (0 3 0 1 1 2 2 3))) . 1546) (undo-tree-id1120 . -4) 1550) nil (26373 19205 800246 757000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t match-data (0 3 0 1 1 2 2 3))) . 1542) (undo-tree-id1119 . -4) 1546) nil (26373 19205 800245 996000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t match-data (0 3 0 1 1 2 2 3))) . 1538) (undo-tree-id1118 . -4) 1542) nil (26373 19205 800243 972000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t match-data (0 3 0 1 1 2 2 3))) . 1534) (undo-tree-id1117 . -4) 1538) nil (26373 19205 800243 311000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1530) (undo-tree-id1116 . -4) 1534) nil (26373 19205 800242 489000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -1529) (undo-tree-id1115 . -1) 1530) nil (26373 19205 800241 618000) 0 nil])
([nil nil ((1178 . 1198) (#("                    " 0 20 (fontified nil)) . 1177) (undo-tree-id1114 . -20) (1176 . 1198)) nil (26373 19205 800240 766000) 0 nil])
([nil nil ((1198 . 1199)) nil (26373 19205 800239 985000) 0 nil])
([nil nil ((1199 . 1212)) nil (26373 19205 800239 845000) 0 nil])
([nil nil ((1212 . 1213)) nil (26373 19205 800239 594000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-comment-face fontified t)) . 1212) (undo-tree-id1113 . -1) 1213) nil (26373 19205 800239 233000) 0 nil])
([nil nil ((#("r" 0 1 (face font-lock-comment-face fontified t)) . -1207) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (#("o" 0 1 (face font-lock-comment-face fontified t)) . -1208) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (#("b" 0 1 (face font-lock-comment-face fontified t)) . -1209) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (#("o" 0 1 (face font-lock-comment-face fontified t)) . -1210) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (#("t" 0 1 (face font-lock-comment-face fontified t)) . -1211) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) 1212) nil (26373 19205 800237 771000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-comment-face fontified t)) . 1206) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) 1207) nil (26373 19205 800232 311000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-comment-face fontified t)) . -1205) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) 1206) nil (26373 19205 800231 129000) 0 nil])
([nil nil ((#("F" 0 1 (face font-lock-comment-face fontified t)) . -1200) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (#("o" 0 1 (face font-lock-comment-face fontified t)) . -1201) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (#("r" 0 1 (face font-lock-comment-face fontified t)) . -1202) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (#("c" 0 1 (face font-lock-comment-face fontified t)) . -1203) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (#("e" 0 1 (face font-lock-comment-face fontified t)) . -1204) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) 1205) nil (26373 19205 800229 245000) 0 nil])
([nil nil ((1200 . 1221)) nil (26373 19205 800223 715000) 0 nil])
([nil nil ((1221 . 1240)) nil (26373 19205 800223 444000) 0 nil])
([nil nil ((1240 . 1248)) nil (26373 19205 800223 164000) 0 nil])
([nil nil ((#("d" 0 1 (face font-lock-comment-face fontified t)) . -1247) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) 1248) nil (26373 19205 800222 723000) 0 nil])
([nil nil ((1247 . 1249)) nil (26373 19205 800220 479000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-comment-face fontified t)) . 1248) (undo-tree-id1086 . -1) 1249) nil (26373 19205 800219 647000) 0 nil])
([nil nil ((1248 . 1251)) nil (26373 19205 799912 323000) 0 nil])
([nil nil ((1023 . 1043) (#("                    " 0 20 (fontified t)) . 1023) (t 26373 19205 808360 102000)) nil (26373 19350 739290 296000) 0 nil])
([nil nil ((1043 . 1044)) nil (26373 19350 739289 475000) 0 nil])
([nil nil ((1044 . 1045)) nil (26373 19350 739285 57000) 0 nil])
([nil nil ((1044 . 1045) (t 26373 19350 747616 121000)) nil (26373 19364 940393 153000) 0 nil])
([nil nil ((494 . 496)) nil (26373 19364 940392 832000) 0 nil])
([nil nil ((496 . 497)) nil (26373 19364 940392 531000) 0 nil])
([nil nil ((553 . 555)) nil (26373 19364 940392 141000) 0 nil])
([nil nil ((555 . 556)) nil (26373 19364 940387 502000) 0 nil])
([nil nil ((4193 . 4194) (t 26373 19364 947548 203000)) nil (26373 19872 95024 974000) 0 nil])
([nil nil ((4214 . 4220)) nil (26373 19872 95024 684000) 0 nil])
([nil nil ((4272 . 4275)) nil (26373 19872 95024 383000) 0 nil])
([nil nil ((4262 . 4278) (#("setRewardsMan" 0 13 (face font-lock-comment-face fontified t)) . -4262) (undo-tree-id1217 . -13) 4275) nil (26373 19872 95023 592000) 0 nil])
([nil nil ((4188 . 4193)) nil (26373 19872 95022 620000) 0 nil])
([nil nil ((4193 . 4196)) nil (26373 19872 95022 329000) 0 nil])
([nil nil ((4196 . 4198)) nil (26373 19872 95022 59000) 0 nil])
([nil nil ((4193 . 4202) (#("test" 0 4 (fontified nil)) . -4193) (4193 . 4197) (#("test_grid" 0 9 (fontified nil)) . -4193) (4193 . 4202) (#("test_" 0 5 (fontified t)) . -4193) (undo-tree-id1214 . -5) (undo-tree-id1215 . -5) (undo-tree-id1216 . -5) 4198) nil (26373 19872 95021 277000) 0 nil])
([nil nil ((4202 . 4206)) nil (26373 19872 95018 773000) 0 nil])
([nil nil ((4203 . 4213) (#("se" 0 2 (fontified nil)) . -4203) (4203 . 4205) (#("setRewards" 0 10 (fontified nil)) . -4203) (4203 . 4213) (#("set" 0 3 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -4203) (undo-tree-id1211 . -3) (undo-tree-id1212 . -3) (undo-tree-id1213 . -3) 4206) nil (26373 19872 95017 811000) 0 nil])
([nil nil ((4213 . 4219)) nil (26373 19872 95015 496000) 0 nil])
([nil nil ((#("1" 0 1 (face py-number-face fontified t match-data (0 3 0 1 1 2 2 3))) . -4215) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (#("," 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -4216) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (#("1" 0 1 (face py-number-face fontified t match-data (0 3 0 1 1 2 2 3))) . -4217) (undo-tree-id1209 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t match-data (0 3 0 1 1 2 2 3))) . -4218) (undo-tree-id1210 . -1) 4219) nil (26373 19872 95014 475000) 0 nil])
([nil nil ((4215 . 4222)) nil (26373 19872 95001 480000) 0 nil])
([nil nil ((4222 . 4223)) nil (26373 19872 94997 513000) 0 nil])
([nil nil ((1976 . 1977) (t 26373 19872 103733 288000)) nil (26373 19915 132471 529000) 0 nil])
([nil nil ((1977 . 1986)) nil (26373 19915 132471 88000) 0 nil])
([nil nil ((1986 . 2002)) nil (26373 19915 132470 817000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -1999) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (#("t" 0 1 (fontified t)) . -2000) (undo-tree-id1277 . -1) (#("s" 0 1 (fontified t)) . -2001) (undo-tree-id1278 . -1) 2002) nil (26373 19915 132470 256000) 0 nil])
([nil nil ((1999 . 2001)) nil (26373 19915 132468 102000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -2000) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) 2001) nil (26373 19915 132467 751000) 0 nil])
([nil nil ((2000 . 2015)) nil (26373 19915 132464 245000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -2013) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (#("o" 0 1 (fontified t)) . -2014) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) 2015) nil (26373 19915 132463 513000) 0 nil])
([nil nil ((2013 . 2017)) nil (26373 19915 132460 548000) 0 nil])
([nil nil ((2013 . 2017) (#("go" 0 2 (fontified nil)) . -2013) (2013 . 2015) (#("Goal" 0 4 (fontified nil)) . -2013) (2013 . 2017) (#("goal" 0 4 (fontified t)) . -2013) (undo-tree-id1262 . -4) (undo-tree-id1263 . -4) (undo-tree-id1264 . -4) 2017) nil (26373 19915 132459 225000) 0 nil])
([nil nil ((2017 . 2038)) nil (26373 19915 132455 769000) 0 nil])
([nil nil ((2038 . 2043)) nil (26373 19915 132454 947000) 0 nil])
([nil nil ((2043 . 2044)) nil (26373 19915 132450 459000) 0 nil])
([nil nil ((#("\\" 0 1 (fontified t)) . -1976) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) 1977) nil (26373 19915 132446 40000) 0 nil])
([nil nil ((4281 . 4285) (t 26373 19915 141126 532000)) nil (26373 19972 139276 452000) 0 nil])
([nil nil ((4285 . 4288)) nil (26373 19972 139275 680000) 0 nil])
([nil nil ((4295 . 4306)) nil (26373 19972 139275 270000) 0 nil])
([nil nil ((#(" " 0 1 (fontified nil)) . 4305) (4305 . 4306) (#(" " 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . 4305) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) 4306) nil (26373 19972 139273 356000) 0 nil])
([nil nil ((4305 . 4306)) nil (26373 19972 139237 288000) 0 nil])
([nil nil ((#(" " 0 1 (fontified nil)) . 4287) (4287 . 4288) (#(" " 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . 4287) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) 4288 (t 26373 19972 170653 304000)) nil (26373 19982 658238 538000) 0 nil])
([nil nil ((#(" " 0 1 (fontified nil)) . 4285) (4285 . 4286) (#(" " 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . 4285) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) 4286) nil (26373 19982 658213 501000) 0 nil])
([nil nil ((4305 . 4316) (t 26373 19982 666750 860000)) nil (26373 20055 592260 326000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -4281) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (#("o" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -4282) (undo-tree-id1506 . -1) (undo-tree-id1507 . -1) (undo-tree-id1508 . -1) (undo-tree-id1509 . -1) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (undo-tree-id1519 . -1) (undo-tree-id1520 . -1) (undo-tree-id1521 . -1) (undo-tree-id1522 . -1) (undo-tree-id1523 . -1) (undo-tree-id1524 . -1) (undo-tree-id1525 . -1) (undo-tree-id1526 . -1) (undo-tree-id1527 . -1) (undo-tree-id1528 . -1) (undo-tree-id1529 . -1) (undo-tree-id1530 . -1) (undo-tree-id1531 . -1) (undo-tree-id1532 . -1) (undo-tree-id1533 . -1) (undo-tree-id1534 . -1) (undo-tree-id1535 . -1) (undo-tree-id1536 . -1) (undo-tree-id1537 . -1) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) (undo-tree-id1542 . -1) (undo-tree-id1543 . -1) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (undo-tree-id1546 . -1) (undo-tree-id1547 . -1) (undo-tree-id1548 . -1) (undo-tree-id1549 . -1) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) (undo-tree-id1552 . -1) (undo-tree-id1553 . -1) (undo-tree-id1554 . -1) (undo-tree-id1555 . -1) (undo-tree-id1556 . -1) (undo-tree-id1557 . -1) (undo-tree-id1558 . -1) (undo-tree-id1559 . -1) (undo-tree-id1560 . -1) (undo-tree-id1561 . -1) (undo-tree-id1562 . -1) (undo-tree-id1563 . -1) (undo-tree-id1564 . -1) (undo-tree-id1565 . -1) (undo-tree-id1566 . -1) (undo-tree-id1567 . -1) (undo-tree-id1568 . -1) (undo-tree-id1569 . -1) (undo-tree-id1570 . -1) (undo-tree-id1571 . -1) (undo-tree-id1572 . -1) (undo-tree-id1573 . -1) (undo-tree-id1574 . -1) (undo-tree-id1575 . -1) (undo-tree-id1576 . -1) (undo-tree-id1577 . -1) (undo-tree-id1578 . -1) (undo-tree-id1579 . -1) (undo-tree-id1580 . -1) (undo-tree-id1581 . -1) (undo-tree-id1582 . -1) (undo-tree-id1583 . -1) (undo-tree-id1584 . -1) (undo-tree-id1585 . -1) (undo-tree-id1586 . -1) (undo-tree-id1587 . -1) (undo-tree-id1588 . -1) (undo-tree-id1589 . -1) (undo-tree-id1590 . -1) (undo-tree-id1591 . -1) (undo-tree-id1592 . -1) (undo-tree-id1593 . -1) (undo-tree-id1594 . -1) (undo-tree-id1595 . -1) (undo-tree-id1596 . -1) (undo-tree-id1597 . -1) (undo-tree-id1598 . -1) (undo-tree-id1599 . -1) (undo-tree-id1600 . -1) (#("a" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -4283) (undo-tree-id1601 . -1) (undo-tree-id1602 . -1) (undo-tree-id1603 . -1) (undo-tree-id1604 . -1) (undo-tree-id1605 . -1) (undo-tree-id1606 . -1) (undo-tree-id1607 . -1) (undo-tree-id1608 . -1) (undo-tree-id1609 . -1) (undo-tree-id1610 . -1) (undo-tree-id1611 . -1) (undo-tree-id1612 . -1) (undo-tree-id1613 . -1) (undo-tree-id1614 . -1) (undo-tree-id1615 . -1) (undo-tree-id1616 . -1) (undo-tree-id1617 . -1) (undo-tree-id1618 . -1) (undo-tree-id1619 . -1) (undo-tree-id1620 . -1) (undo-tree-id1621 . -1) (undo-tree-id1622 . -1) (undo-tree-id1623 . -1) (undo-tree-id1624 . -1) (undo-tree-id1625 . -1) (undo-tree-id1626 . -1) (undo-tree-id1627 . -1) (undo-tree-id1628 . -1) (undo-tree-id1629 . -1) (undo-tree-id1630 . -1) (undo-tree-id1631 . -1) (undo-tree-id1632 . -1) (undo-tree-id1633 . -1) (undo-tree-id1634 . -1) (undo-tree-id1635 . -1) (undo-tree-id1636 . -1) (undo-tree-id1637 . -1) (undo-tree-id1638 . -1) (undo-tree-id1639 . -1) (undo-tree-id1640 . -1) (undo-tree-id1641 . -1) (undo-tree-id1642 . -1) (undo-tree-id1643 . -1) (undo-tree-id1644 . -1) (undo-tree-id1645 . -1) (undo-tree-id1646 . -1) (undo-tree-id1647 . -1) (undo-tree-id1648 . -1) (undo-tree-id1649 . -1) (undo-tree-id1650 . -1) (undo-tree-id1651 . -1) (undo-tree-id1652 . -1) (undo-tree-id1653 . -1) (undo-tree-id1654 . -1) (undo-tree-id1655 . -1) (undo-tree-id1656 . -1) (undo-tree-id1657 . -1) (undo-tree-id1658 . -1) (undo-tree-id1659 . -1) (undo-tree-id1660 . -1) (undo-tree-id1661 . -1) (undo-tree-id1662 . -1) (undo-tree-id1663 . -1) (undo-tree-id1664 . -1) (undo-tree-id1665 . -1) (undo-tree-id1666 . -1) (undo-tree-id1667 . -1) (undo-tree-id1668 . -1) (undo-tree-id1669 . -1) (undo-tree-id1670 . -1) (undo-tree-id1671 . -1) (undo-tree-id1672 . -1) (undo-tree-id1673 . -1) (undo-tree-id1674 . -1) (undo-tree-id1675 . -1) (undo-tree-id1676 . -1) (undo-tree-id1677 . -1) (undo-tree-id1678 . -1) (undo-tree-id1679 . -1) (#("l" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -4284) (undo-tree-id1680 . -1) (undo-tree-id1681 . -1) (undo-tree-id1682 . -1) (undo-tree-id1683 . -1) (undo-tree-id1684 . -1) (undo-tree-id1685 . -1) (undo-tree-id1686 . -1) (undo-tree-id1687 . -1) (undo-tree-id1688 . -1) (undo-tree-id1689 . -1) (undo-tree-id1690 . -1) (undo-tree-id1691 . -1) (undo-tree-id1692 . -1) (undo-tree-id1693 . -1) (undo-tree-id1694 . -1) (undo-tree-id1695 . -1) (undo-tree-id1696 . -1) (undo-tree-id1697 . -1) (undo-tree-id1698 . -1) (undo-tree-id1699 . -1) (undo-tree-id1700 . -1) (undo-tree-id1701 . -1) (undo-tree-id1702 . -1) (undo-tree-id1703 . -1) (undo-tree-id1704 . -1) (undo-tree-id1705 . -1) (undo-tree-id1706 . -1) (undo-tree-id1707 . -1) (undo-tree-id1708 . -1) (undo-tree-id1709 . -1) (undo-tree-id1710 . -1) (undo-tree-id1711 . -1) (undo-tree-id1712 . -1) (undo-tree-id1713 . -1) (undo-tree-id1714 . -1) (undo-tree-id1715 . -1) (undo-tree-id1716 . -1) (undo-tree-id1717 . -1) (undo-tree-id1718 . -1) (undo-tree-id1719 . -1) (undo-tree-id1720 . -1) (undo-tree-id1721 . -1) (undo-tree-id1722 . -1) (undo-tree-id1723 . -1) (undo-tree-id1724 . -1) (undo-tree-id1725 . -1) (undo-tree-id1726 . -1) (undo-tree-id1727 . -1) (undo-tree-id1728 . -1) (undo-tree-id1729 . -1) (undo-tree-id1730 . -1) (undo-tree-id1731 . -1) (undo-tree-id1732 . -1) (undo-tree-id1733 . -1) (undo-tree-id1734 . -1) (undo-tree-id1735 . -1) (undo-tree-id1736 . -1) (undo-tree-id1737 . -1) (#("=" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -4285) (undo-tree-id1738 . -1) (undo-tree-id1739 . -1) (undo-tree-id1740 . -1) (undo-tree-id1741 . -1) (undo-tree-id1742 . -1) (undo-tree-id1743 . -1) (undo-tree-id1744 . -1) (undo-tree-id1745 . -1) (undo-tree-id1746 . -1) (undo-tree-id1747 . -1) (undo-tree-id1748 . -1) (undo-tree-id1749 . -1) (undo-tree-id1750 . -1) (undo-tree-id1751 . -1) (undo-tree-id1752 . -1) (undo-tree-id1753 . -1) (undo-tree-id1754 . -1) (undo-tree-id1755 . -1) (undo-tree-id1756 . -1) (undo-tree-id1757 . -1) (undo-tree-id1758 . -1) (undo-tree-id1759 . -1) (undo-tree-id1760 . -1) (undo-tree-id1761 . -1) (undo-tree-id1762 . -1) (undo-tree-id1763 . -1) (undo-tree-id1764 . -1) (undo-tree-id1765 . -1) (undo-tree-id1766 . -1) (undo-tree-id1767 . -1) (undo-tree-id1768 . -1) 4286 (t 26373 20055 601433 80000)) nil (26373 20062 67839 264000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -4288) (undo-tree-id1769 . -1) (undo-tree-id1770 . -1) (undo-tree-id1771 . -1) (undo-tree-id1772 . -1) (undo-tree-id1773 . -1) (undo-tree-id1774 . -1) (undo-tree-id1775 . -1) (undo-tree-id1776 . -1) (undo-tree-id1777 . -1) (undo-tree-id1778 . -1) (undo-tree-id1779 . -1) (undo-tree-id1780 . -1) (undo-tree-id1781 . -1) (undo-tree-id1782 . -1) (undo-tree-id1783 . -1) (undo-tree-id1784 . -1) (undo-tree-id1785 . -1) (undo-tree-id1786 . -1) (undo-tree-id1787 . -1) (undo-tree-id1788 . -1) (undo-tree-id1789 . -1) (undo-tree-id1790 . -1) (undo-tree-id1791 . -1) (#("o" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -4289) (undo-tree-id1792 . -1) (undo-tree-id1793 . -1) (undo-tree-id1794 . -1) (#("a" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -4290) (undo-tree-id1795 . -1) (undo-tree-id1796 . -1) (undo-tree-id1797 . -1) (#("l" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -4291) (undo-tree-id1798 . -1) (undo-tree-id1799 . -1) (undo-tree-id1800 . -1) (#("_" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -4292) (undo-tree-id1801 . -1) (undo-tree-id1802 . -1) (undo-tree-id1803 . -1) (#("v" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -4293) (undo-tree-id1804 . -1) (undo-tree-id1805 . -1) (undo-tree-id1806 . -1) (#("a" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -4294) (undo-tree-id1807 . -1) (undo-tree-id1808 . -1) (undo-tree-id1809 . -1) (#("l" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -4295) (undo-tree-id1810 . -1) (undo-tree-id1811 . -1) (undo-tree-id1812 . -1) (#("u" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -4296) (undo-tree-id1813 . -1) (undo-tree-id1814 . -1) (undo-tree-id1815 . -1) (#("e" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -4297) (undo-tree-id1816 . -1) (undo-tree-id1817 . -1) (undo-tree-id1818 . -1) (#("=" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -4298) (undo-tree-id1819 . -1) (undo-tree-id1820 . -1) 4299 (t 26373 20062 75493 954000)) nil (26373 20070 709344 714000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -4291) (undo-tree-id1827 . -1) (undo-tree-id1828 . -1) (undo-tree-id1829 . -1) (undo-tree-id1830 . -1) (undo-tree-id1831 . -1) (#("e" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -4292) (undo-tree-id1832 . -1) (undo-tree-id1833 . -1) (undo-tree-id1834 . -1) (undo-tree-id1835 . -1) (undo-tree-id1836 . -1) (#("f" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -4293) (undo-tree-id1837 . -1) (undo-tree-id1838 . -1) (undo-tree-id1839 . -1) (undo-tree-id1840 . -1) (undo-tree-id1841 . -1) (#("a" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -4294) (undo-tree-id1842 . -1) (undo-tree-id1843 . -1) (undo-tree-id1844 . -1) (undo-tree-id1845 . -1) (undo-tree-id1846 . -1) (#("u" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -4295) (undo-tree-id1847 . -1) (undo-tree-id1848 . -1) (undo-tree-id1849 . -1) (undo-tree-id1850 . -1) (undo-tree-id1851 . -1) (#("l" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -4296) (undo-tree-id1852 . -1) (undo-tree-id1853 . -1) (undo-tree-id1854 . -1) (undo-tree-id1855 . -1) (undo-tree-id1856 . -1) (#("t" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -4297) (undo-tree-id1857 . -1) (undo-tree-id1858 . -1) (undo-tree-id1859 . -1) (undo-tree-id1860 . -1) (undo-tree-id1861 . -1) (#("=" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -4298) (undo-tree-id1862 . -1) (undo-tree-id1863 . -1) 4299 (t 26373 20070 717575 284000)) nil (26373 20078 984276 185000) 0 nil])
([nil nil ((#(" " 0 1 (fontified nil)) . 4290) (4290 . 4291) (#(" " 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . 4290) (undo-tree-id1821 . -1) (undo-tree-id1822 . -1) (undo-tree-id1823 . -1) (undo-tree-id1824 . -1) (undo-tree-id1825 . -1) (undo-tree-id1826 . -1) 4291) nil (26373 20078 984259 603000) 0 nil])
([nil nil ((4290 . 4291)) nil (26373 20078 984245 497000) 0 nil])
([nil nil ((4260 . 4261) (t 26373 20078 992653 239000)) nil (26373 20362 585018 461000) 0 nil])
([nil nil ((4261 . 4262)) nil (26373 20362 585018 150000) 0 nil])
([nil nil ((4295 . 4300)) nil (26373 20362 585017 900000) 0 nil])
([nil nil ((4429 . 4433) (#("    " 0 4 (fontified nil)) . 4428) (undo-tree-id1988 . -4) (4432 . 4433)) nil (26373 20362 585017 419000) 0 nil])
([nil nil ((4300 . 4301)) nil (26373 20362 585016 748000) 0 nil])
([nil nil ((4300 . 4316)) nil (26373 20362 585016 477000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -4315) (undo-tree-id1985 . -1) (undo-tree-id1986 . -1) (undo-tree-id1987 . -1) 4316) nil (26373 20362 585015 986000) 0 nil])
([nil nil ((4315 . 4318)) nil (26373 20362 585014 784000) 0 nil])
([nil nil ((4318 . 4320)) nil (26373 20362 585014 523000) 0 nil])
([nil nil ((4310 . 4320) (#("se" 0 2 (fontified nil)) . -4310) (4310 . 4312) (#("setRewards" 0 10 (fontified t match-data (0 3 0 1 1 2 2 3))) . -4310) (undo-tree-id1982 . -10) (undo-tree-id1983 . -10) (undo-tree-id1984 . -10) 4320) nil (26373 20362 585013 902000) 0 nil])
([nil nil ((#("2" 0 1 (face py-number-face fontified t)) . -4219) (undo-tree-id1978 . -1) (undo-tree-id1979 . -1) (undo-tree-id1980 . -1) (undo-tree-id1981 . -1) 4220) nil (26373 20362 585012 339000) 0 nil])
([nil nil ((4219 . 4220)) nil (26373 20362 585009 33000) 0 nil])
([nil nil ((4320 . 4323)) nil (26373 20362 585008 833000) 0 nil])
([nil nil ((#("0" 0 1 (face py-number-face fontified t match-data (0 10 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10))) . -4322) (undo-tree-id1977 . -1) 4323) nil (26373 20362 585008 452000) 0 nil])
([nil nil ((4322 . 4328)) nil (26373 20362 585007 711000) 0 nil])
([nil nil ((4328 . 4331)) nil (26373 20362 585007 450000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t match-data (0 10 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10))) . 4330) (undo-tree-id1931 . -1) (undo-tree-id1932 . -1) (undo-tree-id1933 . -1) (undo-tree-id1934 . -1) (undo-tree-id1935 . -1) (undo-tree-id1936 . -1) (undo-tree-id1937 . -1) (undo-tree-id1938 . -1) (undo-tree-id1939 . -1) (undo-tree-id1940 . -1) (undo-tree-id1941 . -1) (undo-tree-id1942 . -1) (undo-tree-id1943 . -1) (undo-tree-id1944 . -1) (undo-tree-id1945 . -1) (undo-tree-id1946 . -1) (undo-tree-id1947 . -1) (undo-tree-id1948 . -1) (undo-tree-id1949 . -1) (undo-tree-id1950 . -1) (undo-tree-id1951 . -1) (undo-tree-id1952 . -1) (undo-tree-id1953 . -1) (undo-tree-id1954 . -1) (undo-tree-id1955 . -1) (undo-tree-id1956 . -1) (undo-tree-id1957 . -1) (undo-tree-id1958 . -1) (undo-tree-id1959 . -1) (undo-tree-id1960 . -1) (undo-tree-id1961 . -1) (undo-tree-id1962 . -1) (undo-tree-id1963 . -1) (undo-tree-id1964 . -1) (undo-tree-id1965 . -1) (undo-tree-id1966 . -1) (undo-tree-id1967 . -1) (undo-tree-id1968 . -1) (undo-tree-id1969 . -1) (undo-tree-id1970 . -1) (undo-tree-id1971 . -1) (undo-tree-id1972 . -1) (undo-tree-id1973 . -1) (undo-tree-id1974 . -1) (undo-tree-id1975 . -1) (undo-tree-id1976 . -1) 4331) nil (26373 20362 585006 348000) 0 nil])
([nil nil ((#("," 0 1 (fontified t match-data (0 10 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10))) . -4329) (undo-tree-id1864 . -1) (undo-tree-id1865 . -1) (undo-tree-id1866 . -1) (undo-tree-id1867 . -1) (undo-tree-id1868 . -1) (undo-tree-id1869 . -1) (undo-tree-id1870 . -1) (undo-tree-id1871 . -1) (undo-tree-id1872 . -1) (undo-tree-id1873 . -1) (undo-tree-id1874 . -1) (undo-tree-id1875 . -1) (undo-tree-id1876 . -1) (undo-tree-id1877 . -1) (undo-tree-id1878 . -1) (undo-tree-id1879 . -1) (undo-tree-id1880 . -1) (undo-tree-id1881 . -1) (undo-tree-id1882 . -1) (undo-tree-id1883 . -1) (undo-tree-id1884 . -1) (undo-tree-id1885 . -1) (undo-tree-id1886 . -1) (undo-tree-id1887 . -1) (undo-tree-id1888 . -1) (undo-tree-id1889 . -1) (undo-tree-id1890 . -1) (undo-tree-id1891 . -1) (undo-tree-id1892 . -1) (undo-tree-id1893 . -1) (undo-tree-id1894 . -1) (undo-tree-id1895 . -1) (undo-tree-id1896 . -1) (undo-tree-id1897 . -1) (undo-tree-id1898 . -1) (undo-tree-id1899 . -1) (undo-tree-id1900 . -1) (undo-tree-id1901 . -1) (undo-tree-id1902 . -1) (undo-tree-id1903 . -1) (undo-tree-id1904 . -1) (undo-tree-id1905 . -1) (undo-tree-id1906 . -1) (undo-tree-id1907 . -1) (undo-tree-id1908 . -1) (undo-tree-id1909 . -1) (undo-tree-id1910 . -1) (undo-tree-id1911 . -1) (undo-tree-id1912 . -1) (undo-tree-id1913 . -1) (undo-tree-id1914 . -1) (undo-tree-id1915 . -1) (undo-tree-id1916 . -1) (undo-tree-id1917 . -1) (undo-tree-id1918 . -1) (undo-tree-id1919 . -1) (undo-tree-id1920 . -1) (undo-tree-id1921 . -1) (undo-tree-id1922 . -1) (undo-tree-id1923 . -1) (undo-tree-id1924 . -1) (undo-tree-id1925 . -1) (undo-tree-id1926 . -1) (undo-tree-id1927 . -1) (undo-tree-id1928 . -1) (undo-tree-id1929 . -1) (undo-tree-id1930 . -1) 4330) nil (26373 20362 584987 82000) 0 nil])
([nil nil ((4329 . 4330)) nil (26373 20362 584940 253000) 0 nil])
([nil nil ((#("3" 0 1 (face py-number-face fontified t)) . -2440) (undo-tree-id2029 . -1) (undo-tree-id2030 . -1) 2441 (t 26373 20362 594356 972000)) nil (26373 20461 999740 875000) 0 nil])
([nil nil ((2440 . 2453)) nil (26373 20461 999739 883000) 0 nil])
([nil nil ((2450 . 2459) (#("DIM" 0 3 (fontified nil)) . -2450) (2450 . 2453) (#("DIMENSION" 0 9 (fontified nil)) . -2450) (2450 . 2459) (#("DIM" 0 3 (fontified t)) . -2450) (undo-tree-id2026 . -3) (undo-tree-id2027 . -3) (undo-tree-id2028 . -3) 2453) nil (26373 20461 999739 21000) 0 nil])
([nil nil ((#("3" 0 1 (face py-number-face fontified t)) . -2482) (undo-tree-id2025 . -1) 2483) nil (26373 20461 999736 987000) 0 nil])
([nil nil ((2482 . 2497)) nil (26373 20461 999736 126000) 0 nil])
([nil nil ((2492 . 2501) (#("DI" 0 2 (fontified nil)) . -2492) (2492 . 2494) (#("DIMENSION" 0 9 (fontified nil)) . -2492) (2492 . 2501) (#("DIMEn" 0 5 (fontified t)) . -2492) (undo-tree-id1989 . -5) (undo-tree-id1990 . -5) (undo-tree-id1991 . -5) (undo-tree-id1992 . -5) (undo-tree-id1993 . -5) (undo-tree-id1994 . -5) (undo-tree-id1995 . -5) (undo-tree-id1996 . -5) (undo-tree-id1997 . -5) (undo-tree-id1998 . -5) (undo-tree-id1999 . -5) (undo-tree-id2000 . -5) (undo-tree-id2001 . -5) (undo-tree-id2002 . -5) (undo-tree-id2003 . -5) (undo-tree-id2004 . -5) (undo-tree-id2005 . -5) (undo-tree-id2006 . -5) (undo-tree-id2007 . -5) (undo-tree-id2008 . -5) (undo-tree-id2009 . -5) (undo-tree-id2010 . -5) (undo-tree-id2011 . -5) (undo-tree-id2012 . -5) (undo-tree-id2013 . -5) (undo-tree-id2014 . -5) (undo-tree-id2015 . -5) (undo-tree-id2016 . -5) (undo-tree-id2017 . -5) (undo-tree-id2018 . -5) (undo-tree-id2019 . -5) (undo-tree-id2020 . -5) (undo-tree-id2021 . -5) (undo-tree-id2022 . -5) (undo-tree-id2023 . -5) (undo-tree-id2024 . -5) 2497) nil (26373 20461 999731 737000) 0 nil])
([nil nil ((#("3" 0 1 (face py-number-face fontified t)) . -4255) (undo-tree-id2064 . -1) (undo-tree-id2065 . -1) (undo-tree-id2066 . -1) (undo-tree-id2067 . -1) (undo-tree-id2068 . -1) (undo-tree-id2069 . -1) (undo-tree-id2070 . -1) (undo-tree-id2071 . -1) (undo-tree-id2072 . -1) (undo-tree-id2073 . -1) (undo-tree-id2074 . -1) (undo-tree-id2075 . -1) (undo-tree-id2076 . -1) (undo-tree-id2077 . -1) (undo-tree-id2078 . -1) (undo-tree-id2079 . -1) (undo-tree-id2080 . -1) (undo-tree-id2081 . -1) (undo-tree-id2082 . -1) (undo-tree-id2083 . -1) (undo-tree-id2084 . -1) (undo-tree-id2085 . -1) (undo-tree-id2086 . -1) (undo-tree-id2087 . -1) (undo-tree-id2088 . -1) (undo-tree-id2089 . -1) (undo-tree-id2090 . -1) (undo-tree-id2091 . -1) 4256 (t 26373 20462 8313 717000)) nil (26373 20471 34573 342000) 0 nil])
([nil nil ((4255 . 4256)) nil (26373 20471 34164 451000) 0 nil])
([nil nil ((4332 . 4336) (#("    " 0 4 (fontified t match-data (0 3 0 1 1 2 2 3))) . 4332)) nil (26373 20471 34163 860000) 0 nil])
([nil nil ((4336 . 4337)) nil (26373 20471 34163 490000) 0 nil])
([nil nil ((4337 . 4338)) nil (26373 20471 34162 959000) 0 nil])
([nil nil ((#("#" 0 1 (face font-lock-comment-face fontified t)) . -4296) (undo-tree-id2031 . -1) (undo-tree-id2032 . -1) (undo-tree-id2033 . -1) (undo-tree-id2034 . -1) (undo-tree-id2035 . -1) (undo-tree-id2036 . -1) (undo-tree-id2037 . -1) (undo-tree-id2038 . -1) (undo-tree-id2039 . -1) (undo-tree-id2040 . -1) (undo-tree-id2041 . -1) (undo-tree-id2042 . -1) (undo-tree-id2043 . -1) (undo-tree-id2044 . -1) (undo-tree-id2045 . -1) (undo-tree-id2046 . -1) (undo-tree-id2047 . -1) (undo-tree-id2048 . -1) (undo-tree-id2049 . -1) (undo-tree-id2050 . -1) (#(" " 0 1 (fontified nil)) . 4297) (4297 . 4298) (#(" " 0 1 (face font-lock-comment-face fontified t)) . 4297) (undo-tree-id2051 . -1) (undo-tree-id2052 . -1) (undo-tree-id2053 . -1) (undo-tree-id2054 . -1) (undo-tree-id2055 . -1) (undo-tree-id2056 . -1) (undo-tree-id2057 . -1) (undo-tree-id2058 . -1) (undo-tree-id2059 . -1) (undo-tree-id2060 . -1) (undo-tree-id2061 . -1) (undo-tree-id2062 . -1) (undo-tree-id2063 . -1) 4298) nil (26373 20471 34158 450000) 0 nil])
([nil nil ((#("        if (new_position[0] >= self.Grid.DIMENSION or new_position[1] >= self.Grid.DIMENSION):
            raise ValueError(f\"[ERROR] State {new_position} is out of bounds\")" 0 8 (fontified t) 8 10 (face font-lock-keyword-face fontified t) 10 11 (fontified t) 11 12 (face (rainbow-delimiters-depth-1-face) fontified t) 12 24 (fontified t) 24 25 (face (rainbow-delimiters-depth-2-face) fontified t) 25 26 (face py-number-face fontified t) 26 27 (face (rainbow-delimiters-depth-2-face) fontified t) 27 31 (fontified t) 31 35 (face py-object-reference-face fontified t) 35 41 (fontified t) 41 50 (fontified t match-data (0 3 0 1 1 2 2 3)) 50 51 (fontified t) 51 53 (face font-lock-keyword-face fontified t) 53 66 (fontified t) 66 67 (face (rainbow-delimiters-depth-2-face) fontified t) 67 68 (face py-number-face fontified t) 68 69 (face (rainbow-delimiters-depth-2-face) fontified t) 69 73 (fontified t) 73 77 (face py-object-reference-face fontified t) 77 83 (fontified t) 83 92 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5)) 92 93 (face (rainbow-delimiters-depth-1-face) fontified t) 93 95 (fontified t) 95 107 (fontified t) 107 112 (face font-lock-keyword-face fontified t) 112 113 (fontified t) 113 123 (face py-exception-name-face fontified t) 123 124 (face (rainbow-delimiters-depth-1-face) fontified t) 124 125 (fontified t) 125 172 (face font-lock-string-face fontified t) 172 173 (face (rainbow-delimiters-depth-1-face) fontified t)) . 2409) (undo-tree-id2110 . -173) (undo-tree-id2111 . -83) (undo-tree-id2112 . -83) (undo-tree-id2113 . -83) (t 26373 20471 43400 781000)) nil (26373 20551 453913 166000) 0 nil])
([nil nil ((2409 . 2417)) nil (26373 20551 453911 432000) 0 nil])
([nil nil ((#("                    # Agent will remain in the same state if it 'bounces'
                    if N[0] >= self.Grid.DIMENSION:
                        N=(self.Grid.DIMENSION-1, N[1])
                    if N[0] < 0:
                        N=(0,N[1])
                    if N[1] >= self.Grid.DIMENSION:
                        N=(N[0], self.Grid.DIMENSION-1)
                    if N[1] < 0:
                        N=(N[0], 0)" 0 20 (fontified t) 20 73 (face font-lock-comment-face fontified t) 73 74 (face font-lock-comment-face fontified t) 74 94 (fontified t) 94 96 (face font-lock-keyword-face fontified t) 96 98 (fontified t) 98 99 (face (rainbow-delimiters-depth-1-face) fontified t) 99 100 (face py-number-face fontified t) 100 101 (face (rainbow-delimiters-depth-1-face) fontified t) 101 105 (fontified t) 105 109 (face py-object-reference-face fontified t) 109 126 (fontified t) 126 150 (fontified t) 150 151 (face py-variable-name-face fontified t) 151 152 (face font-lock-operator-face fontified t) 152 153 (face (rainbow-delimiters-depth-1-face) fontified t) 153 157 (face py-object-reference-face fontified t) 157 173 (fontified t) 173 174 (face py-number-face fontified t) 174 177 (fontified t) 177 178 (face (rainbow-delimiters-depth-2-face) fontified t) 178 179 (face py-number-face fontified t) 179 180 (face (rainbow-delimiters-depth-2-face) fontified t) 180 181 (face (rainbow-delimiters-depth-1-face) fontified t) 181 182 (fontified t) 182 202 (fontified t) 202 204 (face font-lock-keyword-face fontified t) 204 206 (fontified t) 206 207 (face (rainbow-delimiters-depth-1-face) fontified t) 207 208 (face py-number-face fontified t) 208 209 (face (rainbow-delimiters-depth-1-face) fontified t) 209 212 (fontified t) 212 213 (face py-number-face fontified t) 213 215 (fontified t) 215 239 (fontified t) 239 240 (face py-variable-name-face fontified t) 240 241 (face font-lock-operator-face fontified t) 241 242 (face (rainbow-delimiters-depth-1-face) fontified t) 242 243 (face py-number-face fontified t) 243 245 (fontified t) 245 246 (face (rainbow-delimiters-depth-2-face) fontified t) 246 247 (face py-number-face fontified t) 247 248 (face (rainbow-delimiters-depth-2-face) fontified t) 248 249 (face (rainbow-delimiters-depth-1-face) fontified t) 249 250 (fontified t) 250 270 (fontified t) 270 272 (face font-lock-keyword-face fontified t) 272 274 (fontified t) 274 275 (face (rainbow-delimiters-depth-1-face) fontified t) 275 276 (face py-number-face fontified t) 276 277 (face (rainbow-delimiters-depth-1-face) fontified t) 277 281 (fontified t) 281 285 (face py-object-reference-face fontified t) 285 291 (fontified t) 291 302 (fontified t match-data (0 3 0 1 1 2 2 3)) 302 326 (fontified t match-data (0 3 0 1 1 2 2 3)) 326 327 (face py-variable-name-face fontified t match-data (0 3 0 1 1 2 2 3)) 327 328 (face font-lock-operator-face fontified t match-data (0 3 0 1 1 2 2 3)) 328 329 (face (rainbow-delimiters-depth-1-face) fontified t match-data (0 3 0 1 1 2 2 3)) 329 330 (fontified t match-data (0 3 0 1 1 2 2 3)) 330 331 (face (rainbow-delimiters-depth-2-face) fontified t match-data (0 3 0 1 1 2 2 3)) 331 332 (face py-number-face fontified t match-data (0 3 0 1 1 2 2 3)) 332 333 (face (rainbow-delimiters-depth-2-face) fontified t match-data (0 3 0 1 1 2 2 3)) 333 335 (fontified t match-data (0 3 0 1 1 2 2 3)) 335 339 (face py-object-reference-face fontified t match-data (0 3 0 1 1 2 2 3)) 339 340 (fontified t match-data (0 3 0 1 1 2 2 3)) 340 355 (fontified t match-data (0 3 0 1 1 2 2 3)) 355 356 (face py-number-face fontified t match-data (0 3 0 1 1 2 2 3)) 356 357 (face (rainbow-delimiters-depth-1-face) fontified t match-data (0 3 0 1 1 2 2 3)) 357 358 (fontified t match-data (0 3 0 1 1 2 2 3)) 358 378 (fontified t match-data (0 3 0 1 1 2 2 3)) 378 380 (face font-lock-keyword-face fontified t match-data (0 3 0 1 1 2 2 3)) 380 382 (fontified t match-data (0 3 0 1 1 2 2 3)) 382 383 (face (rainbow-delimiters-depth-1-face) fontified t match-data (0 3 0 1 1 2 2 3)) 383 384 (face py-number-face fontified t match-data (0 3 0 1 1 2 2 3)) 384 385 (face (rainbow-delimiters-depth-1-face) fontified t match-data (0 3 0 1 1 2 2 3)) 385 388 (fontified t match-data (0 3 0 1 1 2 2 3)) 388 389 (face py-number-face fontified t match-data (0 3 0 1 1 2 2 3)) 389 391 (fontified t match-data (0 3 0 1 1 2 2 3)) 391 415 (fontified t match-data (0 3 0 1 1 2 2 3)) 415 416 (face py-variable-name-face fontified t match-data (0 3 0 1 1 2 2 3)) 416 417 (face font-lock-operator-face fontified t match-data (0 3 0 1 1 2 2 3)) 417 418 (face (rainbow-delimiters-depth-1-face) fontified t match-data (0 3 0 1 1 2 2 3)) 418 419 (fontified t match-data (0 3 0 1 1 2 2 3)) 419 420 (face (rainbow-delimiters-depth-2-face) fontified t match-data (0 3 0 1 1 2 2 3)) 420 421 (face py-number-face fontified t match-data (0 3 0 1 1 2 2 3)) 421 422 (face (rainbow-delimiters-depth-2-face) fontified t match-data (0 3 0 1 1 2 2 3)) 422 424 (fontified t match-data (0 3 0 1 1 2 2 3)) 424 425 (face py-number-face fontified t match-data (0 3 0 1 1 2 2 3)) 425 426 (face (rainbow-delimiters-depth-1-face) fontified t match-data (0 3 0 1 1 2 2 3))) . 1187) (undo-tree-id2109 . -426)) nil (26373 20551 453911 62000) 0 nil])
([nil nil ((1982 . 1991)) nil (26373 20551 453910 430000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2416 . 2417) (nil fontified nil 2416 . 2417) (nil fontified nil 2415 . 2416) (nil fontified nil 2413 . 2415) (nil fontified nil 2412 . 2413) (nil fontified nil 2411 . 2412) (nil fontified nil 2410 . 2411) (nil fontified nil 2409 . 2410) (nil fontified nil 2408 . 2409) (nil fontified nil 2407 . 2408) (nil fontified nil 2406 . 2407) (nil fontified nil 2382 . 2406) (nil fontified nil 2380 . 2382) (nil fontified nil 2379 . 2380) (nil fontified nil 2376 . 2379) (nil fontified nil 2375 . 2376) (nil fontified nil 2374 . 2375) (nil fontified nil 2373 . 2374) (nil fontified nil 2371 . 2373) (nil fontified nil 2369 . 2371) (nil fontified nil 2349 . 2369) (nil fontified nil 2348 . 2349) (nil fontified nil 2347 . 2348) (nil fontified nil 2346 . 2347) (nil fontified nil 2331 . 2346) (nil fontified nil 2330 . 2331) (nil fontified nil 2326 . 2330) (nil fontified nil 2324 . 2326) (nil fontified nil 2323 . 2324) (nil fontified nil 2322 . 2323) (nil fontified nil 2321 . 2322) (nil fontified nil 2320 . 2321) (nil fontified nil 2319 . 2320) (nil fontified nil 2318 . 2319) (nil fontified nil 2317 . 2318) (nil fontified nil 2293 . 2317) (nil fontified nil 2282 . 2293) (nil fontified nil 2276 . 2282) (nil fontified nil 2272 . 2276) (nil fontified nil 2268 . 2272) (nil fontified nil 2267 . 2268) (nil fontified nil 2266 . 2267) (nil fontified nil 2265 . 2266) (nil fontified nil 2263 . 2265) (nil fontified nil 2261 . 2263) (nil fontified nil 2241 . 2261) (nil fontified nil 2240 . 2241) (nil fontified nil 2239 . 2240) (nil fontified nil 2238 . 2239) (nil fontified nil 2237 . 2238) (nil fontified nil 2236 . 2237) (nil fontified nil 2234 . 2236) (nil fontified nil 2233 . 2234) (nil fontified nil 2232 . 2233) (nil fontified nil 2231 . 2232) (nil fontified nil 2230 . 2231) (nil fontified nil 2206 . 2230) (nil fontified nil 2204 . 2206) (nil fontified nil 2203 . 2204) (nil fontified nil 2200 . 2203) (nil fontified nil 2199 . 2200) (nil fontified nil 2198 . 2199) (nil fontified nil 2197 . 2198) (nil fontified nil 2195 . 2197) (nil fontified nil 2193 . 2195) (nil fontified nil 2173 . 2193) (nil fontified nil 2172 . 2173) (nil fontified nil 2171 . 2172) (nil fontified nil 2170 . 2171) (nil fontified nil 2169 . 2170) (nil fontified nil 2168 . 2169) (nil fontified nil 2165 . 2168) (nil fontified nil 2164 . 2165) (nil fontified nil 2148 . 2164) (nil fontified nil 2144 . 2148) (nil fontified nil 2143 . 2144) (nil fontified nil 2142 . 2143) (nil fontified nil 2141 . 2142) (nil fontified nil 2117 . 2141) (nil fontified nil 2100 . 2117) (nil fontified nil 2096 . 2100) (nil fontified nil 2092 . 2096) (nil fontified nil 2091 . 2092) (nil fontified nil 2090 . 2091) (nil fontified nil 2089 . 2090) (nil fontified nil 2087 . 2089) (nil fontified nil 2085 . 2087) (nil fontified nil 2065 . 2085) (nil fontified nil 2064 . 2065) (nil fontified nil 2011 . 2064) (nil fontified nil 1991 . 2011) (1991 . 2417)) nil (26373 20551 453909 138000) 0 nil])
([nil nil ((1983 . 1991) (#("                            " 0 8 (fontified t) 8 28 (fontified t)) . 1983) (undo-tree-id2108 . -8) 2018) nil (26373 20551 453905 591000) 0 nil])
([nil nil ((2045 . 2053) (#("                    " 0 20 (fontified t)) . 2045) (undo-tree-id2107 . -8) 2053) nil (26373 20551 453904 900000) 0 nil])
([nil nil ((2085 . 2097) (#("                        " 0 24 (fontified t)) . 2085) (undo-tree-id2106 . -8) 2093) nil (26373 20551 453903 848000) 0 nil])
([nil nil ((2097 . 2098)) nil (26373 20551 453903 267000) 0 nil])
([nil nil ((#("n" 0 1 (face py-variable-name-face fontified t)) . -2097) (undo-tree-id2102 . -1) (undo-tree-id2103 . -1) (undo-tree-id2104 . -1) (undo-tree-id2105 . -1) 2098) nil (26373 20551 453902 796000) 0 nil])
([nil nil ((2129 . 2141) (#("                    " 0 20 (fontified t)) . 2129) (undo-tree-id2101 . -12) 2141) nil (26373 20551 453898 307000) 0 nil])
([nil nil ((2154 . 2170) (#("                        " 0 24 (fontified t)) . 2154) (undo-tree-id2100 . -12) 2166) nil (26373 20551 453897 25000) 0 nil])
([nil nil ((2181 . 2197) (#("                    " 0 20 (fontified t)) . 2181) (undo-tree-id2099 . -16) 2197) nil (26373 20551 453896 143000) 0 nil])
([nil nil ((2129 . 2137) (#("            " 0 12 (fontified t)) . 2129) 2145) nil (26373 20551 453895 222000) 0 nil])
([nil nil ((2150 . 2162) (#("                " 0 16 (fontified t)) . 2150) (undo-tree-id2098 . -8) 2158) nil (26373 20551 453894 751000) 0 nil])
([nil nil ((2173 . 2185) (#("                " 0 16 (fontified t)) . 2173) (undo-tree-id2097 . -12) 2185) nil (26373 20551 453893 819000) 0 nil])
([nil nil ((2173 . 2181) (#("            " 0 12 (fontified t)) . 2173) (undo-tree-id2096 . -12) 2185) nil (26373 20551 453892 617000) 0 nil])
([nil nil ((2213 . 2225) (#("                        " 0 24 (fontified t match-data (0 3 0 1 1 2 2 3))) . 2213) (undo-tree-id2095 . -8) 2221) nil (26373 20551 453891 495000) 0 nil])
([nil nil ((2257 . 2269) (#("                    " 0 20 (fontified t match-data (0 3 0 1 1 2 2 3))) . 2257) (undo-tree-id2094 . -12) 2269) nil (26373 20551 453890 583000) 0 nil])
([nil nil ((2257 . 2265) (#("            " 0 12 (fontified t match-data (0 3 0 1 1 2 2 3))) . 2257) (undo-tree-id2093 . -12) 2269) nil (26373 20551 453888 980000) 0 nil])
([nil nil ((2278 . 2290) (#("                        " 0 24 (fontified t match-data (0 3 0 1 1 2 2 3))) . 2278) (undo-tree-id2092 . -8) 2286) nil (26373 20551 453884 712000) 0 nil])
([nil nil ((#("N" 0 1 (fontified t)) . -2056) (undo-tree-id2158 . -1) 2057 (t 26373 20551 463176 659000)) nil (26373 20611 543824 8000) 0 nil])
([nil nil ((2056 . 2068)) nil (26373 20611 543822 475000) 0 nil])
([nil nil ((2056 . 2068) (#("new" 0 3 (fontified nil)) . -2056) (2056 . 2059) (#("new_position" 0 12 (fontified t)) . -2056) (undo-tree-id2154 . -12) (undo-tree-id2155 . -12) (undo-tree-id2156 . -12) (undo-tree-id2157 . -12) 2068) nil (26373 20611 543821 513000) 0 nil])
([nil nil ((2096 . 2108) (#("            " 0 12 (fontified t)) . 2096)) nil (26373 20611 543819 279000) 0 nil])
([nil nil ((#("N" 0 1 (face py-variable-name-face fontified t)) . 2108)) nil (26373 20611 543818 688000) 0 nil])
([nil nil ((2108 . 2112)) nil (26373 20611 543818 107000) 0 nil])
([nil nil ((2108 . 2120) (#("new" 0 3 (fontified nil)) . -2108) (2108 . 2111) (#("new_position" 0 12 (fontified nil)) . -2108) (2108 . 2120) (#("new_" 0 4 (face py-variable-name-face fontified t)) . -2108) (undo-tree-id2151 . -4) (undo-tree-id2152 . -4) (undo-tree-id2153 . -4) 2112) nil (26373 20611 543817 85000) 0 nil])
([nil nil ((#("N" 0 1 (fontified t)) . -2145) (undo-tree-id2150 . -1) 2146) nil (26373 20611 543814 470000) 0 nil])
([nil nil ((2145 . 2148)) nil (26373 20611 543813 598000) 0 nil])
([nil nil ((2145 . 2157) (#("new" 0 3 (fontified nil)) . -2145) (2145 . 2148) (#("new_position" 0 12 (fontified nil)) . -2145) (2145 . 2157) (#("new" 0 3 (fontified t)) . -2145) (undo-tree-id2147 . -3) (undo-tree-id2148 . -3) (undo-tree-id2149 . -3) 2148) nil (26373 20611 543812 907000) 0 nil])
([nil nil ((#("N" 0 1 (fontified t)) . -2173) (undo-tree-id2146 . -1) 2174) nil (26373 20611 543809 891000) 0 nil])
([nil nil ((2173 . 2176)) nil (26373 20611 543809 70000) 0 nil])
([nil nil ((2173 . 2185) (#("new" 0 3 (fontified nil)) . -2173) (2173 . 2176) (#("new_position" 0 12 (fontified nil)) . -2173) (2173 . 2185) (#("new" 0 3 (fontified t)) . -2173) (undo-tree-id2143 . -3) (undo-tree-id2144 . -3) (undo-tree-id2145 . -3) 2176) nil (26373 20611 543808 358000) 0 nil])
([nil nil ((#("N" 0 1 (fontified t)) . -2211) (undo-tree-id2142 . -1) 2212) nil (26373 20611 543806 916000) 0 nil])
([nil nil ((2211 . 2214)) nil (26373 20611 543806 124000) 0 nil])
([nil nil ((2211 . 2223) (#("new" 0 3 (fontified nil)) . -2211) (2211 . 2214) (#("new_position" 0 12 (fontified nil)) . -2211) (2211 . 2223) (#("new" 0 3 (fontified t)) . -2211) (undo-tree-id2139 . -3) (undo-tree-id2140 . -3) (undo-tree-id2141 . -3) 2214) nil (26373 20611 543805 263000) 0 nil])
([nil nil ((#("N" 0 1 (face py-variable-name-face fontified t)) . 2206)) nil (26373 20611 543803 379000) 0 nil])
([nil nil ((2206 . 2209)) nil (26373 20611 543803 8000) 0 nil])
([nil nil ((2206 . 2218) (#("new" 0 3 (fontified nil)) . -2206) (2206 . 2209) (#("new_position" 0 12 (fontified nil)) . -2206) (2206 . 2218) (#("new" 0 3 (face py-variable-name-face fontified t)) . -2206) (undo-tree-id2136 . -3) (undo-tree-id2137 . -3) (undo-tree-id2138 . -3) 2209) nil (26373 20611 543802 197000) 0 nil])
([nil nil ((#("N" 0 1 (fontified t)) . 2250)) nil (26373 20611 543800 464000) 0 nil])
([nil nil ((2250 . 2253)) nil (26373 20611 543799 933000) 0 nil])
([nil nil ((2250 . 2262) (#("new" 0 3 (fontified nil)) . -2250) (2250 . 2253) (#("new_position" 0 12 (fontified nil)) . -2250) (2250 . 2262) (#("new" 0 3 (fontified t)) . -2250) (undo-tree-id2133 . -3) (undo-tree-id2134 . -3) (undo-tree-id2135 . -3) 2253) nil (26373 20611 543799 141000) 0 nil])
([nil nil ((2290 . 2302) (#("            " 0 12 (fontified t match-data (0 3 0 1 1 2 2 3))) . 2290)) nil (26373 20611 543767 742000) 0 nil])
([nil nil ((#("N" 0 1 (face py-variable-name-face fontified t match-data (0 3 0 1 1 2 2 3))) . 2302)) nil (26373 20611 543767 111000) 0 nil])
([nil nil ((2302 . 2305)) nil (26373 20611 543766 760000) 0 nil])
([nil nil ((2302 . 2314) (#("new" 0 3 (fontified nil)) . -2302) (2302 . 2305) (#("new_position" 0 12 (fontified nil)) . -2302) (2302 . 2314) (#("new" 0 3 (face py-variable-name-face fontified t match-data (0 3 0 1 1 2 2 3))) . -2302) (undo-tree-id2130 . -3) (undo-tree-id2131 . -3) (undo-tree-id2132 . -3) 2305) nil (26373 20611 543766 29000) 0 nil])
([nil nil ((#("N" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -2316) (undo-tree-id2129 . -1) 2317) nil (26373 20611 543764 275000) 0 nil])
([nil nil ((2316 . 2319)) nil (26373 20611 543763 684000) 0 nil])
([nil nil ((2316 . 2328) (#("new" 0 3 (fontified nil)) . -2316) (2316 . 2319) (#("new_position" 0 12 (fontified nil)) . -2316) (2316 . 2328) (#("new" 0 3 (fontified t match-data (0 3 0 1 1 2 2 3))) . -2316) (undo-tree-id2126 . -3) (undo-tree-id2127 . -3) (undo-tree-id2128 . -3) 2319) nil (26373 20611 543762 732000) 0 nil])
([nil nil ((2356 . 2368) (#("        " 0 8 (fontified t match-data (0 3 0 1 1 2 2 3))) . 2356)) nil (26373 20611 543758 535000) 0 nil])
([nil nil ((2356 . 2364) (#("            " 0 12 (fontified t match-data (0 3 0 1 1 2 2 3))) . 2356) (undo-tree-id2125 . -12) 2368) nil (26373 20611 543757 773000) 0 nil])
([nil nil ((#("N" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . 2367)) nil (26373 20611 543756 60000) 0 nil])
([nil nil ((2367 . 2370)) nil (26373 20611 543755 769000) 0 nil])
([nil nil ((2367 . 2379) (#("new" 0 3 (fontified nil)) . -2367) (2367 . 2370) (#("new_position" 0 12 (fontified nil)) . -2367) (2367 . 2379) (#("new" 0 3 (fontified t match-data (0 3 0 1 1 2 2 3))) . -2367) (undo-tree-id2122 . -3) (undo-tree-id2123 . -3) (undo-tree-id2124 . -3) 2370) nil (26373 20611 543754 767000) 0 nil])
([nil nil ((#("N" 0 1 (face py-variable-name-face fontified t match-data (0 3 0 1 1 2 2 3))) . 2400)) nil (26373 20611 543752 864000) 0 nil])
([nil nil ((2400 . 2403)) nil (26373 20611 543752 593000) 0 nil])
([nil nil ((2400 . 2412) (#("new" 0 3 (fontified nil)) . -2400) (2400 . 2403) (#("new_position" 0 12 (fontified nil)) . -2400) (2400 . 2412) (#("new" 0 3 (face py-variable-name-face fontified t match-data (0 3 0 1 1 2 2 3))) . -2400) (undo-tree-id2119 . -3) (undo-tree-id2120 . -3) (undo-tree-id2121 . -3) 2403) nil (26373 20611 543751 822000) 0 nil])
([nil nil ((#("N" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -2414) (undo-tree-id2118 . -1) 2415) nil (26373 20611 543749 668000) 0 nil])
([nil nil ((2414 . 2417)) nil (26373 20611 543748 466000) 0 nil])
([nil nil ((2414 . 2426) (#("new" 0 3 (fontified nil)) . -2414) (2414 . 2417) (#("new_position" 0 12 (fontified nil)) . -2414) (2414 . 2426) (#("new" 0 3 (fontified t match-data (0 3 0 1 1 2 2 3))) . -2414) (undo-tree-id2114 . -3) (undo-tree-id2115 . -3) (undo-tree-id2116 . -3) (undo-tree-id2117 . -3) 2417) nil (26373 20611 543744 729000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -2481) (undo-tree-id2235 . -1) (#("o" 0 1 (fontified t)) . -2482) (undo-tree-id2236 . -1) (#("s" 0 1 (fontified t)) . -2483) (undo-tree-id2237 . -1) (#("i" 0 1 (fontified t)) . -2484) (undo-tree-id2238 . -1) (#("t" 0 1 (fontified t)) . -2485) (undo-tree-id2239 . -1) (#("i" 0 1 (fontified t)) . -2486) (undo-tree-id2240 . -1) (#("o" 0 1 (fontified nil)) . -2487) (undo-tree-id2241 . -1) (#("n" 0 1 (fontified nil)) . -2488) (undo-tree-id2242 . -1) (#("[" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -2489) (undo-tree-id2243 . -1) (#("1" 0 1 (face py-number-face fontified t)) . -2490) (undo-tree-id2244 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -2491) (undo-tree-id2245 . -1) (#("+" 0 1 (fontified t)) . -2492) (undo-tree-id2246 . -1) (#("d" 0 1 (fontified t)) . -2493) (undo-tree-id2247 . -1) (#("e" 0 1 (fontified t)) . -2494) (undo-tree-id2248 . -1) (#("l" 0 1 (face font-lock-keyword-face fontified t)) . -2495) (undo-tree-id2249 . -1) (#("t" 0 1 (fontified t)) . -2496) (undo-tree-id2250 . -1) (#("a" 0 1 (fontified t)) . -2497) (undo-tree-id2251 . -1) (#("[" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -2498) (undo-tree-id2252 . -1) (#("1" 0 1 (face py-number-face fontified t)) . -2499) (undo-tree-id2253 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -2500) (undo-tree-id2254 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -2501) (undo-tree-id2255 . -1) 2502 (t 26373 20611 552757 111000)) nil (26373 20619 287258 664000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 2480) (undo-tree-id2234 . -1) 2481) nil (26373 20619 287249 546000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -2460) (undo-tree-id2214 . -1) (#("s" 0 1 (fontified t)) . -2461) (undo-tree-id2215 . -1) (#("i" 0 1 (fontified t)) . -2462) (undo-tree-id2216 . -1) (#("t" 0 1 (fontified t)) . -2463) (undo-tree-id2217 . -1) (#("i" 0 1 (fontified t)) . -2464) (undo-tree-id2218 . -1) (#("o" 0 1 (fontified t)) . -2465) (undo-tree-id2219 . -1) (#("n" 0 1 (fontified t)) . -2466) (undo-tree-id2220 . -1) (#("[" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -2467) (undo-tree-id2221 . -1) (#("0" 0 1 (face py-number-face fontified t)) . -2468) (undo-tree-id2222 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -2469) (undo-tree-id2223 . -1) (#("+" 0 1 (fontified t)) . -2470) (undo-tree-id2224 . -1) (#("d" 0 1 (fontified t)) . -2471) (undo-tree-id2225 . -1) (#("e" 0 1 (fontified t)) . -2472) (undo-tree-id2226 . -1) (#("l" 0 1 (face font-lock-keyword-face fontified t)) . -2473) (undo-tree-id2227 . -1) (#("t" 0 1 (fontified t)) . -2474) (undo-tree-id2228 . -1) (#("a" 0 1 (fontified t)) . -2475) (undo-tree-id2229 . -1) (#("[" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -2476) (undo-tree-id2230 . -1) (#("0" 0 1 (face py-number-face fontified t)) . -2477) (undo-tree-id2231 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t)) . -2478) (undo-tree-id2232 . -1) (#("," 0 1 (fontified t)) . -2479) (undo-tree-id2233 . -1) 2480) nil (26373 20619 287245 38000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t)) . -2458) (undo-tree-id2212 . -1) (#("p" 0 1 (fontified t)) . -2459) (undo-tree-id2213 . -1) 2460) nil (26373 20619 287236 91000) 0 nil])
([nil nil ((2458 . 2461)) nil (26373 20619 287234 728000) 0 nil])
([nil nil ((2458 . 2470) (#("new" 0 3 (fontified nil)) . -2458) (2458 . 2461) (#("new_position" 0 12 (fontified nil)) . -2458) (2458 . 2470) (#("new" 0 3 (fontified t)) . -2458) (undo-tree-id2159 . -3) (undo-tree-id2160 . -3) (undo-tree-id2161 . -2) (undo-tree-id2162 . -2) (undo-tree-id2163 . -2) (undo-tree-id2164 . -2) (undo-tree-id2165 . -2) (undo-tree-id2166 . -3) (undo-tree-id2167 . -3) (undo-tree-id2168 . -3) (undo-tree-id2169 . -3) (undo-tree-id2170 . -3) (undo-tree-id2171 . -3) (undo-tree-id2172 . -3) (undo-tree-id2173 . -3) (undo-tree-id2174 . -3) (undo-tree-id2175 . -3) (undo-tree-id2176 . -3) (undo-tree-id2177 . -3) (undo-tree-id2178 . -3) (undo-tree-id2179 . -3) (undo-tree-id2180 . -3) (undo-tree-id2181 . -3) (undo-tree-id2182 . -3) (undo-tree-id2183 . -3) (undo-tree-id2184 . -3) (undo-tree-id2185 . -3) (undo-tree-id2186 . -3) (undo-tree-id2187 . -3) (undo-tree-id2188 . -3) (undo-tree-id2189 . -3) (undo-tree-id2190 . -3) (undo-tree-id2191 . -3) (undo-tree-id2192 . -3) (undo-tree-id2193 . -3) (undo-tree-id2194 . -3) (undo-tree-id2195 . -3) (undo-tree-id2196 . -3) (undo-tree-id2197 . -3) (undo-tree-id2198 . -3) (undo-tree-id2199 . -3) (undo-tree-id2200 . -3) (undo-tree-id2201 . -3) (undo-tree-id2202 . -3) (undo-tree-id2203 . -3) (undo-tree-id2204 . -3) (undo-tree-id2205 . -3) (undo-tree-id2206 . -3) (undo-tree-id2207 . -3) (undo-tree-id2208 . -3) (undo-tree-id2209 . -3) (undo-tree-id2210 . -3) (undo-tree-id2211 . -3) 2461) nil (26373 20619 287230 541000) 0 nil])
([nil nil ((1188 . 1208) (#("                        " 0 24 (fontified t)) . -1188) (undo-tree-id2307 . -24) (undo-tree-id2308 . -24) 1212 (t 26373 20619 296831 955000)) nil (26373 20683 269479 337000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . 1204) (undo-tree-id2306 . -4) 1208) nil (26373 20683 269477 734000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . 1200) (undo-tree-id2305 . -4) 1204) nil (26373 20683 269476 813000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . 1196) (undo-tree-id2304 . -4) 1200) nil (26373 20683 269475 851000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . 1192) (undo-tree-id2303 . -4) 1196) nil (26373 20683 269473 547000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1188) (undo-tree-id2302 . -4) 1192) nil (26373 20683 269471 102000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -1185) (undo-tree-id2294 . -1) (undo-tree-id2295 . -1) (undo-tree-id2296 . -1) (#("
" 0 1 (fontified t)) . -1186) (undo-tree-id2297 . -1) (undo-tree-id2298 . -1) (undo-tree-id2299 . -1) (#("
" 0 1 (fontified t)) . -1187) (undo-tree-id2300 . -1) (undo-tree-id2301 . -1) 1188) nil (26373 20683 269469 569000) 0 nil])
([nil nil ((1185 . 1206)) nil (26373 20683 269463 498000) 0 nil])
([nil nil ((1206 . 1213)) nil (26373 20683 269462 977000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -1210) (undo-tree-id2285 . -1) (undo-tree-id2286 . -1) (undo-tree-id2287 . -1) (#("w" 0 1 (fontified t)) . -1211) (undo-tree-id2288 . -1) (undo-tree-id2289 . -1) (undo-tree-id2290 . -1) (#("_" 0 1 (fontified t)) . -1212) (undo-tree-id2291 . -1) (undo-tree-id2292 . -1) (undo-tree-id2293 . -1) 1213) nil (26373 20683 269461 844000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -1209) (undo-tree-id2282 . -1) (undo-tree-id2283 . -1) (undo-tree-id2284 . -1) 1210) nil (26373 20683 269457 346000) 0 nil])
([nil nil ((1209 . 1214)) nil (26373 20683 269455 953000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 1213) (undo-tree-id2281 . -1) 1214) nil (26373 20683 269455 493000) 0 nil])
([nil nil ((#("}" 0 1 (face (rainbow-delimiters-mismatched-face) fontified t)) . -1212) (undo-tree-id2280 . -1) 1213) nil (26373 20683 269454 501000) 0 nil])
([nil nil ((1212 . 1215)) nil (26373 20683 269449 702000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -1214) (undo-tree-id2276 . -1) (undo-tree-id2277 . -1) (undo-tree-id2278 . -1) (undo-tree-id2279 . -1) 1215) nil (26373 20683 269449 151000) 0 nil])
([nil nil ((1214 . 1223)) nil (26373 20683 269447 417000) 0 nil])
([nil nil ((1222 . 1226) (#("G" 0 1 (fontified nil)) . -1222) (1222 . 1223) (#("Grid" 0 4 (fontified nil)) . -1222) (1222 . 1226) (#("G" 0 1 (fontified t)) . -1222) (undo-tree-id2273 . -1) (undo-tree-id2274 . -1) (undo-tree-id2275 . -1) 1223) nil (26373 20683 269446 586000) 0 nil])
([nil nil ((1226 . 1228)) nil (26373 20683 269443 179000) 0 nil])
([nil nil ((1227 . 1236) (#("D" 0 1 (fontified nil)) . -1227) (1227 . 1228) (#("DIMENSION" 0 9 (fontified nil)) . -1227) (1227 . 1236) (#("D" 0 1 (fontified t match-data (0 1 0 1))) . -1227) (undo-tree-id2270 . -1) (undo-tree-id2271 . -1) (undo-tree-id2272 . -1) 1228) nil (26373 20683 269442 398000) 0 nil])
([nil nil ((1236 . 1253)) nil (26373 20683 269440 715000) 0 nil])
([nil nil ((1253 . 1257) (#("Grid" 0 4 (fontified nil)) . -1253) (1253 . 1257)) nil (26373 20683 269440 334000) 0 nil])
([nil nil ((1257 . 1259)) nil (26373 20683 269439 973000) 0 nil])
([nil nil ((1258 . 1267) (#("D" 0 1 (fontified nil)) . -1258) (1258 . 1259) (#("DIMENSION" 0 9 (fontified nil)) . -1258) (1258 . 1267) (#("D" 0 1 (fontified t match-data (0 0))) . -1258) (undo-tree-id2267 . -1) (undo-tree-id2268 . -1) (undo-tree-id2269 . -1) 1259) nil (26373 20683 269439 142000) 0 nil])
([nil nil ((1267 . 1268)) nil (26373 20683 269437 368000) 0 nil])
([nil nil ((1268 . 1293)) nil (26373 20683 269437 128000) 0 nil])
([nil nil ((1293 . 1302)) nil (26373 20683 269436 887000) 0 nil])
([nil nil ((1299 . 1309) (#("Val" 0 3 (fontified nil)) . -1299) (1299 . 1302) (#("ValueError" 0 10 (fontified nil)) . -1299) (1299 . 1309) (#("Val" 0 3 (fontified t match-data (0 1 0 1))) . -1299) (undo-tree-id2264 . -3) (undo-tree-id2265 . -3) (undo-tree-id2266 . -3) 1302) nil (26373 20683 269436 116000) 0 nil])
([nil nil ((1309 . 1316)) nil (26373 20683 269434 613000) 0 nil])
([nil nil ((#("O" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1314) (undo-tree-id2261 . -1) (undo-tree-id2262 . -1) (#("R" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1315) (undo-tree-id2263 . -1) 1316) nil (26373 20683 269433 752000) 0 nil])
([nil nil ((1314 . 1318)) nil (26373 20683 269432 8000) 0 nil])
([nil nil ((#("}" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1317) (undo-tree-id2260 . -1) 1318) nil (26373 20683 269431 527000) 0 nil])
([nil nil ((1317 . 1318)) nil (26373 20683 269430 646000) 0 nil])
([nil nil ((1310 . 1311)) nil (26373 20683 269430 395000) 0 nil])
([nil nil ((1319 . 1320)) nil (26373 20683 269430 135000) 0 nil])
([nil nil ((1319 . 1328)) nil (26373 20683 269429 884000) 0 nil])
([nil nil ((#("n" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1327) (undo-tree-id2257 . -1) (undo-tree-id2258 . -1) (undo-tree-id2259 . -1) 1328) nil (26373 20683 269429 433000) 0 nil])
([nil nil ((1327 . 1329)) nil (26373 20683 269427 380000) 0 nil])
([nil nil ((#("]" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -1328) (undo-tree-id2256 . -1) 1329) nil (26373 20683 269426 738000) 0 nil])
([nil nil ((1328 . 1335)) nil (26373 20683 269419 224000) 0 nil])
([nil nil ((1335 . 1346)) nil (26373 20683 269414 656000) 0 nil])
([nil nil ((1347 . 1348) (t 26373 20683 279450 552000)) nil (26373 20685 495936 700000) 0 nil])
([nil nil ((1695 . 1696) (t 26373 20685 529472 319000)) nil (26373 20726 407338 283000) 0 nil])
([nil nil ((1696 . 1697) (t 26373 20726 416867 919000)) nil (26373 20728 574412 687000) 0 nil])
([nil nil ((4262 . 4263) (t 26373 20728 583888 886000)) nil (26373 20815 48368 780000) 0 nil])
([nil nil ((4263 . 4264)) nil (26373 20815 48368 439000) 0 nil])
([nil nil ((#("#" 0 1 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3))) . -4302) (undo-tree-id2324 . -1) (#(" " 0 1 (fontified nil)) . 4303) (4303 . 4304) (#(" " 0 1 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3))) . 4303) (undo-tree-id2325 . -1) 4304) nil (26373 20815 48367 738000) 0 nil])
([nil nil ((#("2" 0 1 (face py-number-face fontified t)) . -4221) (undo-tree-id2309 . -1) (undo-tree-id2310 . -1) (undo-tree-id2311 . -1) (undo-tree-id2312 . -1) (undo-tree-id2313 . -1) (undo-tree-id2314 . -1) (undo-tree-id2315 . -1) (undo-tree-id2316 . -1) (undo-tree-id2317 . -1) (undo-tree-id2318 . -1) (undo-tree-id2319 . -1) (undo-tree-id2320 . -1) (undo-tree-id2321 . -1) (undo-tree-id2322 . -1) (undo-tree-id2323 . -1) 4222) nil (26373 20815 48365 604000) 0 nil])
([nil nil ((4221 . 4222)) nil (26373 20815 48345 85000) 0 nil])
([nil nil ((4331 . 4335) (t 26373 20815 110204 687000)) nil (26373 20847 534504 674000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t match-data (0 10 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10))) . -4333) (undo-tree-id2667 . -1) (undo-tree-id2668 . -1) (undo-tree-id2669 . -1) (undo-tree-id2670 . -1) (undo-tree-id2671 . -1) (undo-tree-id2672 . -1) (undo-tree-id2673 . -1) (undo-tree-id2674 . -1) (undo-tree-id2675 . -1) (undo-tree-id2676 . -1) (undo-tree-id2677 . -1) (undo-tree-id2678 . -1) (#("1" 0 1 (face py-number-face fontified t match-data (0 10 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10))) . -4334) (undo-tree-id2679 . -1) 4335 (t 26373 20847 544696 627000)) nil (26373 20865 28086 620000) 0 nil])
([nil nil ((4333 . 4334)) nil (26373 20865 28080 97000) 0 nil])
([nil nil ((#("0" 0 1 (face py-number-face fontified t match-data (0 10 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10))) . -4333) (undo-tree-id2586 . -1) (undo-tree-id2587 . -1) (undo-tree-id2588 . -1) (undo-tree-id2589 . -1) (undo-tree-id2590 . -1) (undo-tree-id2591 . -1) (undo-tree-id2592 . -1) (undo-tree-id2593 . -1) (undo-tree-id2594 . -1) (undo-tree-id2595 . -1) (undo-tree-id2596 . -1) (undo-tree-id2597 . -1) (undo-tree-id2598 . -1) (undo-tree-id2599 . -1) (undo-tree-id2600 . -1) (undo-tree-id2601 . -1) (undo-tree-id2602 . -1) (undo-tree-id2603 . -1) (undo-tree-id2604 . -1) (undo-tree-id2605 . -1) (undo-tree-id2606 . -1) (undo-tree-id2607 . -1) (undo-tree-id2608 . -1) (undo-tree-id2609 . -1) (undo-tree-id2610 . -1) (undo-tree-id2611 . -1) (undo-tree-id2612 . -1) (undo-tree-id2613 . -1) (undo-tree-id2614 . -1) (undo-tree-id2615 . -1) (undo-tree-id2616 . -1) (undo-tree-id2617 . -1) (undo-tree-id2618 . -1) (undo-tree-id2619 . -1) (undo-tree-id2620 . -1) (undo-tree-id2621 . -1) (undo-tree-id2622 . -1) (undo-tree-id2623 . -1) (undo-tree-id2624 . -1) (undo-tree-id2625 . -1) (undo-tree-id2626 . -1) (undo-tree-id2627 . -1) (undo-tree-id2628 . -1) (undo-tree-id2629 . -1) (undo-tree-id2630 . -1) (undo-tree-id2631 . -1) (undo-tree-id2632 . -1) (undo-tree-id2633 . -1) (undo-tree-id2634 . -1) (undo-tree-id2635 . -1) (undo-tree-id2636 . -1) (undo-tree-id2637 . -1) (undo-tree-id2638 . -1) (undo-tree-id2639 . -1) (undo-tree-id2640 . -1) (undo-tree-id2641 . -1) (undo-tree-id2642 . -1) (undo-tree-id2643 . -1) (undo-tree-id2644 . -1) (undo-tree-id2645 . -1) (undo-tree-id2646 . -1) (undo-tree-id2647 . -1) (undo-tree-id2648 . -1) (undo-tree-id2649 . -1) (undo-tree-id2650 . -1) (undo-tree-id2651 . -1) (undo-tree-id2652 . -1) (undo-tree-id2653 . -1) (undo-tree-id2654 . -1) (undo-tree-id2655 . -1) (undo-tree-id2656 . -1) (undo-tree-id2657 . -1) (undo-tree-id2658 . -1) (undo-tree-id2659 . -1) (undo-tree-id2660 . -1) (undo-tree-id2661 . -1) (undo-tree-id2662 . -1) (undo-tree-id2663 . -1) (undo-tree-id2664 . -1) (undo-tree-id2665 . -1) (undo-tree-id2666 . -1) 4334) nil (26373 20865 28078 705000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t match-data (0 10 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10))) . 4332) (undo-tree-id2460 . -1) (undo-tree-id2461 . -1) (undo-tree-id2462 . -1) (undo-tree-id2463 . -1) (undo-tree-id2464 . -1) (undo-tree-id2465 . -1) (undo-tree-id2466 . -1) (undo-tree-id2467 . -1) (undo-tree-id2468 . -1) (undo-tree-id2469 . -1) (undo-tree-id2470 . -1) (undo-tree-id2471 . -1) (undo-tree-id2472 . -1) (undo-tree-id2473 . -1) (undo-tree-id2474 . -1) (undo-tree-id2475 . -1) (undo-tree-id2476 . -1) (undo-tree-id2477 . -1) (undo-tree-id2478 . -1) (undo-tree-id2479 . -1) (undo-tree-id2480 . -1) (undo-tree-id2481 . -1) (undo-tree-id2482 . -1) (undo-tree-id2483 . -1) (undo-tree-id2484 . -1) (undo-tree-id2485 . -1) (undo-tree-id2486 . -1) (undo-tree-id2487 . -1) (undo-tree-id2488 . -1) (undo-tree-id2489 . -1) (undo-tree-id2490 . -1) (undo-tree-id2491 . -1) (undo-tree-id2492 . -1) (undo-tree-id2493 . -1) (undo-tree-id2494 . -1) (undo-tree-id2495 . -1) (undo-tree-id2496 . -1) (undo-tree-id2497 . -1) (undo-tree-id2498 . -1) (undo-tree-id2499 . -1) (undo-tree-id2500 . -1) (undo-tree-id2501 . -1) (undo-tree-id2502 . -1) (undo-tree-id2503 . -1) (undo-tree-id2504 . -1) (undo-tree-id2505 . -1) (undo-tree-id2506 . -1) (undo-tree-id2507 . -1) (undo-tree-id2508 . -1) (undo-tree-id2509 . -1) (undo-tree-id2510 . -1) (undo-tree-id2511 . -1) (undo-tree-id2512 . -1) (undo-tree-id2513 . -1) (undo-tree-id2514 . -1) (undo-tree-id2515 . -1) (undo-tree-id2516 . -1) (undo-tree-id2517 . -1) (undo-tree-id2518 . -1) (undo-tree-id2519 . -1) (undo-tree-id2520 . -1) (undo-tree-id2521 . -1) (undo-tree-id2522 . -1) (undo-tree-id2523 . -1) (undo-tree-id2524 . -1) (undo-tree-id2525 . -1) (undo-tree-id2526 . -1) (undo-tree-id2527 . -1) (undo-tree-id2528 . -1) (undo-tree-id2529 . -1) (undo-tree-id2530 . -1) (undo-tree-id2531 . -1) (undo-tree-id2532 . -1) (undo-tree-id2533 . -1) (undo-tree-id2534 . -1) (undo-tree-id2535 . -1) (undo-tree-id2536 . -1) (undo-tree-id2537 . -1) (undo-tree-id2538 . -1) (undo-tree-id2539 . -1) (undo-tree-id2540 . -1) (undo-tree-id2541 . -1) (undo-tree-id2542 . -1) (undo-tree-id2543 . -1) (undo-tree-id2544 . -1) (undo-tree-id2545 . -1) (undo-tree-id2546 . -1) (undo-tree-id2547 . -1) (undo-tree-id2548 . -1) (undo-tree-id2549 . -1) (undo-tree-id2550 . -1) (undo-tree-id2551 . -1) (undo-tree-id2552 . -1) (undo-tree-id2553 . -1) (undo-tree-id2554 . -1) (undo-tree-id2555 . -1) (undo-tree-id2556 . -1) (undo-tree-id2557 . -1) (undo-tree-id2558 . -1) (undo-tree-id2559 . -1) (undo-tree-id2560 . -1) (undo-tree-id2561 . -1) (undo-tree-id2562 . -1) (undo-tree-id2563 . -1) (undo-tree-id2564 . -1) (undo-tree-id2565 . -1) (undo-tree-id2566 . -1) (undo-tree-id2567 . -1) (undo-tree-id2568 . -1) (undo-tree-id2569 . -1) (undo-tree-id2570 . -1) (undo-tree-id2571 . -1) (undo-tree-id2572 . -1) (undo-tree-id2573 . -1) (undo-tree-id2574 . -1) (undo-tree-id2575 . -1) (undo-tree-id2576 . -1) (undo-tree-id2577 . -1) (undo-tree-id2578 . -1) (undo-tree-id2579 . -1) (undo-tree-id2580 . -1) (undo-tree-id2581 . -1) (undo-tree-id2582 . -1) (undo-tree-id2583 . -1) (undo-tree-id2584 . -1) (undo-tree-id2585 . -1) 4333) nil (26373 20865 28047 726000) 0 nil])
([nil nil ((#("," 0 1 (fontified t match-data (0 10 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10))) . -4331) (undo-tree-id2326 . -1) (undo-tree-id2327 . -1) (undo-tree-id2328 . -1) (undo-tree-id2329 . -1) (undo-tree-id2330 . -1) (undo-tree-id2331 . -1) (undo-tree-id2332 . -1) (undo-tree-id2333 . -1) (undo-tree-id2334 . -1) (undo-tree-id2335 . -1) (undo-tree-id2336 . -1) (undo-tree-id2337 . -1) (undo-tree-id2338 . -1) (undo-tree-id2339 . -1) (undo-tree-id2340 . -1) (undo-tree-id2341 . -1) (undo-tree-id2342 . -1) (undo-tree-id2343 . -1) (undo-tree-id2344 . -1) (undo-tree-id2345 . -1) (undo-tree-id2346 . -1) (undo-tree-id2347 . -1) (undo-tree-id2348 . -1) (undo-tree-id2349 . -1) (undo-tree-id2350 . -1) (undo-tree-id2351 . -1) (undo-tree-id2352 . -1) (undo-tree-id2353 . -1) (undo-tree-id2354 . -1) (undo-tree-id2355 . -1) (undo-tree-id2356 . -1) (undo-tree-id2357 . -1) (undo-tree-id2358 . -1) (undo-tree-id2359 . -1) (undo-tree-id2360 . -1) (undo-tree-id2361 . -1) (undo-tree-id2362 . -1) (undo-tree-id2363 . -1) (undo-tree-id2364 . -1) (undo-tree-id2365 . -1) (undo-tree-id2366 . -1) (undo-tree-id2367 . -1) (undo-tree-id2368 . -1) (undo-tree-id2369 . -1) (undo-tree-id2370 . -1) (undo-tree-id2371 . -1) (undo-tree-id2372 . -1) (undo-tree-id2373 . -1) (undo-tree-id2374 . -1) (undo-tree-id2375 . -1) (undo-tree-id2376 . -1) (undo-tree-id2377 . -1) (undo-tree-id2378 . -1) (undo-tree-id2379 . -1) (undo-tree-id2380 . -1) (undo-tree-id2381 . -1) (undo-tree-id2382 . -1) (undo-tree-id2383 . -1) (undo-tree-id2384 . -1) (undo-tree-id2385 . -1) (undo-tree-id2386 . -1) (undo-tree-id2387 . -1) (undo-tree-id2388 . -1) (undo-tree-id2389 . -1) (undo-tree-id2390 . -1) (undo-tree-id2391 . -1) (undo-tree-id2392 . -1) (undo-tree-id2393 . -1) (undo-tree-id2394 . -1) (undo-tree-id2395 . -1) (undo-tree-id2396 . -1) (undo-tree-id2397 . -1) (undo-tree-id2398 . -1) (undo-tree-id2399 . -1) (undo-tree-id2400 . -1) (undo-tree-id2401 . -1) (undo-tree-id2402 . -1) (undo-tree-id2403 . -1) (undo-tree-id2404 . -1) (undo-tree-id2405 . -1) (undo-tree-id2406 . -1) (undo-tree-id2407 . -1) (undo-tree-id2408 . -1) (undo-tree-id2409 . -1) (undo-tree-id2410 . -1) (undo-tree-id2411 . -1) (undo-tree-id2412 . -1) (undo-tree-id2413 . -1) (undo-tree-id2414 . -1) (undo-tree-id2415 . -1) (undo-tree-id2416 . -1) (undo-tree-id2417 . -1) (undo-tree-id2418 . -1) (undo-tree-id2419 . -1) (undo-tree-id2420 . -1) (undo-tree-id2421 . -1) (undo-tree-id2422 . -1) (undo-tree-id2423 . -1) (undo-tree-id2424 . -1) (undo-tree-id2425 . -1) (undo-tree-id2426 . -1) (undo-tree-id2427 . -1) (undo-tree-id2428 . -1) (undo-tree-id2429 . -1) (undo-tree-id2430 . -1) (undo-tree-id2431 . -1) (undo-tree-id2432 . -1) (undo-tree-id2433 . -1) (undo-tree-id2434 . -1) (undo-tree-id2435 . -1) (undo-tree-id2436 . -1) (undo-tree-id2437 . -1) (undo-tree-id2438 . -1) (undo-tree-id2439 . -1) (undo-tree-id2440 . -1) (undo-tree-id2441 . -1) (undo-tree-id2442 . -1) (undo-tree-id2443 . -1) (undo-tree-id2444 . -1) (undo-tree-id2445 . -1) (undo-tree-id2446 . -1) (undo-tree-id2447 . -1) (undo-tree-id2448 . -1) (undo-tree-id2449 . -1) (undo-tree-id2450 . -1) (undo-tree-id2451 . -1) (undo-tree-id2452 . -1) (undo-tree-id2453 . -1) (undo-tree-id2454 . -1) (undo-tree-id2455 . -1) (undo-tree-id2456 . -1) (undo-tree-id2457 . -1) (undo-tree-id2458 . -1) (undo-tree-id2459 . -1) 4332) nil (26373 20865 27848 740000) 0 nil])
([nil nil ((#("+" 0 1 (fontified t)) . -1476) (undo-tree-id2682 . -1) (undo-tree-id2683 . -1) (#("=" 0 1 (face font-lock-operator-face fontified t)) . -1477) (undo-tree-id2684 . -1) (undo-tree-id2685 . -1) (#(" " 0 1 (fontified nil)) . 1478) (1478 . 1479) (#(" " 0 1 (fontified t)) . 1478) (undo-tree-id2686 . -1) 1479 (t 26373 20865 37957 966000)) nil (26373 20966 103644 330000) 0 nil])
([nil nil ((#(" " 0 1 (fontified nil)) . 1475) (1475 . 1476) (#(" " 0 1 (fontified t)) . 1475) (undo-tree-id2680 . -1) (undo-tree-id2681 . -1) 1476) nil (26373 20966 103639 260000) 0 nil])
([nil nil ((1475 . 1483)) nil (26373 20966 103629 351000) 0 nil])
([nil nil ((1501 . 1502)) nil (26373 20966 103625 204000) 0 nil])
([nil nil ((#("0" 0 1 (face py-number-face fontified t)) . -856) (undo-tree-id2687 . -1) (undo-tree-id2688 . -1) (undo-tree-id2689 . -1) (undo-tree-id2690 . -1) (undo-tree-id2691 . -1) (undo-tree-id2692 . -1) (undo-tree-id2693 . -1) (undo-tree-id2694 . -1) (undo-tree-id2695 . -1) (undo-tree-id2696 . -1) (undo-tree-id2697 . -1) (undo-tree-id2698 . -1) (undo-tree-id2699 . -1) (undo-tree-id2700 . -1) (undo-tree-id2701 . -1) (undo-tree-id2702 . -1) (undo-tree-id2703 . -1) (undo-tree-id2704 . -1) (undo-tree-id2705 . -1) (undo-tree-id2706 . -1) (undo-tree-id2707 . -1) (undo-tree-id2708 . -1) (undo-tree-id2709 . -1) (undo-tree-id2710 . -1) (undo-tree-id2711 . -1) (undo-tree-id2712 . -1) (undo-tree-id2713 . -1) (undo-tree-id2714 . -1) (undo-tree-id2715 . -1) (undo-tree-id2716 . -1) (undo-tree-id2717 . -1) (undo-tree-id2718 . -1) (undo-tree-id2719 . -1) (undo-tree-id2720 . -1) (undo-tree-id2721 . -1) (undo-tree-id2722 . -1) (undo-tree-id2723 . -1) (undo-tree-id2724 . -1) (undo-tree-id2725 . -1) (undo-tree-id2726 . -1) (undo-tree-id2727 . -1) (undo-tree-id2728 . -1) (undo-tree-id2729 . -1) (undo-tree-id2730 . -1) (undo-tree-id2731 . -1) (undo-tree-id2732 . -1) (undo-tree-id2733 . -1) 857 (t 26373 20966 114418 471000)) nil (26373 20974 713835 513000) 0 nil])
([nil nil ((856 . 858)) nil (26373 20974 713799 996000) 0 nil])
([nil nil ((1646 . 1654) (t 26373 20974 723539 281000)) nil (26373 20991 788797 550000) 0 nil])
([nil nil ((#("n" 0 1 (face font-lock-string-face fontified t)) . -1652) (undo-tree-id2738 . -1) (undo-tree-id2739 . -1) (undo-tree-id2740 . -1) (#("m" 0 1 (face font-lock-string-face fontified t)) . -1653) (undo-tree-id2741 . -1) (undo-tree-id2742 . -1) (undo-tree-id2743 . -1) (undo-tree-id2744 . -1) 1654) nil (26373 20991 788796 588000) 0 nil])
([nil nil ((1652 . 1663)) nil (26373 20991 788792 390000) 0 nil])
([nil nil ((1654 . 1671) (#("total" 0 5 (fontified nil)) . -1654) (1654 . 1659) (#("total_state_value" 0 17 (fontified nil)) . -1654) (1654 . 1671) (#("total_sta" 0 9 (face font-lock-string-face fontified t)) . -1654) (undo-tree-id2734 . -9) (undo-tree-id2735 . -9) (undo-tree-id2736 . -9) (undo-tree-id2737 . -9) 1663) nil (26373 20991 788790 697000) 0 nil])
([nil nil ((1671 . 1673)) nil (26373 20991 788775 167000) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-string-face fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9))) . -1672) (undo-tree-id2745 . -1) (undo-tree-id2746 . -1) (undo-tree-id2747 . -1) (undo-tree-id2748 . -1) (undo-tree-id2749 . -1) (undo-tree-id2750 . -1) (undo-tree-id2751 . -1) (undo-tree-id2752 . -1) (undo-tree-id2753 . -1) (undo-tree-id2754 . -1) (undo-tree-id2755 . -1) (undo-tree-id2756 . -1) (undo-tree-id2757 . -1) (undo-tree-id2758 . -1) (undo-tree-id2759 . -1) (undo-tree-id2760 . -1) (undo-tree-id2761 . -1) (undo-tree-id2762 . -1) (undo-tree-id2763 . -1) (undo-tree-id2764 . -1) (undo-tree-id2765 . -1) (undo-tree-id2766 . -1) (undo-tree-id2767 . -1) (undo-tree-id2768 . -1) (undo-tree-id2769 . -1) (undo-tree-id2770 . -1) (undo-tree-id2771 . -1) (undo-tree-id2772 . -1) (undo-tree-id2773 . -1) (undo-tree-id2774 . -1) (undo-tree-id2775 . -1) (undo-tree-id2776 . -1) (undo-tree-id2777 . -1) (undo-tree-id2778 . -1) (undo-tree-id2779 . -1) (undo-tree-id2780 . -1) (undo-tree-id2781 . -1) (undo-tree-id2782 . -1) (undo-tree-id2783 . -1) (undo-tree-id2784 . -1) (undo-tree-id2785 . -1) (undo-tree-id2786 . -1) (undo-tree-id2787 . -1) (undo-tree-id2788 . -1) (undo-tree-id2789 . -1) (undo-tree-id2790 . -1) (undo-tree-id2791 . -1) (undo-tree-id2792 . -1) (undo-tree-id2793 . -1) (undo-tree-id2794 . -1) (undo-tree-id2795 . -1) (undo-tree-id2796 . -1) (undo-tree-id2797 . -1) (undo-tree-id2798 . -1) (undo-tree-id2799 . -1) (undo-tree-id2800 . -1) (undo-tree-id2801 . -1) 1673 (t 26373 20991 798777 359000)) nil (26373 20994 603868 64000) 0 nil])
([nil nil ((1672 . 1673)) nil (26373 20994 603828 29000) 0 nil])
([nil nil ((1542 . 1546) (t 26373 20994 613816 419000)) nil (26373 21009 667775 103000) 0 nil])
([nil nil ((1563 . 1564)) nil (26373 21009 667769 633000) 0 nil])
([nil nil ((apply -18 2159 2628 undo--wrap-and-run-primitive-undo 2159 2628 ((2588 . 2590) (2554 . 2556) (2486 . 2488) (2433 . 2435) (2386 . 2388) (2352 . 2354) (2284 . 2286) (2231 . 2233) (2167 . 2169)))) nil (26373 21076 620200 981000) 0 nil])
([nil nil ((2160 . 2168) (#("        " 0 8 (fontified nil)) . 2159) (undo-tree-id2803 . -8) (2158 . 2168) (t 26373 21076 630932 65000)) nil (26373 21091 740111 390000) 0 nil])
([nil nil ((2168 . 2170)) nil (26373 21091 740110 288000) 0 nil])
([nil nil ((2170 . 2191)) nil (26373 21091 740109 868000) 0 nil])
([nil nil ((2191 . 2198)) nil (26373 21091 740109 597000) 0 nil])
([nil nil ((2198 . 2213)) nil (26373 21091 740109 316000) 0 nil])
([nil nil ((#("d" 0 1 (face font-lock-comment-face fontified t)) . -2212) (undo-tree-id2802 . -1) 2213) nil (26373 21091 740108 705000) 0 nil])
([nil nil ((2212 . 2233)) nil (26373 21091 740100 760000) 0 nil])
([nil nil ((2233 . 2236)) nil (26373 21091 740096 693000) 0 nil])
([nil nil ((#("                    if N[0] >= self.Grid.DIMENSION or N[1] >= self.Grid.DIMENSION:
                        raise ValueError(f\"[ERROR] State {N} is out of bounds\")" 0 20 (fontified t) 20 22 (face font-lock-keyword-face fontified t) 22 24 (fontified t) 24 25 (face (rainbow-delimiters-depth-1-face) fontified t) 25 26 (face py-number-face fontified t) 26 27 (face (rainbow-delimiters-depth-1-face) fontified t) 27 31 (fontified t) 31 35 (face py-object-reference-face fontified t) 35 36 (fontified t) 36 41 (fontified t match-data (0 1 0 1)) 41 51 (fontified t match-data (0 1 0 1)) 51 53 (face font-lock-keyword-face fontified t match-data (0 1 0 1)) 53 55 (fontified t match-data (0 1 0 1)) 55 56 (face (rainbow-delimiters-depth-1-face) fontified t match-data (0 1 0 1)) 56 57 (face py-number-face fontified t match-data (0 1 0 1)) 57 58 (face (rainbow-delimiters-depth-1-face) fontified t match-data (0 1 0 1)) 58 62 (fontified t match-data (0 1 0 1)) 62 66 (face py-object-reference-face fontified t match-data (0 1 0 1)) 66 67 (fontified t match-data (0 1 0 1)) 67 72 (fontified t match-data (0 0)) 72 83 (fontified t match-data (0 1 0 1)) 83 107 (fontified t match-data (0 1 0 1)) 107 112 (face font-lock-keyword-face fontified t match-data (0 1 0 1)) 112 113 (fontified t match-data (0 1 0 1)) 113 123 (face py-exception-name-face fontified t match-data (0 3 0 1 1 2 2 3)) 123 124 (face (rainbow-delimiters-depth-1-face) fontified t match-data (0 3 0 1 1 2 2 3)) 124 125 (fontified t match-data (0 3 0 1 1 2 2 3)) 125 161 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3)) 161 162 (face (rainbow-delimiters-depth-1-face) fontified t match-data (0 3 0 1 1 2 2 3))) . 1187) (undo-tree-id2867 . -162) (t 26373 21091 750133 320000)) nil (26373 21134 635518 441000) 0 nil])
([nil nil ((1187 . 1188) (1187 . 1188)) nil (26373 21134 635517 519000) 0 nil])
([nil nil ((1188 . 1208)) nil (26373 21134 635517 279000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1633 . 1634) (nil fontified nil 1633 . 1634) (nil fontified nil 1632 . 1633) (nil fontified nil 1630 . 1632) (nil fontified nil 1629 . 1630) (nil fontified nil 1628 . 1629) (nil fontified nil 1627 . 1628) (nil fontified nil 1626 . 1627) (nil fontified nil 1625 . 1626) (nil fontified nil 1624 . 1625) (nil fontified nil 1623 . 1624) (nil fontified nil 1599 . 1623) (nil fontified nil 1597 . 1599) (nil fontified nil 1596 . 1597) (nil fontified nil 1593 . 1596) (nil fontified nil 1592 . 1593) (nil fontified nil 1591 . 1592) (nil fontified nil 1590 . 1591) (nil fontified nil 1588 . 1590) (nil fontified nil 1586 . 1588) (nil fontified nil 1566 . 1586) (nil fontified nil 1565 . 1566) (nil fontified nil 1564 . 1565) (nil fontified nil 1563 . 1564) (nil fontified nil 1548 . 1563) (nil fontified nil 1547 . 1548) (nil fontified nil 1543 . 1547) (nil fontified nil 1541 . 1543) (nil fontified nil 1540 . 1541) (nil fontified nil 1539 . 1540) (nil fontified nil 1538 . 1539) (nil fontified nil 1537 . 1538) (nil fontified nil 1536 . 1537) (nil fontified nil 1535 . 1536) (nil fontified nil 1534 . 1535) (nil fontified nil 1510 . 1534) (nil fontified nil 1499 . 1510) (nil fontified nil 1493 . 1499) (nil fontified nil 1489 . 1493) (nil fontified nil 1485 . 1489) (nil fontified nil 1484 . 1485) (nil fontified nil 1483 . 1484) (nil fontified nil 1482 . 1483) (nil fontified nil 1480 . 1482) (nil fontified nil 1478 . 1480) (nil fontified nil 1458 . 1478) (nil fontified nil 1457 . 1458) (nil fontified nil 1456 . 1457) (nil fontified nil 1455 . 1456) (nil fontified nil 1454 . 1455) (nil fontified nil 1453 . 1454) (nil fontified nil 1451 . 1453) (nil fontified nil 1450 . 1451) (nil fontified nil 1449 . 1450) (nil fontified nil 1448 . 1449) (nil fontified nil 1447 . 1448) (nil fontified nil 1423 . 1447) (nil fontified nil 1421 . 1423) (nil fontified nil 1420 . 1421) (nil fontified nil 1417 . 1420) (nil fontified nil 1416 . 1417) (nil fontified nil 1415 . 1416) (nil fontified nil 1414 . 1415) (nil fontified nil 1412 . 1414) (nil fontified nil 1410 . 1412) (nil fontified nil 1390 . 1410) (nil fontified nil 1389 . 1390) (nil fontified nil 1388 . 1389) (nil fontified nil 1387 . 1388) (nil fontified nil 1386 . 1387) (nil fontified nil 1385 . 1386) (nil fontified nil 1382 . 1385) (nil fontified nil 1381 . 1382) (nil fontified nil 1365 . 1381) (nil fontified nil 1361 . 1365) (nil fontified nil 1360 . 1361) (nil fontified nil 1359 . 1360) (nil fontified nil 1358 . 1359) (nil fontified nil 1334 . 1358) (nil fontified nil 1317 . 1334) (nil fontified nil 1313 . 1317) (nil fontified nil 1309 . 1313) (nil fontified nil 1308 . 1309) (nil fontified nil 1307 . 1308) (nil fontified nil 1306 . 1307) (nil fontified nil 1304 . 1306) (nil fontified nil 1302 . 1304) (nil fontified nil 1282 . 1302) (nil fontified nil 1281 . 1282) (nil fontified nil 1228 . 1281) (nil fontified nil 1208 . 1228) (1208 . 1634)) nil (26373 21134 635515 936000) 0 nil])
([nil nil ((1188 . 1208) (#("                                        " 0 20 (fontified t) 20 40 (fontified t)) . 1188) (undo-tree-id2804 . -20) (undo-tree-id2805 . -20) (undo-tree-id2806 . -20) (undo-tree-id2807 . -20) (undo-tree-id2808 . -20) (undo-tree-id2809 . -20) (undo-tree-id2810 . -20) (undo-tree-id2811 . -20) (undo-tree-id2812 . -20) (undo-tree-id2813 . -20) (undo-tree-id2814 . -20) (undo-tree-id2815 . -20) (undo-tree-id2816 . -20) (undo-tree-id2817 . -20) (undo-tree-id2818 . -20) (undo-tree-id2819 . -20) (undo-tree-id2820 . -20) (undo-tree-id2821 . -20) (undo-tree-id2822 . -20) (undo-tree-id2823 . -20) (undo-tree-id2824 . -20) (undo-tree-id2825 . -20) (undo-tree-id2826 . -20) (undo-tree-id2827 . -20) (undo-tree-id2828 . -20) (undo-tree-id2829 . -20) (undo-tree-id2830 . -20) (undo-tree-id2831 . -20) (undo-tree-id2832 . -20) (undo-tree-id2833 . -20) (undo-tree-id2834 . -20) (undo-tree-id2835 . -20) (undo-tree-id2836 . -20) (undo-tree-id2837 . -20) (undo-tree-id2838 . -20) (undo-tree-id2839 . -20) (undo-tree-id2840 . -20) (undo-tree-id2841 . -20) (undo-tree-id2842 . -20) (undo-tree-id2843 . -20) (undo-tree-id2844 . -20) (undo-tree-id2845 . -20) (undo-tree-id2846 . -20) (undo-tree-id2847 . -20) (undo-tree-id2848 . -20) (undo-tree-id2849 . -20) (undo-tree-id2850 . -20) (undo-tree-id2851 . -20) (undo-tree-id2852 . -20) (undo-tree-id2853 . -35) (undo-tree-id2854 . -35) (undo-tree-id2855 . -35) (undo-tree-id2856 . -35) (undo-tree-id2857 . -35) (undo-tree-id2858 . -35) (undo-tree-id2859 . -35) (undo-tree-id2860 . -35) (undo-tree-id2861 . -35) (undo-tree-id2862 . -35) (undo-tree-id2863 . -35) (undo-tree-id2864 . -35) (undo-tree-id2865 . -35) (undo-tree-id2866 . -35) 1223) nil (26373 21134 635507 861000) 0 nil])
([nil nil ((4702 . 4703) (t 26373 21134 645697 442000)) nil (26373 21174 212935 549000) 0 nil])
([nil nil ((4703 . 4704)) nil (26373 21174 212935 98000) 0 nil])
([nil nil ((#("#" 0 1 (face font-lock-comment-face fontified t)) . -4662) (undo-tree-id2869 . -1) (#(" " 0 1 (fontified nil)) . 4663) (4663 . 4664) (#(" " 0 1 (face font-lock-comment-face fontified t)) . 4663) (undo-tree-id2870 . -1) 4664) nil (26373 21174 212934 146000) 0 nil])
([nil nil ((#("3" 0 1 (face py-number-face fontified t)) . -4621) (undo-tree-id2868 . -1) 4622) nil (26373 21174 212932 122000) 0 nil])
([nil nil ((4621 . 4622)) nil (26373 21174 212920 350000) 0 nil])
([nil nil ((#("1" 0 1 (face py-number-face fontified t)) . -4621) (undo-tree-id2871 . -1) (undo-tree-id2872 . -1) (undo-tree-id2873 . -1) (undo-tree-id2874 . -1) (undo-tree-id2875 . -1) (undo-tree-id2876 . -1) (undo-tree-id2877 . -1) (undo-tree-id2878 . -1) (undo-tree-id2879 . -1) (undo-tree-id2880 . -1) (undo-tree-id2881 . -1) (undo-tree-id2882 . -1) (undo-tree-id2883 . -1) (undo-tree-id2884 . -1) (undo-tree-id2885 . -1) (undo-tree-id2886 . -1) (undo-tree-id2887 . -1) (undo-tree-id2888 . -1) (undo-tree-id2889 . -1) (undo-tree-id2890 . -1) (undo-tree-id2891 . -1) (undo-tree-id2892 . -1) (undo-tree-id2893 . -1) (undo-tree-id2894 . -1) 4622 (t 26373 21174 223209 537000)) nil (26373 21175 569927 69000) 0 nil])
([nil nil ((4621 . 4622)) nil (26373 21175 569901 450000) 0 nil])
([nil nil ((#("        ## This is commented out, since it interferes with 'bounce' rewards.
        # # Agent will remain in the same state if it 'bounces'
        # if new_position[0] >= self.Grid.DIMENSION:
        #     new_position=(self.Grid.DIMENSION-1, new_position[1])
        # if new_position[0] < 0:
        #     new_position=(0,new_position[1])
        # if new_position[1] >= self.Grid.DIMENSION:
        #     new_position=(new_position[0], self.Grid.DIMENSION-1)
        # if new_position[1] < 0:
        #     new_position=(new_position[0], 0)" 0 8 (fontified t) 8 76 (face font-lock-comment-face fontified t) 76 77 (face font-lock-comment-face fontified t) 77 85 (fontified t) 85 87 (face font-lock-comment-face fontified t) 87 140 (face font-lock-comment-face fontified t) 140 141 (face font-lock-comment-face fontified t) 141 149 (fontified t) 149 151 (face font-lock-comment-face fontified t) 151 153 (face font-lock-comment-face fontified t) 153 154 (face font-lock-comment-face fontified t) 154 166 (face font-lock-comment-face fontified t match-data (0 12 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10 11 11 12)) 166 167 (face font-lock-comment-face fontified t) 167 168 (face font-lock-comment-face fontified t) 168 169 (face font-lock-comment-face fontified t) 169 173 (face font-lock-comment-face fontified t) 173 177 (face font-lock-comment-face fontified t) 177 194 (face font-lock-comment-face fontified t) 194 202 (fontified t) 202 204 (face font-lock-comment-face fontified t) 204 208 (face font-lock-comment-face fontified t) 208 220 (face font-lock-comment-face fontified t match-data (0 4 0 1 1 2 2 3 3 4)) 220 221 (face font-lock-comment-face fontified t) 221 222 (face font-lock-comment-face fontified t) 222 226 (face font-lock-comment-face fontified t) 226 242 (face font-lock-comment-face fontified t) 242 243 (face font-lock-comment-face fontified t) 243 245 (face font-lock-comment-face fontified t) 245 257 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 257 258 (face font-lock-comment-face fontified t) 258 259 (face font-lock-comment-face fontified t) 259 260 (face font-lock-comment-face fontified t) 260 261 (face font-lock-comment-face fontified t) 261 262 (face font-lock-comment-face fontified t) 262 270 (fontified t) 270 272 (face font-lock-comment-face fontified t) 272 274 (face font-lock-comment-face fontified t) 274 275 (face font-lock-comment-face fontified t) 275 287 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 287 288 (face font-lock-comment-face fontified t) 288 289 (face font-lock-comment-face fontified t) 289 290 (face font-lock-comment-face fontified t) 290 293 (face font-lock-comment-face fontified t) 293 294 (face font-lock-comment-face fontified t) 294 296 (face font-lock-comment-face fontified t) 296 304 (fontified t) 304 306 (face font-lock-comment-face fontified t) 306 310 (face font-lock-comment-face fontified t) 310 319 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 319 322 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 322 323 (face font-lock-comment-face fontified t) 323 324 (face font-lock-comment-face fontified t) 324 325 (face font-lock-comment-face fontified t) 325 326 (face font-lock-comment-face fontified t) 326 336 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 336 338 (fontified t face font-lock-comment-face match-data (0 3 0 1 1 2 2 3)) 338 339 (fontified t face font-lock-comment-face) 339 340 (fontified t face font-lock-comment-face) 340 341 (fontified t face font-lock-comment-face) 341 342 (fontified t face font-lock-comment-face) 342 343 (fontified t face font-lock-comment-face) 343 351 (fontified t) 351 353 (face font-lock-comment-face fontified t) 353 355 (face font-lock-comment-face fontified t) 355 356 (face font-lock-comment-face fontified t) 356 368 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 368 369 (face font-lock-comment-face fontified t) 369 370 (face font-lock-comment-face fontified t) 370 371 (face font-lock-comment-face fontified t) 371 375 (face font-lock-comment-face fontified t) 375 379 (face font-lock-comment-face fontified t) 379 385 (face font-lock-comment-face fontified t) 385 396 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 396 404 (fontified t match-data (0 3 0 1 1 2 2 3)) 404 406 (face font-lock-comment-face fontified t) 406 410 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 410 422 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 422 423 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 423 424 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 424 436 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 436 437 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 437 438 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 438 439 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 439 441 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 441 445 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 445 446 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 446 461 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 461 462 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 462 463 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 463 464 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 464 472 (fontified t match-data (0 3 0 1 1 2 2 3)) 472 474 (face font-lock-comment-face fontified t) 474 476 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 476 477 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 477 489 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 489 490 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 490 491 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 491 492 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 492 495 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 495 496 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 496 498 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 498 506 (fontified t match-data (0 3 0 1 1 2 2 3)) 506 508 (face font-lock-comment-face fontified t) 508 512 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 512 524 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 524 525 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 525 526 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 526 538 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 538 539 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 539 540 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 540 541 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 541 543 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 543 544 (face font-lock-comment-face fontified t match-data (0 3 0 1 1 2 2 3)) 544 545 (face font-lock-comment-face fontified t rear-nonsticky t match-data (0 3 0 1 1 2 2 3))) . 2426) (undo-tree-id2918 . -545) (undo-tree-id2919 . -77) (undo-tree-id2920 . -75) (undo-tree-id2921 . -77) (undo-tree-id2922 . -545) (t 26373 21175 580226 964000)) nil (26373 21221 471957 281000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -2424) (undo-tree-id2906 . -1) (undo-tree-id2907 . -1) (undo-tree-id2908 . -1) (undo-tree-id2909 . -1) (undo-tree-id2910 . -1) (undo-tree-id2911 . -1) (#("
" 0 1 (fontified t)) . -2425) (undo-tree-id2912 . -1) (undo-tree-id2913 . -1) (undo-tree-id2914 . -1) (undo-tree-id2915 . -1) (undo-tree-id2916 . -1) (undo-tree-id2917 . -1) 2426) nil (26373 21221 471954 796000) 0 nil])
([nil nil ((#("#" 0 1 (face font-lock-comment-face fontified t)) . -1999) (undo-tree-id2902 . -1) (undo-tree-id2903 . -1) (#(" " 0 1 (fontified nil)) . 2000) (2000 . 2001) (#(" " 0 1 (face font-lock-comment-face fontified t)) . 2000) (undo-tree-id2904 . -1) (undo-tree-id2905 . -1) 2001) nil (26373 21221 471949 917000) 0 nil])
([nil nil ((1990 . 1999)) nil (26373 21221 471947 733000) 0 nil])
([nil nil ((1999 . 2000)) nil (26373 21221 471947 462000) 0 nil])
([nil nil ((2000 . 2012)) nil (26373 21221 471947 162000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-comment-face fontified t)) . -2008) (undo-tree-id2897 . -1) (undo-tree-id2898 . -1) (#("l" 0 1 (face font-lock-comment-face fontified t)) . -2009) (undo-tree-id2899 . -1) (#("u" 0 1 (face font-lock-comment-face fontified t)) . -2010) (undo-tree-id2900 . -1) (#("e" 0 1 (face font-lock-comment-face fontified t)) . -2011) (undo-tree-id2901 . -1) 2012) nil (26373 21221 471946 510000) 0 nil])
([nil nil ((2008 . 2022)) nil (26373 21221 471943 164000) 0 nil])
([nil nil ((#("o" 0 1 (face font-lock-comment-face fontified t)) . -2021) (undo-tree-id2895 . -1) (undo-tree-id2896 . -1) 2022) nil (26373 21221 471942 673000) 0 nil])
([nil nil ((2021 . 2042)) nil (26373 21221 471933 696000) 0 nil])
([nil nil ((2042 . 2043)) nil (26373 21221 471933 315000) 0 nil])
([nil current ((2043 . 2045)) nil (26373 21221 471928 717000) 0 nil])
nil
