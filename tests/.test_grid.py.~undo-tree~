(undo-tree-save-format-version . 1)
"6de484568ac51703e78294251289e17b1503a134"
[nil nil nil nil (26361 49700 167138 590000) 0 nil]
([nil nil ((1 . 14) (t 26361 49650 703860 830000)) nil (26361 49700 167137 838000) 0 nil])
([nil nil ((8 . 16) (#("unit" 0 4 (fontified nil)) . -8) (8 . 12) (#("unittest" 0 8 (fontified nil)) . -8) (8 . 16) (#("unitte" 0 6 (fontified t)) . -8) (undo-tree-id47 . -6) (undo-tree-id48 . -6) (undo-tree-id49 . -6) (undo-tree-id50 . -6) 14) nil (26361 49700 167136 806000) 0 nil])
([nil nil ((16 . 24)) nil (26361 49700 167134 402000) 0 nil])
([nil nil ((24 . 25)) nil (26361 49700 167134 141000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -20) (undo-tree-id42 . -1) (#("e" 0 1 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -21) (undo-tree-id43 . -1) (#("s" 0 1 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -22) (undo-tree-id44 . -1) (#("t" 0 1 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -23) (undo-tree-id45 . -1) (#("
" 0 1 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -24) (undo-tree-id46 . -1) 25) nil (26361 49700 167132 959000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . 19) (undo-tree-id41 . -1) 20) nil (26361 49700 167130 324000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -17) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (#("s" 0 1 (face font-lock-keyword-face fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -18) (undo-tree-id40 . -1) 19) nil (26361 49700 167129 332000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . 16) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) 17) nil (26361 49700 167127 679000) 0 nil])
([nil nil ((16 . 17)) nil (26361 49700 167126 76000) 0 nil])
([nil nil ((17 . 26)) nil (26361 49700 167125 796000) 0 nil])
([nil nil ((26 . 30) (#("Grid" 0 4 (fontified nil)) . -26) (26 . 30)) nil (26361 49700 167125 385000) 0 nil])
([nil nil ((30 . 42)) nil (26361 49700 167125 24000) 0 nil])
([nil nil ((38 . 42) (#("Gri" 0 3 (fontified nil)) . -38) (38 . 41) (#("Grid" 0 4 (fontified t match-data (0 0))) . -38) (undo-tree-id27 . -4) (undo-tree-id28 . -4) (undo-tree-id29 . -4) (undo-tree-id30 . -4) 42) nil (26361 49700 167124 503000) 0 nil])
([nil nil ((42 . 44)) nil (26361 49700 167122 980000) 0 nil])
([nil nil ((44 . 52)) nil (26361 49700 167122 710000) 0 nil])
([nil nil ((#("t" 0 1 (face py-class-name-face fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -50) (undo-tree-id25 . -1) (#("e" 0 1 (face py-class-name-face fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -51) (undo-tree-id26 . -1) 52) nil (26361 49700 167122 149000) 0 nil])
([nil nil ((50 . 58)) nil (26361 49700 167120 586000) 0 nil])
([nil nil ((58 . 63)) nil (26361 49700 167120 65000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -61) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (#("t" 0 1 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -62) (undo-tree-id24 . -1) 63) nil (26361 49700 167119 414000) 0 nil])
([nil nil ((61 . 63)) nil (26361 49700 167117 320000) 0 nil])
([nil nil ((59 . 67) (#("unit" 0 4 (fontified nil)) . -59) (59 . 63) (#("unittest" 0 8 (fontified nil)) . -59) (59 . 67) (#("unit" 0 4 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -59) (undo-tree-id16 . -4) (undo-tree-id17 . -4) (undo-tree-id18 . -4) (undo-tree-id19 . -4) 63) nil (26361 49700 167116 498000) 0 nil])
([nil nil ((67 . 72)) nil (26361 49700 167114 504000) 0 nil])
([nil nil ((68 . 76) (#("te" 0 2 (fontified nil)) . -68) (68 . 70) (#("TestCase" 0 8 (fontified nil)) . -68) (68 . 76) (#("test" 0 4 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -68) (undo-tree-id12 . -4) (undo-tree-id13 . -4) (undo-tree-id14 . -4) (undo-tree-id15 . -4) 72) nil (26361 49700 167113 262000) 0 nil])
([nil nil ((76 . 77)) nil (26361 49700 167110 677000) 0 nil])
([nil nil ((77 . 78)) nil (26361 49700 167110 336000) 0 nil])
([nil nil ((78 . 83)) nil (26361 49700 167109 615000) 0 nil])
([nil nil ((83 . 86)) nil (26361 49700 167109 104000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -83) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (#("e" 0 1 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -84) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (#("g" 0 1 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -85) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) 86) nil (26361 49700 167107 681000) 0 nil])
([nil nil ((83 . 84)) nil (26361 49700 167072 545000) 0 nil])
([nil nil ((83 . 104) (t 26361 49700 493444 435000)) nil (26361 49908 592100 715000) 0 nil])
([nil nil ((104 . 107)) nil (26361 49908 592100 54000) 0 nil])
([nil nil ((107 . 117)) nil (26361 49908 592099 323000) 0 nil])
([nil nil ((117 . 118)) nil (26361 49908 592098 681000) 0 nil])
([nil nil ((118 . 127)) nil (26361 49908 592097 920000) 0 nil])
([nil nil ((127 . 135)) nil (26361 49908 592097 359000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . 134) (undo-tree-id118 . -1) 135) nil (26361 49908 592096 46000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -131) (undo-tree-id115 . -1) (#("i" 0 1 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -132) (undo-tree-id116 . -1) (#("m" 0 1 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -133) (undo-tree-id117 . -1) 134) nil (26361 49908 592094 283000) 0 nil])
([nil nil ((131 . 147)) nil (26361 49908 592092 229000) 0 nil])
([nil nil ((#("2" 0 1 (face py-number-face fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -146) (undo-tree-id113 . -1) (undo-tree-id114 . -1) 147) nil (26361 49908 592091 528000) 0 nil])
([nil nil ((146 . 149)) nil (26361 49908 592090 746000) 0 nil])
([nil nil ((149 . 150)) nil (26361 49908 592090 526000) 0 nil])
([nil nil ((150 . 163)) nil (26361 49908 592090 225000) 0 nil])
([nil nil ((163 . 175)) nil (26361 49908 592089 945000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -173) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (#("d" 0 1 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -174) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) 175) nil (26361 49908 592089 364000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -172) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) 173) nil (26361 49908 592085 867000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -170) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (#("G" 0 1 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -171) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) 172) nil (26361 49908 592083 583000) 0 nil])
([nil nil ((170 . 179)) nil (26361 49908 591967 935000) 0 nil])
([nil nil ((179 . 192)) nil (26361 49908 591967 444000) 0 nil])
([nil nil ((192 . 213)) nil (26361 49908 591967 13000) 0 nil])
([nil nil ((213 . 219)) nil (26361 49908 591966 422000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -219) (undo-tree-id90 . -1) (undo-tree-id91 . -1) 220) nil (26361 49908 591965 821000) 0 nil])
([nil nil ((219 . 220)) nil (26361 49908 591964 157000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -219) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) 220) nil (26361 49908 591963 276000) 0 nil])
([nil nil ((219 . 220)) nil (26361 49908 591961 282000) 0 nil])
([nil nil ((214 . 223) (#("DI" 0 2 (fontified nil)) . -214) (214 . 216) (#("DIMENSION" 0 9 (fontified nil)) . -214) (214 . 223) (#("DIMENS" 0 6 (fontified t match-data (0 4 0 1 1 2 2 3 3 4))) . -214) (undo-tree-id82 . -6) (undo-tree-id83 . -6) (undo-tree-id84 . -6) (undo-tree-id85 . -6) 220) nil (26361 49908 591960 160000) 0 nil])
([nil nil ((223 . 229)) nil (26361 49908 591957 976000) 0 nil])
([nil nil ((#("(" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -228) (undo-tree-id81 . -1) 229) nil (26361 49908 591957 495000) 0 nil])
([nil nil ((228 . 229)) nil (26361 49908 591956 563000) 0 nil])
([nil nil ((229 . 242)) nil (26361 49908 591956 222000) 0 nil])
([nil nil ((242 . 252)) nil (26361 49908 591955 681000) 0 nil])
([nil nil ((247 . 253) (#("asser" 0 5 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -247) (undo-tree-id77 . -5) (undo-tree-id78 . -5) (undo-tree-id79 . -5) (undo-tree-id80 . -5) 252) nil (26361 49908 591954 890000) 0 nil])
([nil nil ((253 . 254)) nil (26361 49908 591952 726000) 0 nil])
([nil nil ((247 . 258) (#("assertE" 0 7 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5) lsp-completion-prefix "as" lsp-completion-markers (247 #<marker (moves after insertion) in no buffer>) lsp-completion-start-point 247 lsp-sort-text "09.9999.assertAlmostEqual" lsp-completion-item #s(hash-table size 6 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("label" #("assertAlmostEqual" 0 17 (match-data (0 17 0 1 1 2 2 3 3 4 4 5 5 6 12 13 13 14 14 15 15 16 16 17))) "kind" 2 "data" #s(hash-table size 4 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("uri" "file:///home/csj7701/Projects/RL-StateValue/tests/test_grid.py" "position" #s(hash-table size 2 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("line" 8 "character" 19)) "funcParensDisabled" t "symbolLabel" "assertAlmostEqual")) "sortText" "09.9999.assertAlmostEqual" "_emacsStartPoint" 247)))) . -247) (undo-tree-id73 . -7) (undo-tree-id74 . -7) (undo-tree-id75 . -7) (undo-tree-id76 . -7) 254) nil (26361 49908 591951 804000) 0 nil])
([nil nil ((258 . 269)) nil (26361 49908 591950 11000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t match-data (0 7 0 1 1 2 2 3 3 4 4 5 5 6 6 7) lsp-completion-prefix "as" lsp-completion-markers (247 #<marker (moves after insertion) in no buffer>) lsp-completion-start-point 247 lsp-sort-text "09.9999.assertEqual" lsp-completion-item #s(hash-table size 6 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("label" #("assertEqual" 0 11 (match-data (0 11 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10 11))) "kind" 2 "data" #s(hash-table size 4 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("uri" "file:///home/csj7701/Projects/RL-StateValue/tests/test_grid.py" "position" #s(hash-table size 2 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("line" 8 "character" 19)) "funcParensDisabled" t "symbolLabel" "assertEqual")) "sortText" "09.9999.assertEqual" "_emacsStartPoint" 247)))) . -267) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (#("r" 0 1 (fontified t match-data (0 7 0 1 1 2 2 3 3 4 4 5 5 6 6 7) lsp-completion-prefix "as" lsp-completion-markers (247 #<marker (moves after insertion) in no buffer>) lsp-completion-start-point 247 lsp-sort-text "09.9999.assertEqual" lsp-completion-item #s(hash-table size 6 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("label" #("assertEqual" 0 11 (match-data (0 11 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10 11))) "kind" 2 "data" #s(hash-table size 4 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("uri" "file:///home/csj7701/Projects/RL-StateValue/tests/test_grid.py" "position" #s(hash-table size 2 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("line" 8 "character" 19)) "funcParensDisabled" t "symbolLabel" "assertEqual")) "sortText" "09.9999.assertEqual" "_emacsStartPoint" 247)))) . -268) (undo-tree-id71 . -1) (undo-tree-id72 . -1) 269) nil (26361 49908 591949 129000) 0 nil])
([nil nil ((267 . 287)) nil (26361 49908 591947 145000) 0 nil])
([nil nil ((287 . 289)) nil (26361 49908 591946 735000) 0 nil])
([nil nil ((289 . 302)) nil (26361 49908 591946 314000) 0 nil])
([nil nil ((302 . 316)) nil (26361 49908 591945 773000) 0 nil])
([nil nil ((307 . 318) (#("assertEqu" 0 9 (fontified t match-data (0 7 0 1 1 2 2 3 3 4 4 5 5 6 6 7) lsp-completion-prefix "as" lsp-completion-markers (247 #<marker (moves after insertion) in no buffer>) lsp-completion-start-point 247 lsp-sort-text "09.9999.assertEqual" lsp-completion-item #s(hash-table size 6 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("label" #("assertEqual" 0 11 (match-data (0 11 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10 11))) "kind" 2 "data" #s(hash-table size 4 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("uri" "file:///home/csj7701/Projects/RL-StateValue/tests/test_grid.py" "position" #s(hash-table size 2 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("line" 8 "character" 19)) "funcParensDisabled" t "symbolLabel" "assertEqual")) "sortText" "09.9999.assertEqual" "_emacsStartPoint" 247)))) . -307) (undo-tree-id65 . -9) (undo-tree-id66 . -9) (undo-tree-id67 . -9) (undo-tree-id68 . -9) 316) nil (26361 49908 591945 111000) 0 nil])
([nil nil ((318 . 325)) nil (26361 49908 591941 324000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9) lsp-completion-prefix "as" lsp-completion-markers (307 #<marker (moves after insertion) in no buffer>) lsp-completion-start-point 307 lsp-sort-text "09.9999.assertEqual" lsp-completion-item #s(hash-table size 6 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("label" #("assertEqual" 0 11 (match-data (0 11 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10 11))) "kind" 2 "data" #s(hash-table size 4 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("uri" "file:///home/csj7701/Projects/RL-StateValue/tests/test_grid.py" "position" #s(hash-table size 2 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("line" 9 "character" 19)) "funcParensDisabled" t "symbolLabel" "assertEqual")) "sortText" "09.9999.assertEqual" "_emacsStartPoint" 307)))) . -324) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) 325) nil (26361 49908 591940 573000) 0 nil])
([nil nil ((324 . 329)) nil (26361 49908 591937 367000) 0 nil])
([nil nil ((329 . 349)) nil (26361 49908 591936 465000) 0 nil])
([nil nil ((349 . 362)) nil (26361 49908 591935 674000) 0 nil])
([nil nil ((362 . 375)) nil (26361 49908 591935 83000) 0 nil])
([nil nil ((367 . 377) (#("assertTr" 0 8 (fontified t match-data (0 9 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9) lsp-completion-prefix "as" lsp-completion-markers (307 #<marker (moves after insertion) in no buffer>) lsp-completion-start-point 307 lsp-sort-text "09.9999.assertEqual" lsp-completion-item #s(hash-table size 6 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("label" #("assertEqual" 0 11 (match-data (0 11 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10 11))) "kind" 2 "data" #s(hash-table size 4 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("uri" "file:///home/csj7701/Projects/RL-StateValue/tests/test_grid.py" "position" #s(hash-table size 2 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("line" 9 "character" 19)) "funcParensDisabled" t "symbolLabel" "assertEqual")) "sortText" "09.9999.assertEqual" "_emacsStartPoint" 307)))) . -367) (undo-tree-id57 . -8) (undo-tree-id58 . -8) (undo-tree-id59 . -8) (undo-tree-id60 . -8) 375) nil (26361 49908 591934 361000) 0 nil])
([nil nil ((377 . 378)) nil (26361 49908 591932 438000) 0 nil])
([nil nil ((378 . 395)) nil (26361 49908 591932 117000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8) lsp-completion-prefix "as" lsp-completion-markers (367 #<marker (moves after insertion) in no buffer>) lsp-completion-start-point 367 lsp-sort-text "09.9999.assertTrue" lsp-completion-item #s(hash-table size 6 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("label" #("assertTrue" 0 10 (match-data (0 10 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10))) "kind" 2 "data" #s(hash-table size 4 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("uri" "file:///home/csj7701/Projects/RL-StateValue/tests/test_grid.py" "position" #s(hash-table size 2 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("line" 10 "character" 19)) "funcParensDisabled" t "symbolLabel" "assertTrue")) "sortText" "09.9999.assertTrue" "_emacsStartPoint" 367)))) . -393) (undo-tree-id55 . -1) (#("r" 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8) lsp-completion-prefix "as" lsp-completion-markers (367 #<marker (moves after insertion) in no buffer>) lsp-completion-start-point 367 lsp-sort-text "09.9999.assertTrue" lsp-completion-item #s(hash-table size 6 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("label" #("assertTrue" 0 10 (match-data (0 10 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10))) "kind" 2 "data" #s(hash-table size 4 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("uri" "file:///home/csj7701/Projects/RL-StateValue/tests/test_grid.py" "position" #s(hash-table size 2 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("line" 10 "character" 19)) "funcParensDisabled" t "symbolLabel" "assertTrue")) "sortText" "09.9999.assertTrue" "_emacsStartPoint" 367)))) . -394) (undo-tree-id56 . -1) 395) nil (26361 49908 591931 526000) 0 nil])
([nil nil ((393 . 403)) nil (26361 49908 591930 223000) 0 nil])
([nil nil ((403 . 416)) nil (26361 49908 591929 652000) 0 nil])
([nil nil ((416 . 420)) nil (26361 49908 591929 161000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8) lsp-completion-prefix "as" lsp-completion-markers (367 #<marker (moves after insertion) in no buffer>) lsp-completion-start-point 367 lsp-sort-text "09.9999.assertTrue" lsp-completion-item #s(hash-table size 6 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("label" #("assertTrue" 0 10 (match-data (0 10 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10))) "kind" 2 "data" #s(hash-table size 4 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("uri" "file:///home/csj7701/Projects/RL-StateValue/tests/test_grid.py" "position" #s(hash-table size 2 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("line" 10 "character" 19)) "funcParensDisabled" t "symbolLabel" "assertTrue")) "sortText" "09.9999.assertTrue" "_emacsStartPoint" 367)))) . -419) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) 420) nil (26361 49908 591928 420000) 0 nil])
([nil nil ((419 . 420)) nil (26361 49908 591918 471000) 0 nil])
([nil nil ((16 . 17)) nil (26361 49908 591917 840000) 0 nil])
([nil nil ((17 . 35)) nil (26361 49908 591917 459000) 0 nil])
([nil nil ((439 . 458)) nil (26361 49908 591917 179000) 0 nil])
([nil nil ((458 . 476)) nil (26361 49908 591916 768000) 0 nil])
([nil nil ((476 . 477)) nil (26361 49908 591912 831000) 0 nil])
([nil nil ((478 . 490) (#("            " 0 12 (fontified nil match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8) lsp-completion-prefix "as" lsp-completion-markers (367 #<marker (moves after insertion) in no buffer>) lsp-completion-start-point 367 lsp-sort-text "09.9999.assertTrue" lsp-completion-item #s(hash-table size 6 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("label" #("assertTrue" 0 10 (match-data (0 10 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10))) "kind" 2 "data" #s(hash-table size 4 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("uri" "file:///home/csj7701/Projects/RL-StateValue/tests/test_grid.py" "position" #s(hash-table size 2 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("line" 10 "character" 19)) "funcParensDisabled" t "symbolLabel" "assertTrue")) "sortText" "09.9999.assertTrue" "_emacsStartPoint" 367)))) . 477) (undo-tree-id186 . -12) (476 . 490) (t 26361 49908 594890 312000)) nil (26361 50035 776626 227000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8) lsp-completion-prefix "as" lsp-completion-markers (367 #<marker (moves after insertion) in no buffer>) lsp-completion-start-point 367 lsp-sort-text "09.9999.assertTrue" lsp-completion-item #s(hash-table size 6 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("label" #("assertTrue" 0 10 (match-data (0 10 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10))) "kind" 2 "data" #s(hash-table size 4 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("uri" "file:///home/csj7701/Projects/RL-StateValue/tests/test_grid.py" "position" #s(hash-table size 2 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("line" 10 "character" 19)) "funcParensDisabled" t "symbolLabel" "assertTrue")) "sortText" "09.9999.assertTrue" "_emacsStartPoint" 367)))) . 486) (undo-tree-id185 . -4) 490) nil (26361 50035 776625 345000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8) lsp-completion-prefix "as" lsp-completion-markers (367 #<marker (moves after insertion) in no buffer>) lsp-completion-start-point 367 lsp-sort-text "09.9999.assertTrue" lsp-completion-item #s(hash-table size 6 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("label" #("assertTrue" 0 10 (match-data (0 10 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10))) "kind" 2 "data" #s(hash-table size 4 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("uri" "file:///home/csj7701/Projects/RL-StateValue/tests/test_grid.py" "position" #s(hash-table size 2 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("line" 10 "character" 19)) "funcParensDisabled" t "symbolLabel" "assertTrue")) "sortText" "09.9999.assertTrue" "_emacsStartPoint" 367)))) . 482) (undo-tree-id184 . -4) 486) nil (26361 50035 776624 574000) 0 nil])
([nil nil ((482 . 489)) nil (26361 50035 776623 982000) 0 nil])
([nil nil ((489 . 492)) nil (26361 50035 776623 742000) 0 nil])
([nil nil ((#("s" 0 1 (face py-def-face fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8) lsp-completion-prefix "as" lsp-completion-markers (367 #<marker (moves after insertion) in no buffer>) lsp-completion-start-point 367 lsp-sort-text "09.9999.assertTrue" lsp-completion-item #s(hash-table size 6 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("label" #("assertTrue" 0 10 (match-data (0 10 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10))) "kind" 2 "data" #s(hash-table size 4 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("uri" "file:///home/csj7701/Projects/RL-StateValue/tests/test_grid.py" "position" #s(hash-table size 2 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("line" 10 "character" 19)) "funcParensDisabled" t "symbolLabel" "assertTrue")) "sortText" "09.9999.assertTrue" "_emacsStartPoint" 367)))) . -491) (undo-tree-id183 . -1) 492) nil (26361 50035 776623 61000) 0 nil])
([nil nil ((491 . 495)) nil (26361 50035 776621 899000) 0 nil])
([nil nil ((495 . 511)) nil (26361 50035 776621 598000) 0 nil])
([nil nil ((511 . 512)) nil (26361 50035 776621 368000) 0 nil])
([nil nil ((512 . 521)) nil (26361 50035 776621 217000) 0 nil])
([nil nil ((521 . 532)) nil (26361 50035 776620 636000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8) lsp-completion-prefix "as" lsp-completion-markers (367 #<marker (moves after insertion) in no buffer>) lsp-completion-start-point 367 lsp-sort-text "09.9999.assertTrue" lsp-completion-item #s(hash-table size 6 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("label" #("assertTrue" 0 10 (match-data (0 10 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10))) "kind" 2 "data" #s(hash-table size 4 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("uri" "file:///home/csj7701/Projects/RL-StateValue/tests/test_grid.py" "position" #s(hash-table size 2 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("line" 10 "character" 19)) "funcParensDisabled" t "symbolLabel" "assertTrue")) "sortText" "09.9999.assertTrue" "_emacsStartPoint" 367)))) . -531) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) 532) nil (26361 50035 776620 115000) 0 nil])
([nil nil ((531 . 535)) nil (26361 50035 776618 422000) 0 nil])
([nil nil ((535 . 544)) nil (26361 50035 776618 21000) 0 nil])
([nil nil ((544 . 554)) nil (26361 50035 776617 771000) 0 nil])
([nil nil ((549 . 560) (#("as" 0 2 (fontified nil)) . -549) (549 . 551) (#("assertEqual" 0 11 (fontified nil)) . -549) (549 . 560) (#("asser" 0 5 (fontified t match-data (0 8 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8) lsp-completion-prefix "as" lsp-completion-markers (367 #<marker (moves after insertion) in no buffer>) lsp-completion-start-point 367 lsp-sort-text "09.9999.assertTrue" lsp-completion-item #s(hash-table size 6 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("label" #("assertTrue" 0 10 (match-data (0 10 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10))) "kind" 2 "data" #s(hash-table size 4 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("uri" "file:///home/csj7701/Projects/RL-StateValue/tests/test_grid.py" "position" #s(hash-table size 2 test equal rehash-size 1.5 rehash-threshold 0.8125 data ("line" 10 "character" 19)) "funcParensDisabled" t "symbolLabel" "assertTrue")) "sortText" "09.9999.assertTrue" "_emacsStartPoint" 367)))) . -549) (undo-tree-id175 . -5) (undo-tree-id176 . -5) (undo-tree-id177 . -5) (undo-tree-id178 . -5) 554) nil (26361 50035 776616 999000) 0 nil])
([nil nil ((560 . 568)) nil (26361 50035 776615 577000) 0 nil])
([nil nil ((566 . 575) (#("Di" 0 2 (fontified nil)) . -566) (566 . 568) (#("DIMENSION" 0 9 (fontified nil)) . -566) (566 . 575) (#("Di" 0 2 (fontified t match-data (0 5 0 1 1 2 2 3 3 4 4 5))) . -566) (undo-tree-id171 . -2) (undo-tree-id172 . -2) (undo-tree-id173 . -2) (undo-tree-id174 . -2) 568) nil (26361 50035 776614 905000) 0 nil])
([nil nil ((575 . 579)) nil (26361 50035 776612 902000) 0 nil])
([nil nil ((579 . 588)) nil (26361 50035 776612 180000) 0 nil])
([nil nil ((588 . 593)) nil (26361 50035 776611 479000) 0 nil])
([nil nil ((593 . 604) (#("assertEqual" 0 11 (fontified nil)) . -593) (593 . 604)) nil (26361 50035 776610 898000) 0 nil])
([nil nil ((604 . 613)) nil (26361 50035 776610 567000) 0 nil])
([nil nil ((610 . 616) (#("coo" 0 3 (fontified nil)) . -610) (610 . 613) (#("coords" 0 6 (fontified nil)) . -610) (610 . 616) (#("coo" 0 3 (fontified t match-data (0 0))) . -610) (undo-tree-id167 . -3) (undo-tree-id168 . -3) (undo-tree-id169 . -3) (undo-tree-id170 . -3) 613) nil (26361 50035 776609 916000) 0 nil])
([nil nil ((616 . 622)) nil (26361 50035 776608 303000) 0 nil])
([nil nil ((622 . 630)) nil (26361 50035 776608 42000) 0 nil])
([nil nil ((630 . 639)) nil (26361 50035 776607 622000) 0 nil])
([nil nil ((639 . 646)) nil (26361 50035 776607 361000) 0 nil])
([nil nil ((644 . 651) (#("ad" 0 2 (fontified nil)) . -644) (644 . 646) (#("maxDiff" 0 7 (fontified nil)) . -644) (644 . 651) (#("ad" 0 2 (fontified t match-data (0 3 0 1 1 2 2 3))) . -644) (undo-tree-id163 . -2) (undo-tree-id164 . -2) (undo-tree-id165 . -2) (undo-tree-id166 . -2) 646) nil (26361 50035 776606 339000) 0 nil])
([nil nil ((651 . 652)) nil (26361 50035 776604 496000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t match-data (1 4 1 2 3 4))) . -644) (undo-tree-id155 . -1) (#("a" 0 1 (fontified t match-data (1 4 1 2 3 4))) . -645) (undo-tree-id156 . -1) (#("x" 0 1 (fontified nil match-data (1 4 1 2 3 4))) . -646) (undo-tree-id157 . -1) (#("D" 0 1 (fontified t match-data (1 4 1 2 3 4))) . -647) (undo-tree-id158 . -1) (#("i" 0 1 (fontified t match-data (1 4 1 2 3 4))) . -648) (undo-tree-id159 . -1) (#("f" 0 1 (fontified t match-data (1 4 1 2 3 4))) . -649) (undo-tree-id160 . -1) (#("f" 0 1 (fontified t match-data (1 4 1 2 3 4))) . -650) (undo-tree-id161 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t match-data (1 4 1 2 3 4))) . -651) (undo-tree-id162 . -1) 652) nil (26361 50035 776602 833000) 0 nil])
([nil nil ((644 . 647)) nil (26361 50035 776598 244000) 0 nil])
([nil nil ((644 . 655) (#("ass" 0 3 (fontified nil)) . -644) (644 . 647) (#("assertEqual" 0 11 (fontified nil)) . -644) (644 . 655) (#("ass" 0 3 (fontified t match-data (0 3 0 1 1 2 2 3))) . -644) (undo-tree-id151 . -3) (undo-tree-id152 . -3) (undo-tree-id153 . -3) (undo-tree-id154 . -3) 647) nil (26361 50035 776596 851000) 0 nil])
([nil nil ((655 . 668)) nil (26361 50035 776593 846000) 0 nil])
([nil nil ((#("," 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -667) (undo-tree-id149 . -1) (undo-tree-id150 . -1) 668) nil (26361 50035 776593 14000) 0 nil])
([nil nil ((667 . 681)) nil (26361 50035 776591 40000) 0 nil])
([nil nil ((683 . 691) (#("        " 0 8 (fontified nil match-data (0 3 0 1 1 2 2 3))) . 682) (undo-tree-id148 . -8) (681 . 691)) nil (26361 50035 776589 918000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t match-data (0 3 0 1 1 2 2 3))) . 687) (undo-tree-id147 . -4) 691) nil (26361 50035 776588 295000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t match-data (0 3 0 1 1 2 2 3))) . -683) (undo-tree-id146 . -4) 687) nil (26361 50035 776586 812000) 0 nil])
([nil nil ((683 . 691)) nil (26361 50035 776585 59000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t match-data (0 3 0 1 1 2 2 3))) . 687) (undo-tree-id145 . -4) 691) nil (26361 50035 776584 47000) 0 nil])
([nil nil ((687 . 688)) nil (26361 50035 776198 319000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -687) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) 688) nil (26361 50035 776197 758000) 0 nil])
([nil nil ((687 . 699)) nil (26361 50035 776194 612000) 0 nil])
([nil nil ((699 . 720)) nil (26361 50035 776193 971000) 0 nil])
([nil nil ((720 . 721)) nil (26361 50035 776193 720000) 0 nil])
([nil nil ((721 . 730)) nil (26361 50035 776193 129000) 0 nil])
([nil nil ((730 . 750)) nil (26361 50035 776192 849000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -748) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (#("i" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -749) (undo-tree-id140 . -1) 750) nil (26361 50035 776192 278000) 0 nil])
([nil nil ((748 . 764)) nil (26361 50035 776190 114000) 0 nil])
([nil nil ((764 . 777)) nil (26361 50035 776189 793000) 0 nil])
([nil nil ((764 . 765)) nil (26361 50035 776189 542000) 0 nil])
([nil nil ((765 . 778)) nil (26361 50035 776189 282000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . 778) (#("
" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . 778)) nil (26361 50035 776188 500000) 0 nil])
([nil nil ((#("           
" 0 11 (fontified t match-data (0 3 0 1 1 2 2 3)) 11 12 (fontified t)) . 778)) nil (26361 50035 776187 869000) 0 nil])
([nil nil ((778 . 786)) nil (26361 50035 776187 438000) 0 nil])
([nil nil ((788 . 800) (#("            " 0 12 (fontified nil match-data (0 3 0 1 1 2 2 3))) . 787) (undo-tree-id135 . -12) (786 . 800)) nil (26361 50035 776187 118000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t match-data (0 3 0 1 1 2 2 3))) . 796) (undo-tree-id134 . -4) 800) nil (26361 50035 776186 306000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t match-data (0 3 0 1 1 2 2 3))) . 792) (undo-tree-id133 . -4) 796) nil (26361 50035 776185 405000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t match-data (0 3 0 1 1 2 2 3))) . -788) (undo-tree-id132 . -4) 792) nil (26361 50035 776184 453000) 0 nil])
([nil nil ((788 . 805)) nil (26361 50035 776183 772000) 0 nil])
([nil nil ((#("_" 0 1 (face py-builtins-face fontified t match-data (0 3 0 1 1 2 2 3))) . -803) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (#("_" 0 1 (fontified t match-data (0 3 0 1 1 2 2 3))) . -804) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) 805) nil (26361 50035 776183 291000) 0 nil])
([nil nil ((803 . 804)) nil (26361 50035 776179 784000) 0 nil])
([nil nil ((#("\"" 0 1 (face font-lock-string-face fontified t match-data (0 3 0 1 1 2 2 3))) . -803) (undo-tree-id123 . -1) 804) nil (26361 50035 776179 373000) 0 nil])
([nil nil ((803 . 813)) nil (26361 50035 776178 502000) 0 nil])
([nil nil ((813 . 814)) nil (26361 50035 776178 241000) 0 nil])
([nil nil ((814 . 819)) nil (26361 50035 776177 971000) 0 nil])
([nil nil ((819 . 824)) nil (26361 50035 776177 680000) 0 nil])
([nil nil ((819 . 827) (#("uni" 0 3 (fontified nil)) . -819) (819 . 822) (#("unittest" 0 8 (fontified nil)) . -819) (819 . 827) (#("unitt" 0 5 (fontified t match-data (0 3 0 1 1 2 2 3))) . -819) (undo-tree-id119 . -5) (undo-tree-id120 . -5) (undo-tree-id121 . -5) (undo-tree-id122 . -5) 824) nil (26361 50035 776176 37000) 0 nil])
([nil nil ((827 . 834)) nil (26361 50035 776165 46000) 0 nil])
([nil nil ((834 . 835)) nil (26361 50035 776160 868000) 0 nil])
([nil nil ((41 . 54) (#("src" 0 3 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . 41) (t 26361 50035 779389 220000)) nil (26368 15753 924605 658000) 0 nil])
([nil nil ((41 . 45) (t 26366 45608 6331 653000)) nil (26368 15753 924601 450000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -41) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (#("r" 0 1 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -42) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (#("c" 0 1 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -43) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (#("." 0 1 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -44) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) 45 (t 26368 15753 927050 745000)) nil (26368 15758 104393 531000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . -43) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) 44 (t 26368 15758 106096 162000)) nil (26368 15947 477539 172000) 0 nil])
([nil nil ((43 . 44)) nil (26368 15947 477456 156000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . -43) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) 44 (t 26368 15947 480156 756000)) nil (26368 15961 504176 557000) 0 nil])
([nil nil ((43 . 44)) nil (26368 15961 504156 219000) 0 nil])
([nil nil ((41 . 45) (t 26368 15961 506309 543000)) nil (26368 16644 243940 659000) 0 nil])
([nil current ((#("s" 0 1 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -41) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (#("r" 0 1 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -42) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (#("c" 0 1 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -43) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (#("." 0 1 (fontified t match-data (0 6 0 1 1 2 2 3 3 4 4 5 5 6))) . -44) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (undo-tree-id1176 . -1) (undo-tree-id1177 . -1) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) 45 (t 26368 16644 245793 8000)) nil (26368 16917 822830 449000) 0 nil])
nil
